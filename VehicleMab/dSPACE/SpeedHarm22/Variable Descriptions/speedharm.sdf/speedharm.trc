-- ****************************************************************************
--
--  Trace file: SpeedHarm.trc
--
--  RTI1401 7.3 (02-Nov-2014)
--  Fri Apr 01 15:05:07 2016
--
--  Used options:
--    TRCGenerateVirtualBlocks      = 0
--    TRCGenerateLabels             = 1
--    TRCGenerateStates             = 0
--    TRCGenerateDerivatives        = 0
--    TRCGenerateParamValues        = 0
--    TRCGenerateApplicationKeyword = 0
--    TRCOnlyGlobals                = 0
--    TRCIsOmitVdOn                 = 0
--
--  Trace file format: 2
--
--  (c) Copyright 2008, dSPACE GmbH. All rights reserved.
--
-- ****************************************************************************

-- ******** Keywords **********************************************************

-- _application "SpeedHarm.map"

_genname     "RTI"
_genversion  "7.3"
_gendate     "04/01/2016 15:05:21"
_description ""
_author      "RTI1401 7.3 (02-Nov-2014)"
_model       "SpeedHarm.mdl"

-- Default data type formats
_floating_point_type(64,IEEE)
_integer_type(32)

-- No Data Capture blocks within model: use base sample time as sampling period
sampling_period[0]
{
  value:       0.001
  alias:       "HostService"
  increment:   0.001
  unit:        "s"
}


-- Type definitions for enumerations

enum SpeedHarm_AutoStateEnum
{
  type:     int(32)
  enums
    {
      0:    "MANUAL"
      1:    "AUTO_FULL"
      2:    "AUTO_LOCAL"
    }
}

enum SpeedHarm_AccelCommandMode
{
  type:     int(32)
  enums
    {
      0:    "AccelCommandMode_ACC_Disable"
      1:    "AccelCommandMode_WrenchEffort"
      2:    "AccelCommandMode_SpeedControl"
    }
}

enum SpeedHarm_MergeStateEnum
{
  type:     int(32)
  enums
    {
      0:    "STARTUP"
      1:    "MERGE_REQUEST"
      2:    "M_MERGE_READY"
      4:    "F_MERGE_READY"
      8:    "M_MERGE_COMPLETE"
      16:    "F_MERGE_COMPLETE"
      128:    "F_MERGE_REQUEST_ACK"
    }
}



-- Type definitions for arrays
typedef SpeedHarm_ArrayDT0_74 flt(64,IEEE)[74]
typedef SpeedHarm_ArrayDT0_4 flt(64,IEEE)[4]
typedef SpeedHarm_ArrayDT0_1472 flt(64,IEEE)[1472]
typedef SpeedHarm_ArrayDT7_157 uint(32)[157]
typedef SpeedHarm_ArrayDT7_368 uint(32)[368]
typedef SpeedHarm_ArrayDT7_264 uint(32)[264]
typedef SpeedHarm_ArrayDT7_2 uint(32)[2]
typedef SpeedHarm_ArrayDT7_5 uint(32)[5]
typedef SpeedHarm_ArrayDT3_1_8_Col col uint(8)[1][8]
typedef SpeedHarm_ArrayDT3_1_2_Col col uint(8)[1][2]
typedef SpeedHarm_ArrayDT3_1_4_Col col uint(8)[1][4]
typedef SpeedHarm_ArrayDT3_1_3_Col col uint(8)[1][3]
typedef SpeedHarm_ArrayDT3_1_1472_Col col uint(8)[1][1472]
typedef SpeedHarm_ArrayDT3_1472 uint(8)[1472]
typedef SpeedHarm_ArrayDT8_4 uint(8)[4]
typedef SpeedHarm_ArrayDT8_1_4_Col col uint(8)[1][4]
typedef SpeedHarm_ArrayDT0_2 flt(64,IEEE)[2]
typedef SpeedHarm_ArrayDT0_27 flt(64,IEEE)[27]
typedef SpeedHarm_ArrayDT0_18 flt(64,IEEE)[18]
typedef SpeedHarm_ArrayDT0_13 flt(64,IEEE)[13]
typedef SpeedHarm_ArrayDT0_9 flt(64,IEEE)[9]
typedef SpeedHarm_ArrayDT0_149 flt(64,IEEE)[149]
typedef SpeedHarm_ArrayDT7_4 uint(32)[4]
typedef SpeedHarm_ArrayDT7_8 uint(32)[8]
typedef SpeedHarm_ArrayDT7_3 uint(32)[3]
typedef SpeedHarm_ArrayDT6_2 int(32)[2]
typedef SpeedHarm_ArrayDT10_2 int(32)[2]


-- ******** Simulation control variables **************************************

finalTime
{
 type:  flt(64,IEEE)*
 alias: "finalTime"
 desc:  "Simulation stop time. When reached, simState switches to STOP."
 flags:  SYSTEM|READONLY
 unit:  "s"
}

currentTime
{
 type:  flt(64,IEEE)*
 alias: "currentTime"
 desc:  "Current simulation time. Increments with execution of Timer Task 1."
 flags: SYSTEM|READONLY
 unit:  "s"
}

modelStepSize
{
 type:  flt(64,IEEE)
 alias: "modelStepSize"
 desc:  "Fixed step size of the model, sample time of Timer Task 1."
 flags: SYSTEM|READONLY
 unit:  "s"
}

simState
{
 type:  int(32)
 alias: "simState"
 desc:  "Simulation state: STOP=0 PAUSE=1 RUN=2"
 flags: SYSTEM
 unit:  "-"
}

msg_last_error_no
{
 type:  uint(32)
 alias: "errorNumber"
 desc:  "Error number of last error message (zero if no error)."
 unit:  "-"
 flags: SYSTEM|READONLY
}

rtiAssertionMode
{
 type:  int(32)
 alias: "rtiAssertionMode"
 desc:  "Assertion Mode: OFF=0 WARN=1 STOP=2"
 flags: SYSTEM
 unit:  "-"
}



-- ******** Model variables ***************************************************

group "Model Root"
{
 flags: COLLAPSED
}
	group "BSM Data Read" -- block-group
	{
	 block: "DataStoreRead"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_uint8_T_0_0_0_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_0_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh5BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_0_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh5BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_0_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh5BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_0_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh5BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_0_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh5BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_0_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh5BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_0_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_0_0_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_0_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh5BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_0_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh5BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_0_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_1_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh4BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_1_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh4BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_1_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh4BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_1_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh4BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_1_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh4BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_1_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh4BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_1_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_0_1_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_1_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh4BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_1_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh4BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_1_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_2_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh3BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_2_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh3BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_2_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh3BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_2_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh3BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_2_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh3BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_2_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh3BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_2_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_0_2_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_2_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh3BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_2_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh3BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_2_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_3_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh2BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_3_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh2BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_3_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh2BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_3_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh2BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_3_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh2BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_3_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh2BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_3_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_0_3_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_3_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh2BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_3_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh2BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_3_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_4_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh1BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_4_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh1BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_0_4_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh1BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_4_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh1BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_4_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh1BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_0_4_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh1BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_0_4_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_0_4_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_4_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh1BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_0_4_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh1BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_0_4_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "BSM Data Read"

	group "CarmaData Read" -- block-group
	{
	 block: "DataStoreRead"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_real_T_1_0_0_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{requested_cacc_state.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_0_value
		{
		 type:    uint(8)*
		 alias:   "Out1{requested_cacc_state.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_1_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{radar_status.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_1_value
		{
		 type:    uint(8)*
		 alias:   "Out1{radar_status.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_2_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{acc_status.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_2_value
		{
		 type:    uint(8)*
		 alias:   "Out1{acc_status.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_3_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{path_ctrl_status.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_3_value
		{
		 type:    uint(8)*
		 alias:   "Out1{path_ctrl_status.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_4_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{throttle_ovr_flag.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_4_value
		{
		 type:    uint(8)*
		 alias:   "Out1{throttle_ovr_flag.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_5_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{acc_set_speed_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_5_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{acc_set_speed_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_6_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_6_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_7_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{speed_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_7_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{speed_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_8_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{steering_wheel_angle_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_8_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{steering_wheel_angle_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_9_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{brk_light_flag.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_9_value
		{
		 type:    uint(8)*
		 alias:   "Out1{brk_light_flag.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_10_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{brk_pedal_deflect_percent.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_10_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{brk_pedal_deflect_percent.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_11_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{throttle_pedal_deflect_percent.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_11_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{throttle_pedal_deflect_percent.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_12_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_utc_time_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_12_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_utc_time_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_13_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_lat_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_13_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_lat_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_14_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_long_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_14_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_long_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_15_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_alt_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_15_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_alt_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_16_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_roll_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_16_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{global_roll_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_17_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_pitch_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_17_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{global_pitch_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_18_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_yaw_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_18_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{global_yaw_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_19_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_north_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_19_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_north_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_20_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_east_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_20_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_east_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_21_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_down_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_21_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_down_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_22_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_roll_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_22_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{local_roll_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_23_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_pitch_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_23_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{local_pitch_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_24_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_yaw_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_24_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{local_yaw_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_25_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{horizontal_pos_accuracy_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_25_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{horizontal_pos_accuracy_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_26_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{vertical_pos_accuracy_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_26_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{vertical_pos_accuracy_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_27_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_fwd_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_27_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_fwd_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_28_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_right_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_28_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_right_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_29_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_down_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_29_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_down_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_30_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_accuracy_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_30_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_accuracy_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_31_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_fwd_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_31_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_fwd_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_32_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_right_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_32_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_right_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_33_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_down_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_33_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_down_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_34_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{preceding_veh_flag.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_0_34_value
		{
		 type:    uint(8)*
		 alias:   "Out1{preceding_veh_flag.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_35_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{dist_to_preceding_veh_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_35_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{dist_to_preceding_veh_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_36_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{rel_speed_to_preceding_veh_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_0_36_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{rel_speed_to_preceding_veh_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_37_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{object_list.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_1_0_37_1_num_objects
		{
		 type:    uint(8)*
		 alias:   "Out1{object_list.value.num_objects}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_0_38_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{desired_headway.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int32_T_1_0_38_value
		{
		 type:    int(32)*
		 alias:   "Out1{desired_headway.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "CarmaData Read"

	group "Data Store\nRead" -- block-group
	{
	 block: "DataStoreRead"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_real_T_10[97]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Data Store\nRead"

	group "Radar Data Read" -- block-group
	{
	 block: "DataStoreRead"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_uint8_T_2_1_num_objects
		{
		 type:    uint(8)*
		 alias:   "Out1{num_objects}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Radar Data Read"

	group "Rate Transition" -- block-group
	{
	 block: "RateTransition"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_real_T_1_1_0_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{requested_cacc_state.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_0_value
		{
		 type:    uint(8)*
		 alias:   "Out1{requested_cacc_state.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_1_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{radar_status.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_1_value
		{
		 type:    uint(8)*
		 alias:   "Out1{radar_status.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_2_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{acc_status.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_2_value
		{
		 type:    uint(8)*
		 alias:   "Out1{acc_status.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_3_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{path_ctrl_status.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_3_value
		{
		 type:    uint(8)*
		 alias:   "Out1{path_ctrl_status.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_4_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{throttle_ovr_flag.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_4_value
		{
		 type:    uint(8)*
		 alias:   "Out1{throttle_ovr_flag.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_5_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{acc_set_speed_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_5_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{acc_set_speed_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_6_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_6_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_7_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{speed_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_7_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{speed_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_8_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{steering_wheel_angle_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_8_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{steering_wheel_angle_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_9_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{brk_light_flag.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_9_value
		{
		 type:    uint(8)*
		 alias:   "Out1{brk_light_flag.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_10_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{brk_pedal_deflect_percent.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_10_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{brk_pedal_deflect_percent.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_11_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{throttle_pedal_deflect_percent.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_11_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{throttle_pedal_deflect_percent.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_12_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_utc_time_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_12_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_utc_time_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_13_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_lat_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_13_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_lat_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_14_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_long_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_14_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_long_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_15_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_alt_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_15_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_alt_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_16_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_roll_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_16_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{global_roll_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_17_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_pitch_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_17_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{global_pitch_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_18_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{global_yaw_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_18_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{global_yaw_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_19_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_north_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_19_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_north_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_20_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_east_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_20_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_east_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_21_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_down_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_21_value
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_down_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_22_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_roll_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_22_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{local_roll_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_23_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_pitch_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_23_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{local_pitch_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_24_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{local_yaw_deg.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_24_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{local_yaw_deg.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_25_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{horizontal_pos_accuracy_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_25_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{horizontal_pos_accuracy_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_26_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{vertical_pos_accuracy_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_26_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{vertical_pos_accuracy_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_27_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_fwd_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_27_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_fwd_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_28_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_right_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_28_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_right_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_29_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_down_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_29_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_down_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_30_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{velocity_accuracy_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_30_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{velocity_accuracy_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_31_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_fwd_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_31_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_fwd_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_32_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_right_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_32_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_right_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_33_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{accel_down_m_s2.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_33_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{accel_down_m_s2.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_34_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{preceding_veh_flag.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_1_1_34_value
		{
		 type:    uint(8)*
		 alias:   "Out1{preceding_veh_flag.value}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_35_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{dist_to_preceding_veh_m.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_35_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{dist_to_preceding_veh_m.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_36_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{rel_speed_to_preceding_veh_m_s.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_1_1_36_value
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{rel_speed_to_preceding_veh_m_s.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_37_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{object_list.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_1_1_37_1_num_objects
		{
		 type:    uint(8)*
		 alias:   "Out1{object_list.value.num_objects}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real_T_1_1_38_rx_timestamp_s
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1{desired_headway.rx_timestamp_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int32_T_1_1_38_value
		{
		 type:    int(32)*
		 alias:   "Out1{desired_headway.value}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Rate Transition"

	group "Rate Transition1" -- block-group
	{
	 block: "RateTransition"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_uint8_T_0_1_0_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_0_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh5BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_0_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh5BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_0_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh5BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_0_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh5BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_0_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh5BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_0_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh5BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_0_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh5BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_1_0_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_0_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh5BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_0_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh5BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_0_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh5BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_1_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh4BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_1_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh4BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_1_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh4BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_1_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh4BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_1_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh4BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_1_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh4BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_1_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh4BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_1_1_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_1_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh4BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_1_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh4BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_1_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh4BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_2_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh3BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_2_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh3BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_2_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh3BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_2_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh3BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_2_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh3BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_2_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh3BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_2_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh3BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_1_2_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_2_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh3BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_2_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh3BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_2_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh3BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_3_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh2BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_3_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh2BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_3_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh2BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_3_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh2BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_3_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh2BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_3_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh2BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_3_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh2BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_1_3_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_3_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh2BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_3_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh2BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_3_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh2BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_caccFlags_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.caccFlags_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_setSpeed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.setSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_throtPos_percent
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.throtPos_percent}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_lclPN_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lclPN_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_lclPE_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lclPE_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_lclPD_mm
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lclPD_mm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_roll_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.roll_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_pitch_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.pitch_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_yaw_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.yaw_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_hPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.hPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_vPosAcry_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.vPosAcry_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_frwdVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.frwdVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_rightVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.rightVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_downVel_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.downVel_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_velAcc_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.velAcc_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_4_frwdAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh1BSM.frwdAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_4_rightAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh1BSM.rightAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_int16_T_0_1_4_dwnAcc_mm_s_s
		{
		 type:    int(16)*
		 alias:   "Out1{Veh1BSM.dwnAcc_mm_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_grpID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_grpSize
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpSize}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_grpMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_grpManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_grpManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.grpManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_vehID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_frntCutIn
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.frntCutIn}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_vehGrpPos
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehGrpPos}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_vehFltMode
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehFltMode}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_vehManDes
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehManDes}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_vehManID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.vehManID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_distToPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.distToPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_relSpdPVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.relSpdPVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_distToLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.distToLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_relSpdLVeh_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.relSpdLVeh_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_desTGapPVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.desTGapPVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_desTGapLVeh_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.desTGapLVeh_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_estDisPVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.estDisPVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_estDisLVeh_m
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.estDisLVeh_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_desSpeed_m_s
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.desSpeed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_4_desTrq_N_m
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh1BSM.desTrq_N_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_msgID
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.msgID}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_msgCnt
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.msgCnt}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_4_id
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh1BSM.id}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_0_1_4_secMark_ms
		{
		 type:    uint(16)*
		 alias:   "Out1{Veh1BSM.secMark_ms}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_lat_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lat_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_lon_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lon_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_elev_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.elev_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_semi_major_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.semi_major_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_semi_minor_accuracy_m
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.semi_minor_accuracy_m}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_semi_major_accuracy_orientation_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.semi_major_accuracy_orientation_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_speed_m_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.speed_m_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_transmission_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.transmission_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_heading_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.heading_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_angle_deg
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.angle_deg}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_vertical_acceleration_g
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.vertical_acceleration_g}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_lat_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.lat_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_long_acceleration_m_s_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.long_acceleration_m_s_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_0_1_4_yaw_rate_deg_s
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{Veh1BSM.yaw_rate_deg_s}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_wheelBrakes_bitmask
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.wheelBrakes_bitmask}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_boolean_T_0_1_4_wheelBrakesUnavailable
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.wheelBrakesUnavailable}"
		 desc:    ""
		 range:   < 0 ; 1 >
		 bitmask: 0x01
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_tractionControlState_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.tractionControlState_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_anti_lock_brake_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.anti_lock_brake_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_stability_control_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.stability_control_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_brake_boost_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.brake_boost_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_auxiliary_brakes_status_enum
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.auxiliary_brakes_status_enum}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_4_vehicle_height_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh1BSM.vehicle_height_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint32_T_0_1_4_vehicle_width_cm
		{
		 type:    uint(32)*
		 alias:   "Out1{Veh1BSM.vehicle_width_cm}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_userDE1
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_userDE2
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_userDE3
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_userDE4
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_0_1_4_userDE5
		{
		 type:    uint(8)*
		 alias:   "Out1{Veh1BSM.userDE5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Rate Transition1"

	group "Rate Transition2" -- block-group
	{
	 block: "RateTransition"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_uint8_T_19[67]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray1}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[66]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray2}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[65]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray3}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[64]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray4}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[63]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray5}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[62]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray6}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[61]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray7}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[60]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray8}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[59]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray9}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[58]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray10}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[57]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray11}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[56]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray12}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_12[45]
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{SubArray13}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[55]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray14}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_12[44]
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{SubArray15}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_12[43]
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{SubArray16}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_12[42]
		{
		 type:    flt(32,IEEE)*
		 alias:   "Out1{SubArray17}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[54]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray18}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[53]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray19}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[52]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray20}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_18[6]
		{
		 type:    uint(16)*
		 alias:   "Out1{SubArray21}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[51]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray22}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[50]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray23}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[49]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray24}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[48]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray25}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[47]
		{
		 type:    uint(8)*
		 alias:   "Out1{SubArray26}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Rate Transition2"

	group "Rate Transition3" -- block-group
	{
	 block: "RateTransition"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_uint8_T_19[46]
		{
		 type:    uint(8)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Rate Transition3"

	group "Rate Transition4" -- block-group
	{
	 block: "RateTransition"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_uint8_T_2_2_num_objects
		{
		 type:    uint(8)*
		 alias:   "Out1{num_objects}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


	endgroup -- block-group "Rate Transition4"

	group "Rate Transition5" -- block-group
	{
	 block: "RateTransition"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_SpeedHarm_B_real_T_10[98]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_P_real_T_5[1028]
		{
		 type:    flt(64,IEEE)*
		 alias:   "X0"
		 flags:   PARAM
		}


	endgroup -- block-group "Rate Transition5"

  
  
	group " " -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}




	endgroup -- subsystem-group " "
  
  
	group "BSM Broadcast" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


		group "Rate Transition" -- block-group
		{
		 block: "RateTransition"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_uint8_T_3_1_caccFlags_bitmask
			{
			 type:    uint(8)*
			 alias:   "Out1{caccFlags_bitmask}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_setSpeed_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{setSpeed_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_throtPos_percent
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{throtPos_percent}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_lclPN_mm
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{lclPN_mm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_lclPE_mm
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{lclPE_mm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_lclPD_mm
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{lclPD_mm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_roll_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{roll_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_pitch_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{pitch_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_yaw_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{yaw_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_hPosAcry_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{hPosAcry_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_vPosAcry_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{vPosAcry_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_frwdVel_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{frwdVel_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_rightVel_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{rightVel_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_downVel_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{downVel_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_velAcc_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{velAcc_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_3_1_frwdAcc_mm_s_s
			{
			 type:    int(16)*
			 alias:   "Out1{frwdAcc_mm_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_3_1_rightAcc_mm_s_s
			{
			 type:    int(16)*
			 alias:   "Out1{rightAcc_mm_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_3_1_dwnAcc_mm_s_s
			{
			 type:    int(16)*
			 alias:   "Out1{dwnAcc_mm_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_grpID
			{
			 type:    uint(8)*
			 alias:   "Out1{grpID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_grpSize
			{
			 type:    uint(8)*
			 alias:   "Out1{grpSize}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_grpMode
			{
			 type:    uint(8)*
			 alias:   "Out1{grpMode}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_grpManDes
			{
			 type:    uint(8)*
			 alias:   "Out1{grpManDes}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_grpManID
			{
			 type:    uint(8)*
			 alias:   "Out1{grpManID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_vehID
			{
			 type:    uint(8)*
			 alias:   "Out1{vehID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_frntCutIn
			{
			 type:    uint(8)*
			 alias:   "Out1{frntCutIn}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_vehGrpPos
			{
			 type:    uint(8)*
			 alias:   "Out1{vehGrpPos}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_vehFltMode
			{
			 type:    uint(8)*
			 alias:   "Out1{vehFltMode}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_vehManDes
			{
			 type:    uint(8)*
			 alias:   "Out1{vehManDes}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_vehManID
			{
			 type:    uint(8)*
			 alias:   "Out1{vehManID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_distToPVeh_m
			{
			 type:    uint(8)*
			 alias:   "Out1{distToPVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_relSpdPVeh_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{relSpdPVeh_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_distToLVeh_m
			{
			 type:    uint(8)*
			 alias:   "Out1{distToLVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_relSpdLVeh_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{relSpdLVeh_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_desTGapPVeh_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{desTGapPVeh_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_desTGapLVeh_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{desTGapLVeh_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_estDisPVeh_m
			{
			 type:    uint(8)*
			 alias:   "Out1{estDisPVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_estDisLVeh_m
			{
			 type:    uint(8)*
			 alias:   "Out1{estDisLVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_desSpeed_m_s
			{
			 type:    uint(8)*
			 alias:   "Out1{desSpeed_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_3_1_desTrq_N_m
			{
			 type:    uint(16)*
			 alias:   "Out1{desTrq_N_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_msgID
			{
			 type:    uint(8)*
			 alias:   "Out1{msgID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_msgCnt
			{
			 type:    uint(8)*
			 alias:   "Out1{msgCnt}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_3_1_id
			{
			 type:    uint(32)*
			 alias:   "Out1{id}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_3_1_secMark_ms
			{
			 type:    uint(16)*
			 alias:   "Out1{secMark_ms}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_lat_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{lat_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_lon_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{lon_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_elev_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{elev_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_semi_major_accuracy_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{semi_major_accuracy_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_semi_minor_accuracy_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{semi_minor_accuracy_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_semi_major_accuracy_orientation_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{semi_major_accuracy_orientation_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_speed_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{speed_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_transmission_enum
			{
			 type:    uint(8)*
			 alias:   "Out1{transmission_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_heading_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{heading_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_angle_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{angle_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_vertical_acceleration_g
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{vertical_acceleration_g}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_lat_acceleration_m_s_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{lat_acceleration_m_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_long_acceleration_m_s_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{long_acceleration_m_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_1_yaw_rate_deg_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{yaw_rate_deg_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_wheelBrakes_bitmask
			{
			 type:    uint(8)*
			 alias:   "Out1{wheelBrakes_bitmask}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_3_1_wheelBrakesUnavailable
			{
			 type:    uint(8)*
			 alias:   "Out1{wheelBrakesUnavailable}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_tractionControlState_enum
			{
			 type:    uint(8)*
			 alias:   "Out1{tractionControlState_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_anti_lock_brake_status_enum
			{
			 type:    uint(8)*
			 alias:   "Out1{anti_lock_brake_status_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_stability_control_status_enum
			{
			 type:    uint(8)*
			 alias:   "Out1{stability_control_status_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_brake_boost_enum
			{
			 type:    uint(8)*
			 alias:   "Out1{brake_boost_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_auxiliary_brakes_status_enum
			{
			 type:    uint(8)*
			 alias:   "Out1{auxiliary_brakes_status_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_3_1_vehicle_height_cm
			{
			 type:    uint(32)*
			 alias:   "Out1{vehicle_height_cm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_3_1_vehicle_width_cm
			{
			 type:    uint(32)*
			 alias:   "Out1{vehicle_width_cm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_userDE1
			{
			 type:    uint(8)*
			 alias:   "Out1{userDE1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_userDE2
			{
			 type:    uint(8)*
			 alias:   "Out1{userDE2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_userDE3
			{
			 type:    uint(8)*
			 alias:   "Out1{userDE3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_userDE4
			{
			 type:    uint(8)*
			 alias:   "Out1{userDE4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_1_userDE5
			{
			 type:    uint(8)*
			 alias:   "Out1{userDE5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Rate Transition"

  
  
		group "BSM Broadcast Task" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			-- Skipping output  

  
  
			group "Common Timer\nInterrupt Interface" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output  

			endgroup -- subsystem-group "Common Timer\nInterrupt Interface"


		endgroup -- subsystem-group "BSM Broadcast Task"
  
  
		group "Broadcast BSM" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Increment Sequence Number" -- block-group
			{
			 block: "BusAssignment"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_3_3_caccFlags_bitmask
				{
				 type:    uint(8)*
				 alias:   "Out1{caccFlags_bitmask}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_setSpeed_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{setSpeed_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_throtPos_percent
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{throtPos_percent}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_lclPN_mm
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{lclPN_mm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_lclPE_mm
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{lclPE_mm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_lclPD_mm
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{lclPD_mm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_roll_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{roll_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_pitch_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{pitch_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_yaw_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{yaw_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_hPosAcry_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{hPosAcry_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_vPosAcry_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{vPosAcry_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_frwdVel_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{frwdVel_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_rightVel_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{rightVel_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_downVel_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{downVel_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_velAcc_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{velAcc_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_3_3_frwdAcc_mm_s_s
				{
				 type:    int(16)*
				 alias:   "Out1{frwdAcc_mm_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_3_3_rightAcc_mm_s_s
				{
				 type:    int(16)*
				 alias:   "Out1{rightAcc_mm_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_3_3_dwnAcc_mm_s_s
				{
				 type:    int(16)*
				 alias:   "Out1{dwnAcc_mm_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_grpID
				{
				 type:    uint(8)*
				 alias:   "Out1{grpID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_grpSize
				{
				 type:    uint(8)*
				 alias:   "Out1{grpSize}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_grpMode
				{
				 type:    uint(8)*
				 alias:   "Out1{grpMode}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_grpManDes
				{
				 type:    uint(8)*
				 alias:   "Out1{grpManDes}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_grpManID
				{
				 type:    uint(8)*
				 alias:   "Out1{grpManID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_vehID
				{
				 type:    uint(8)*
				 alias:   "Out1{vehID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_frntCutIn
				{
				 type:    uint(8)*
				 alias:   "Out1{frntCutIn}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_vehGrpPos
				{
				 type:    uint(8)*
				 alias:   "Out1{vehGrpPos}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_vehFltMode
				{
				 type:    uint(8)*
				 alias:   "Out1{vehFltMode}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_vehManDes
				{
				 type:    uint(8)*
				 alias:   "Out1{vehManDes}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_vehManID
				{
				 type:    uint(8)*
				 alias:   "Out1{vehManID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_distToPVeh_m
				{
				 type:    uint(8)*
				 alias:   "Out1{distToPVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_relSpdPVeh_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{relSpdPVeh_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_distToLVeh_m
				{
				 type:    uint(8)*
				 alias:   "Out1{distToLVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_relSpdLVeh_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{relSpdLVeh_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_desTGapPVeh_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{desTGapPVeh_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_desTGapLVeh_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{desTGapLVeh_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_estDisPVeh_m
				{
				 type:    uint(8)*
				 alias:   "Out1{estDisPVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_estDisLVeh_m
				{
				 type:    uint(8)*
				 alias:   "Out1{estDisLVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_desSpeed_m_s
				{
				 type:    uint(8)*
				 alias:   "Out1{desSpeed_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_3_3_desTrq_N_m
				{
				 type:    uint(16)*
				 alias:   "Out1{desTrq_N_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_msgID
				{
				 type:    uint(8)*
				 alias:   "Out1{msgID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_msgCnt
				{
				 type:    uint(8)*
				 alias:   "Out1{msgCnt}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_3_3_id
				{
				 type:    uint(32)*
				 alias:   "Out1{id}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_3_3_secMark_ms
				{
				 type:    uint(16)*
				 alias:   "Out1{secMark_ms}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_lat_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{lat_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_lon_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{lon_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_elev_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{elev_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_semi_major_accuracy_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{semi_major_accuracy_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_semi_minor_accuracy_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{semi_minor_accuracy_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_semi_major_accuracy_orientation_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{semi_major_accuracy_orientation_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_speed_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{speed_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_transmission_enum
				{
				 type:    uint(8)*
				 alias:   "Out1{transmission_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_heading_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{heading_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_angle_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{angle_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_vertical_acceleration_g
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{vertical_acceleration_g}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_lat_acceleration_m_s_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{lat_acceleration_m_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_long_acceleration_m_s_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{long_acceleration_m_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_3_yaw_rate_deg_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1{yaw_rate_deg_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_wheelBrakes_bitmask
				{
				 type:    uint(8)*
				 alias:   "Out1{wheelBrakes_bitmask}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_3_3_wheelBrakesUnavailable
				{
				 type:    uint(8)*
				 alias:   "Out1{wheelBrakesUnavailable}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_tractionControlState_enum
				{
				 type:    uint(8)*
				 alias:   "Out1{tractionControlState_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_anti_lock_brake_status_enum
				{
				 type:    uint(8)*
				 alias:   "Out1{anti_lock_brake_status_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_stability_control_status_enum
				{
				 type:    uint(8)*
				 alias:   "Out1{stability_control_status_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_brake_boost_enum
				{
				 type:    uint(8)*
				 alias:   "Out1{brake_boost_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_auxiliary_brakes_status_enum
				{
				 type:    uint(8)*
				 alias:   "Out1{auxiliary_brakes_status_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_3_3_vehicle_height_cm
				{
				 type:    uint(32)*
				 alias:   "Out1{vehicle_height_cm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_3_3_vehicle_width_cm
				{
				 type:    uint(32)*
				 alias:   "Out1{vehicle_width_cm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_userDE1
				{
				 type:    uint(8)*
				 alias:   "Out1{userDE1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_userDE2
				{
				 type:    uint(8)*
				 alias:   "Out1{userDE2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_userDE3
				{
				 type:    uint(8)*
				 alias:   "Out1{userDE3}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_userDE4
				{
				 type:    uint(8)*
				 alias:   "Out1{userDE4}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_3_userDE5
				{
				 type:    uint(8)*
				 alias:   "Out1{userDE5}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Increment Sequence Number"

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[108]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

			group "Constant2" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[2]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant2"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[7561]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Math\nFunction" -- block-group
			{
			 block: "Math"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[548]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Math\nFunction"

			group "Memory" -- block-group
			{
			 block: "Memory"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[546]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[1]
				{
				 type:    flt(64,IEEE)*
				 alias:   "X0"
				 flags:   PARAM
				}


			endgroup -- block-group "Memory"

			group "S-Function" -- block-group
			{
			 block: "S-Function"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[7562]
				{
				 type:    SpeedHarm_ArrayDT3_1472*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_14[837]
				{
				 type:    uint(32)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "S-Function"

			group "Sum" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[547]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Sum"

  
  
			group "Broadcast BSM Task" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


			endgroup -- subsystem-group "Broadcast BSM Task"
  
  
			group "Transmit BSM" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[0]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Data Type Conversion" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_int32_T_13[26]
					{
					 type:    int(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion"

				group "Data Type Conversion1" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[549]
					{
					 type:    SpeedHarm_ArrayDT0_1472*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion1"

				group "DSEncode32" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[838]
					{
					 type:    SpeedHarm_ArrayDT7_368*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					p_SpeedHarm_P_real_T_5[5]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P1"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[8]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P2"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[11]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P3"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[14]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P4"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[17]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P5"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[20]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P6"
					 flags:   PARAM
					}


				endgroup -- block-group "DSEncode32"

  
  
				group "BSM to Linux PC" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint16_T_18[18]
					{
					 type:    uint(16)*
					 alias:   "Status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "dsethernetudp_tx" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint16_T_18[18]
						{
						 type:    uint(16)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						p_SpeedHarm_P_real_T_5[23]
						{
						 type:    SpeedHarm_ArrayDT0_27*
						 alias:   "P1"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[52]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P2"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[55]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P3"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[58]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P4"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[61]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P5"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[64]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P6"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[67]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P7"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[70]
						{
						 type:    SpeedHarm_ArrayDT0_18*
						 alias:   "P8"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[90]
						{
						 type:    SpeedHarm_ArrayDT0_18*
						 alias:   "P9"
						 flags:   PARAM
						}


					endgroup -- block-group "dsethernetudp_tx"



				endgroup -- subsystem-group "BSM to Linux PC"


			endgroup -- subsystem-group "Transmit BSM"


		endgroup -- subsystem-group "Broadcast BSM"
  
  
		group "Convert TORC Data" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint8_T_19[45]
			{
			 type:    uint(8)*
			 alias:   "Converted TORC Data{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[41]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[40]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[39]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[38]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[37]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray6}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[36]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray7}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[35]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray8}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[23]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray9}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[25]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray10}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[34]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray11}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[33]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray12}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[32]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[31]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray14}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[30]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_17[3]
			{
			 type:    int(16)*
			 alias:   "Converted TORC Data{SubArray16}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_17[2]
			{
			 type:    int(16)*
			 alias:   "Converted TORC Data{SubArray17}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_17[1]
			{
			 type:    int(16)*
			 alias:   "Converted TORC Data{SubArray18}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output Converted TORC Data{SubArray19}
			-- Skipping output Converted TORC Data{SubArray20}
			p_SpeedHarm_B_uint32_T_14[529]
			{
			 type:    uint(32)*
			 alias:   "Converted TORC Data{SubArray21}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[5]
			{
			 type:    uint(16)*
			 alias:   "Converted TORC Data{SubArray22}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[28]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray23}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[27]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray24}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[26]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray25}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[25]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray26}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[25]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray27}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output Converted TORC Data{SubArray28}
			p_SpeedHarm_B_real32_T_12[24]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray29}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output Converted TORC Data{SubArray30}
			p_SpeedHarm_B_real32_T_12[23]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray31}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[22]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray32}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[18]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray33}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[16]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray34}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[15]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Converted TORC Data{SubArray35}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output Converted TORC Data{SubArray36}
			p_SpeedHarm_B_uint8_T_19[29]
			{
			 type:    uint(8)*
			 alias:   "Converted TORC Data{SubArray37}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output Converted TORC Data{SubArray38}
			-- Skipping output Converted TORC Data{SubArray39}
			-- Skipping output Converted TORC Data{SubArray40}
			-- Skipping output Converted TORC Data{SubArray41}
			-- Skipping output Converted TORC Data{SubArray42}
			-- Skipping output Converted TORC Data{SubArray43}
			-- Skipping output Converted TORC Data{SubArray44}
			-- Skipping output Converted TORC Data{SubArray45}

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint32_T_14[529]
				{
				 type:    uint(32)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

  
  
			group "Data Conversion" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[45]
				{
				 type:    uint(8)*
				 alias:   "BSM Data{SubArray1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[41]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[40]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray3}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[39]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray4}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[38]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray5}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[37]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray6}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[36]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray7}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[35]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray8}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[23]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray9}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[25]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray10}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[34]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray11}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[33]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray12}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[32]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray13}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[31]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray14}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[30]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray15}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_17[3]
				{
				 type:    int(16)*
				 alias:   "BSM Data{SubArray16}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_17[2]
				{
				 type:    int(16)*
				 alias:   "BSM Data{SubArray17}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_17[1]
				{
				 type:    int(16)*
				 alias:   "BSM Data{SubArray18}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				-- Skipping output BSM Data{SubArray19}
				-- Skipping output BSM Data{SubArray20}
				p_SpeedHarm_B_uint32_T_14[529]
				{
				 type:    uint(32)*
				 alias:   "BSM Data{SubArray21}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[5]
				{
				 type:    uint(16)*
				 alias:   "BSM Data{SubArray22}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[28]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray23}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[27]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray24}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[26]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray25}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[25]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray26}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[25]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray27}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				-- Skipping output BSM Data{SubArray28}
				p_SpeedHarm_B_real32_T_12[24]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray29}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				-- Skipping output BSM Data{SubArray30}
				p_SpeedHarm_B_real32_T_12[23]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray31}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[22]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray32}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[18]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray33}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[16]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray34}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[15]
				{
				 type:    flt(32,IEEE)*
				 alias:   "BSM Data{SubArray35}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				-- Skipping output BSM Data{SubArray36}
				p_SpeedHarm_B_uint8_T_19[29]
				{
				 type:    uint(8)*
				 alias:   "BSM Data{SubArray37}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				-- Skipping output BSM Data{SubArray38}
				-- Skipping output BSM Data{SubArray39}
				-- Skipping output BSM Data{SubArray40}
				-- Skipping output BSM Data{SubArray41}
				-- Skipping output BSM Data{SubArray42}
				-- Skipping output BSM Data{SubArray43}
				-- Skipping output BSM Data{SubArray44}
				-- Skipping output BSM Data{SubArray45}

				group "Acc Orientation" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_real32_T_6[8]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Acc Orientation"

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint8_T_13[8]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Constant1" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint8_T_13[7]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant1"

				group "No Value" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint8_T_13[5]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "No Value"

				group "Transmission State" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint8_T_13[6]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Transmission State"

				group "Vehicle Length" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint32_T_8[203]
					{
					 type:    uint(32)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Vehicle Length"

				group "Vehicle Width" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint32_T_8[202]
					{
					 type:    uint(32)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Vehicle Width"

				group "Wheel Brakes\n Unavailable" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[19]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Wheel Brakes\n Unavailable"

				group "Yaw Rate" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_real32_T_6[4]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Yaw Rate"

				group "Data Type Conversion" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[39]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion"

				group "Data Type Conversion1" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[38]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion1"

				group "Data Type Conversion2" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[37]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion2"

				group "Data Type Conversion3" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[28]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion3"

				group "Data Type Conversion4" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[27]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion4"

				group "Data Type Conversion5" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[26]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion5"

  
  
				group "Convert Brake Lights" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint8_T_19[29]
					{
					 type:    uint(8)*
					 alias:   "Wheel Brakes Bitmask"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Shift\nArithmetic" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[24]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[6]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic"

					group "Shift\nArithmetic1" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[26]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[7]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic1"

					group "Shift\nArithmetic2" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[28]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[8]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic2"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[23]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Bitwise\nOperator" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[25]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator"

					group "Bitwise\nOperator1" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[27]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator1"

					group "Bitwise\nOperator2" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[29]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator2"



				endgroup -- subsystem-group "Convert Brake Lights"
  
  
				group "Convert Down Acc" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_int16_T_17[1]
					{
					 type:    int(16)*
					 alias:   "Down Acc mm/s/s"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real32_T_6[9]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_int16_T_17[1]
						{
						 type:    int(16)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Product" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real32_T_12[29]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Product"



				endgroup -- subsystem-group "Convert Down Acc"
  
  
				group "Convert Down Acceleration" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real32_T_12[18]
					{
					 type:    flt(32,IEEE)*
					 alias:   "g"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real32_T_6[5]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Divide" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real32_T_12[18]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Divide"



				endgroup -- subsystem-group "Convert Down Acceleration"
  
  
				group "Convert Steering Wheel Angle" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real32_T_12[22]
					{
					 type:    flt(32,IEEE)*
					 alias:   "angle_deg"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real32_T_6[6]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Constant1" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real32_T_6[7]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant1"

					group "MinMax" -- block-group
					{
					 block: "MinMax"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real32_T_12[21]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "MinMax"

					group "MinMax1" -- block-group
					{
					 block: "MinMax"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real32_T_12[22]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "MinMax1"

					group "Unary Minus" -- block-group
					{
					 block: "UnaryMinus"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real32_T_12[20]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Unary Minus"



				endgroup -- subsystem-group "Convert Steering Wheel Angle"
  
  
				group "Convert caccFlags" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint8_T_19[45]
					{
					 type:    uint(8)*
					 alias:   "caccFlags"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Shift\nArithmetic" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[33]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[10]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic"

					group "Shift\nArithmetic1" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[34]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[11]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic1"

					group "Shift\nArithmetic2" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[32]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[9]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic2"

					group "Shift\nArithmetic3" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[41]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[12]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic3"

					group "Shift\nArithmetic4" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[44]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_int16_T_11[13]
						{
						 type:    int(16)*
						 alias:   "Power2Exponent"
						 flags:   PARAM
						}


					endgroup -- block-group "Shift\nArithmetic4"

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_uint8_T_13[10]
						{
						 type:    uint(8)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[40]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Data Type Conversion1" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[35]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion1"

					group "Data Type Conversion2" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[30]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion2"

					group "Data Type Conversion3" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[43]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion3"

					group "Bitwise\nOperator" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[36]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator"

					group "Bitwise\nOperator1" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[37]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator1"

					group "Bitwise\nOperator2" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[38]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator2"

					group "Bitwise\nOperator3" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[31]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						p_SpeedHarm_P_uint8_T_13[9]
						{
						 type:    uint(8)*
						 alias:   "BitMask"
						 flags:   PARAM
						}


					endgroup -- block-group "Bitwise\nOperator3"

					group "Bitwise\nOperator4" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[39]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator4"

					group "Bitwise\nOperator5" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[42]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator5"

					group "Bitwise\nOperator6" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[45]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Bitwise\nOperator6"



				endgroup -- subsystem-group "Convert caccFlags"
  
  
				group "Convert fwrdAcc" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_int16_T_17[3]
					{
					 type:    int(16)*
					 alias:   "fwrdAcc_mm_s_s"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[1027]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_int16_T_17[3]
						{
						 type:    int(16)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Product" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[78]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Product"



				endgroup -- subsystem-group "Convert fwrdAcc"
  
  
				group "Convert rightAcc" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_int16_T_17[2]
					{
					 type:    int(16)*
					 alias:   "rightAcc_mm_s_s"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[1026]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_int16_T_17[2]
						{
						 type:    int(16)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Product" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[77]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Product"



				endgroup -- subsystem-group "Convert rightAcc"
  
  
				group "Convert utcTime" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint16_T_18[5]
					{
					 type:    uint(16)*
					 alias:   "secMark"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[1025]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Constant1" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[1024]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant1"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint16_T_18[5]
						{
						 type:    uint(16)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Math\nFunction" -- block-group
					{
					 block: "Math"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[76]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Math\nFunction"

					group "Product" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[75]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Product"



				endgroup -- subsystem-group "Convert utcTime"


			endgroup -- subsystem-group "Data Conversion"


		endgroup -- subsystem-group "Convert TORC Data"
  
  
		group "Get BSM Data" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
			{
			 type:    uint(8)*
			 alias:   "BSM Data{caccFlags_bitmask}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{setSpeed_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_throtPos_percent
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{throtPos_percent}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_lclPN_mm
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{lclPN_mm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_lclPE_mm
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{lclPE_mm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_lclPD_mm
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{lclPD_mm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_roll_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{roll_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_pitch_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{pitch_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_yaw_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{yaw_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{hPosAcry_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{vPosAcry_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{frwdVel_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{rightVel_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_downVel_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{downVel_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{velAcc_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
			{
			 type:    int(16)*
			 alias:   "BSM Data{frwdAcc_mm_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
			{
			 type:    int(16)*
			 alias:   "BSM Data{rightAcc_mm_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
			{
			 type:    int(16)*
			 alias:   "BSM Data{dwnAcc_mm_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_grpID
			{
			 type:    uint(8)*
			 alias:   "BSM Data{grpID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_grpSize
			{
			 type:    uint(8)*
			 alias:   "BSM Data{grpSize}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_grpMode
			{
			 type:    uint(8)*
			 alias:   "BSM Data{grpMode}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_grpManDes
			{
			 type:    uint(8)*
			 alias:   "BSM Data{grpManDes}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_grpManID
			{
			 type:    uint(8)*
			 alias:   "BSM Data{grpManID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_vehID
			{
			 type:    uint(8)*
			 alias:   "BSM Data{vehID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_frntCutIn
			{
			 type:    uint(8)*
			 alias:   "BSM Data{frntCutIn}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
			{
			 type:    uint(8)*
			 alias:   "BSM Data{vehGrpPos}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_vehFltMode
			{
			 type:    uint(8)*
			 alias:   "BSM Data{vehFltMode}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_vehManDes
			{
			 type:    uint(8)*
			 alias:   "BSM Data{vehManDes}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_vehManID
			{
			 type:    uint(8)*
			 alias:   "BSM Data{vehManID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
			{
			 type:    uint(8)*
			 alias:   "BSM Data{distToPVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{relSpdPVeh_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
			{
			 type:    uint(8)*
			 alias:   "BSM Data{distToLVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{relSpdLVeh_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{desTGapPVeh_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{desTGapLVeh_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
			{
			 type:    uint(8)*
			 alias:   "BSM Data{estDisPVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
			{
			 type:    uint(8)*
			 alias:   "BSM Data{estDisLVeh_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
			{
			 type:    uint(8)*
			 alias:   "BSM Data{desSpeed_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
			{
			 type:    uint(16)*
			 alias:   "BSM Data{desTrq_N_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_msgID
			{
			 type:    uint(8)*
			 alias:   "BSM Data{msgID}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_msgCnt
			{
			 type:    uint(8)*
			 alias:   "BSM Data{msgCnt}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_3_0_id
			{
			 type:    uint(32)*
			 alias:   "BSM Data{id}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_3_0_secMark_ms
			{
			 type:    uint(16)*
			 alias:   "BSM Data{secMark_ms}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_lat_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{lat_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_lon_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{lon_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_elev_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{elev_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{semi_major_accuracy_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{semi_minor_accuracy_m}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{semi_major_accuracy_orientation_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_speed_m_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{speed_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_transmission_enum
			{
			 type:    uint(8)*
			 alias:   "BSM Data{transmission_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_heading_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{heading_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_angle_deg
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{angle_deg}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{vertical_acceleration_g}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{lat_acceleration_m_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{long_acceleration_m_s_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
			{
			 type:    flt(32,IEEE)*
			 alias:   "BSM Data{yaw_rate_deg_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
			{
			 type:    uint(8)*
			 alias:   "BSM Data{wheelBrakes_bitmask}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
			{
			 type:    uint(8)*
			 alias:   "BSM Data{wheelBrakesUnavailable}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
			{
			 type:    uint(8)*
			 alias:   "BSM Data{tractionControlState_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
			{
			 type:    uint(8)*
			 alias:   "BSM Data{anti_lock_brake_status_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
			{
			 type:    uint(8)*
			 alias:   "BSM Data{stability_control_status_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
			{
			 type:    uint(8)*
			 alias:   "BSM Data{brake_boost_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
			{
			 type:    uint(8)*
			 alias:   "BSM Data{auxiliary_brakes_status_enum}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
			{
			 type:    uint(32)*
			 alias:   "BSM Data{vehicle_height_cm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
			{
			 type:    uint(32)*
			 alias:   "BSM Data{vehicle_width_cm}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_userDE1
			{
			 type:    uint(8)*
			 alias:   "BSM Data{userDE1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_userDE2
			{
			 type:    uint(8)*
			 alias:   "BSM Data{userDE2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_userDE3
			{
			 type:    uint(8)*
			 alias:   "BSM Data{userDE3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_userDE4
			{
			 type:    uint(8)*
			 alias:   "BSM Data{userDE4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_3_0_userDE5
			{
			 type:    uint(8)*
			 alias:   "BSM Data{userDE5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

  
  
			group "BSM Data Read" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{caccFlags_bitmask}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{setSpeed_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_throtPos_percent
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{throtPos_percent}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_lclPN_mm
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{lclPN_mm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_lclPE_mm
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{lclPE_mm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_lclPD_mm
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{lclPD_mm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_roll_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{roll_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_pitch_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{pitch_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_yaw_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{yaw_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{hPosAcry_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{vPosAcry_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{frwdVel_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{rightVel_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_downVel_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{downVel_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{velAcc_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
				{
				 type:    int(16)*
				 alias:   "Cur Veh BSM Data{frwdAcc_mm_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
				{
				 type:    int(16)*
				 alias:   "Cur Veh BSM Data{rightAcc_mm_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
				{
				 type:    int(16)*
				 alias:   "Cur Veh BSM Data{dwnAcc_mm_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_grpID
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{grpID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_grpSize
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{grpSize}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_grpMode
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{grpMode}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_grpManDes
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{grpManDes}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_grpManID
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{grpManID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_vehID
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{vehID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_frntCutIn
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{frntCutIn}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{vehGrpPos}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_vehFltMode
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{vehFltMode}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_vehManDes
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{vehManDes}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_vehManID
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{vehManID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{distToPVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{relSpdPVeh_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{distToLVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{relSpdLVeh_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{desTGapPVeh_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{desTGapLVeh_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{estDisPVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{estDisLVeh_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{desSpeed_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
				{
				 type:    uint(16)*
				 alias:   "Cur Veh BSM Data{desTrq_N_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_msgID
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{msgID}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_msgCnt
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{msgCnt}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_3_0_id
				{
				 type:    uint(32)*
				 alias:   "Cur Veh BSM Data{id}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_3_0_secMark_ms
				{
				 type:    uint(16)*
				 alias:   "Cur Veh BSM Data{secMark_ms}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_lat_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{lat_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_lon_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{lon_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_elev_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{elev_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{semi_major_accuracy_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{semi_minor_accuracy_m}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{semi_major_accuracy_orientation_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_speed_m_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{speed_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_transmission_enum
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{transmission_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_heading_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{heading_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_angle_deg
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{angle_deg}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{vertical_acceleration_g}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{lat_acceleration_m_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{long_acceleration_m_s_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
				{
				 type:    flt(32,IEEE)*
				 alias:   "Cur Veh BSM Data{yaw_rate_deg_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{wheelBrakes_bitmask}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{wheelBrakesUnavailable}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{tractionControlState_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{anti_lock_brake_status_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{stability_control_status_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{brake_boost_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{auxiliary_brakes_status_enum}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
				{
				 type:    uint(32)*
				 alias:   "Cur Veh BSM Data{vehicle_height_cm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
				{
				 type:    uint(32)*
				 alias:   "Cur Veh BSM Data{vehicle_width_cm}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_userDE1
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{userDE1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_userDE2
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{userDE2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_userDE3
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{userDE3}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_userDE4
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{userDE4}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_3_0_userDE5
				{
				 type:    uint(8)*
				 alias:   "Cur Veh BSM Data{userDE5}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

  
  
				group "Get BSM Data" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
					{
					 type:    uint(8)*
					 alias:   "BSM Data{caccFlags_bitmask}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{setSpeed_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_throtPos_percent
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{throtPos_percent}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_lclPN_mm
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{lclPN_mm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_lclPE_mm
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{lclPE_mm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_lclPD_mm
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{lclPD_mm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_roll_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{roll_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_pitch_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{pitch_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_yaw_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{yaw_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{hPosAcry_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{vPosAcry_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{frwdVel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{rightVel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_downVel_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{downVel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{velAcc_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
					{
					 type:    int(16)*
					 alias:   "BSM Data{frwdAcc_mm_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
					{
					 type:    int(16)*
					 alias:   "BSM Data{rightAcc_mm_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
					{
					 type:    int(16)*
					 alias:   "BSM Data{dwnAcc_mm_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_grpID
					{
					 type:    uint(8)*
					 alias:   "BSM Data{grpID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_grpSize
					{
					 type:    uint(8)*
					 alias:   "BSM Data{grpSize}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_grpMode
					{
					 type:    uint(8)*
					 alias:   "BSM Data{grpMode}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_grpManDes
					{
					 type:    uint(8)*
					 alias:   "BSM Data{grpManDes}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_grpManID
					{
					 type:    uint(8)*
					 alias:   "BSM Data{grpManID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_vehID
					{
					 type:    uint(8)*
					 alias:   "BSM Data{vehID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_frntCutIn
					{
					 type:    uint(8)*
					 alias:   "BSM Data{frntCutIn}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
					{
					 type:    uint(8)*
					 alias:   "BSM Data{vehGrpPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_vehFltMode
					{
					 type:    uint(8)*
					 alias:   "BSM Data{vehFltMode}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_vehManDes
					{
					 type:    uint(8)*
					 alias:   "BSM Data{vehManDes}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_vehManID
					{
					 type:    uint(8)*
					 alias:   "BSM Data{vehManID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
					{
					 type:    uint(8)*
					 alias:   "BSM Data{distToPVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{relSpdPVeh_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
					{
					 type:    uint(8)*
					 alias:   "BSM Data{distToLVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{relSpdLVeh_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{desTGapPVeh_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{desTGapLVeh_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
					{
					 type:    uint(8)*
					 alias:   "BSM Data{estDisPVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
					{
					 type:    uint(8)*
					 alias:   "BSM Data{estDisLVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
					{
					 type:    uint(8)*
					 alias:   "BSM Data{desSpeed_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
					{
					 type:    uint(16)*
					 alias:   "BSM Data{desTrq_N_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_msgID
					{
					 type:    uint(8)*
					 alias:   "BSM Data{msgID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_msgCnt
					{
					 type:    uint(8)*
					 alias:   "BSM Data{msgCnt}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint32_T_3_0_id
					{
					 type:    uint(32)*
					 alias:   "BSM Data{id}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint16_T_3_0_secMark_ms
					{
					 type:    uint(16)*
					 alias:   "BSM Data{secMark_ms}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_lat_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{lat_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_lon_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{lon_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_elev_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{elev_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{semi_major_accuracy_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{semi_minor_accuracy_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{semi_major_accuracy_orientation_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_speed_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{speed_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_transmission_enum
					{
					 type:    uint(8)*
					 alias:   "BSM Data{transmission_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_heading_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{heading_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_angle_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{angle_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{vertical_acceleration_g}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{lat_acceleration_m_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{long_acceleration_m_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "BSM Data{yaw_rate_deg_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
					{
					 type:    uint(8)*
					 alias:   "BSM Data{wheelBrakes_bitmask}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
					{
					 type:    uint(8)*
					 alias:   "BSM Data{wheelBrakesUnavailable}"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
					{
					 type:    uint(8)*
					 alias:   "BSM Data{tractionControlState_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
					{
					 type:    uint(8)*
					 alias:   "BSM Data{anti_lock_brake_status_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
					{
					 type:    uint(8)*
					 alias:   "BSM Data{stability_control_status_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
					{
					 type:    uint(8)*
					 alias:   "BSM Data{brake_boost_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
					{
					 type:    uint(8)*
					 alias:   "BSM Data{auxiliary_brakes_status_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
					{
					 type:    uint(32)*
					 alias:   "BSM Data{vehicle_height_cm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
					{
					 type:    uint(32)*
					 alias:   "BSM Data{vehicle_width_cm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_userDE1
					{
					 type:    uint(8)*
					 alias:   "BSM Data{userDE1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_userDE2
					{
					 type:    uint(8)*
					 alias:   "BSM Data{userDE2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_userDE3
					{
					 type:    uint(8)*
					 alias:   "BSM Data{userDE3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_userDE4
					{
					 type:    uint(8)*
					 alias:   "BSM Data{userDE4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_0_userDE5
					{
					 type:    uint(8)*
					 alias:   "BSM Data{userDE5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Switch Case" -- block-group
					{
					 block: "SwitchCase"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						-- Skipping output Out2
						-- Skipping output Out3
						-- Skipping output Out4
						-- Skipping output Out5


					endgroup -- block-group "Switch Case"

					group "Merge" -- block-group
					{
					 block: "Merge"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "Out1{caccFlags_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{setSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{throtPos_percent}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{lclPN_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{lclPE_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{lclPD_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{roll_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{pitch_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{yaw_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{hPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{vPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{frwdVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{rightVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{downVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{velAcc_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Out1{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Out1{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Out1{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpID
						{
						 type:    uint(8)*
						 alias:   "Out1{grpID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpSize
						{
						 type:    uint(8)*
						 alias:   "Out1{grpSize}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpMode
						{
						 type:    uint(8)*
						 alias:   "Out1{grpMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManDes
						{
						 type:    uint(8)*
						 alias:   "Out1{grpManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManID
						{
						 type:    uint(8)*
						 alias:   "Out1{grpManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehID
						{
						 type:    uint(8)*
						 alias:   "Out1{vehID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "Out1{frntCutIn}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "Out1{vehGrpPos}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "Out1{vehFltMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManDes
						{
						 type:    uint(8)*
						 alias:   "Out1{vehManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManID
						{
						 type:    uint(8)*
						 alias:   "Out1{vehManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Out1{distToPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Out1{distToLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{desTGapPVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{desTGapLVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Out1{estDisPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Out1{estDisLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "Out1{desSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "Out1{desTrq_N_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgID
						{
						 type:    uint(8)*
						 alias:   "Out1{msgID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgCnt
						{
						 type:    uint(8)*
						 alias:   "Out1{msgCnt}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_id
						{
						 type:    uint(32)*
						 alias:   "Out1{id}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "Out1{secMark_ms}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{lat_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{lon_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{elev_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{speed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "Out1{transmission_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{heading_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{angle_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{vertical_acceleration_g}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Out1{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "Out1{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "Out1{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "Out1{tractionControlState_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "Out1{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "Out1{stability_control_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "Out1{brake_boost_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "Out1{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "Out1{vehicle_height_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "Out1{vehicle_width_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE1
						{
						 type:    uint(8)*
						 alias:   "Out1{userDE1}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE2
						{
						 type:    uint(8)*
						 alias:   "Out1{userDE2}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE3
						{
						 type:    uint(8)*
						 alias:   "Out1{userDE3}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE4
						{
						 type:    uint(8)*
						 alias:   "Out1{userDE4}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE5
						{
						 type:    uint(8)*
						 alias:   "Out1{userDE5}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Merge"

  
  
					group "Veh 1 BSM Data" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{caccFlags_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{setSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{throtPos_percent}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{lclPN_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{lclPE_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{lclPD_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{roll_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{pitch_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{yaw_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{hPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{vPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{frwdVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{rightVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{downVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{velAcc_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh1 BSM Data{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh1 BSM Data{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh1 BSM Data{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpID
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{grpID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpSize
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{grpSize}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpMode
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{grpMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManDes
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{grpManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManID
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{grpManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehID
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{vehID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{frntCutIn}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{vehGrpPos}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{vehFltMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManDes
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{vehManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManID
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{vehManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{distToPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{distToLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{desTGapPVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{desTGapLVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{estDisPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{estDisLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{desSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "Veh1 BSM Data{desTrq_N_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgID
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{msgID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgCnt
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{msgCnt}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_id
						{
						 type:    uint(32)*
						 alias:   "Veh1 BSM Data{id}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "Veh1 BSM Data{secMark_ms}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{lat_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{lon_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{elev_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{speed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{transmission_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{heading_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{angle_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{vertical_acceleration_g}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh1 BSM Data{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{tractionControlState_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{stability_control_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{brake_boost_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "Veh1 BSM Data{vehicle_height_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "Veh1 BSM Data{vehicle_width_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE1
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{userDE1}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE2
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{userDE2}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE3
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{userDE3}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE4
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{userDE4}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE5
						{
						 type:    uint(8)*
						 alias:   "Veh1 BSM Data{userDE5}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						group "Data Store\nRead" -- block-group
						{
						 block: "DataStoreRead"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{caccFlags_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{setSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_throtPos_percent
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{throtPos_percent}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPN_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPN_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPE_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPE_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPD_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPD_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_roll_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{roll_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_pitch_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{pitch_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{hPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{frwdVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{rightVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_downVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{downVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{velAcc_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{frwdAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{rightAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{dwnAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpSize
							{
							 type:    uint(8)*
							 alias:   "Out1{grpSize}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpMode
							{
							 type:    uint(8)*
							 alias:   "Out1{grpMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_frntCutIn
							{
							 type:    uint(8)*
							 alias:   "Out1{frntCutIn}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
							{
							 type:    uint(8)*
							 alias:   "Out1{vehGrpPos}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehFltMode
							{
							 type:    uint(8)*
							 alias:   "Out1{vehFltMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdPVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdLVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapPVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapLVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
							{
							 type:    uint(8)*
							 alias:   "Out1{desSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
							{
							 type:    uint(16)*
							 alias:   "Out1{desTrq_N_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgID
							{
							 type:    uint(8)*
							 alias:   "Out1{msgID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgCnt
							{
							 type:    uint(8)*
							 alias:   "Out1{msgCnt}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_id
							{
							 type:    uint(32)*
							 alias:   "Out1{id}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_secMark_ms
							{
							 type:    uint(16)*
							 alias:   "Out1{secMark_ms}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lon_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lon_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_elev_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{elev_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_minor_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_orientation_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_speed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{speed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_transmission_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{transmission_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_heading_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{heading_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_angle_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{angle_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vertical_acceleration_g}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{long_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_rate_deg_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakes_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakesUnavailable}"
							 desc:    ""
							 range:   < 0 ; 1 >
							 bitmask: 0x01
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{tractionControlState_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{anti_lock_brake_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{stability_control_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{brake_boost_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{auxiliary_brakes_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_height_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_width_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE1
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE1}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE2
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE2}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE3
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE3}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE4
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE4}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE5
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE5}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Data Store\nRead"



					endgroup -- subsystem-group "Veh 1 BSM Data"
  
  
					group "Veh 2 BSM Data" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{caccFlags_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{setSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{throtPos_percent}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{lclPN_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{lclPE_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{lclPD_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{roll_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{pitch_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{yaw_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{hPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{vPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{frwdVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{rightVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{downVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{velAcc_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh 2 BSM Data{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh 2 BSM Data{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh 2 BSM Data{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpID
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{grpID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpSize
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{grpSize}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpMode
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{grpMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManDes
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{grpManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManID
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{grpManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehID
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{vehID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{frntCutIn}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{vehGrpPos}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{vehFltMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManDes
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{vehManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManID
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{vehManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{distToPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{distToLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{desTGapPVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{desTGapLVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{estDisPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{estDisLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{desSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "Veh 2 BSM Data{desTrq_N_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgID
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{msgID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgCnt
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{msgCnt}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_id
						{
						 type:    uint(32)*
						 alias:   "Veh 2 BSM Data{id}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "Veh 2 BSM Data{secMark_ms}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{lat_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{lon_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{elev_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{speed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{transmission_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{heading_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{angle_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{vertical_acceleration_g}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 2 BSM Data{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{tractionControlState_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{stability_control_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{brake_boost_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "Veh 2 BSM Data{vehicle_height_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "Veh 2 BSM Data{vehicle_width_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE1
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{userDE1}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE2
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{userDE2}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE3
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{userDE3}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE4
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{userDE4}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE5
						{
						 type:    uint(8)*
						 alias:   "Veh 2 BSM Data{userDE5}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						group "Data Store\nRead" -- block-group
						{
						 block: "DataStoreRead"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{caccFlags_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{setSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_throtPos_percent
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{throtPos_percent}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPN_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPN_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPE_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPE_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPD_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPD_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_roll_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{roll_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_pitch_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{pitch_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{hPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{frwdVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{rightVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_downVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{downVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{velAcc_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{frwdAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{rightAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{dwnAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpSize
							{
							 type:    uint(8)*
							 alias:   "Out1{grpSize}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpMode
							{
							 type:    uint(8)*
							 alias:   "Out1{grpMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_frntCutIn
							{
							 type:    uint(8)*
							 alias:   "Out1{frntCutIn}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
							{
							 type:    uint(8)*
							 alias:   "Out1{vehGrpPos}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehFltMode
							{
							 type:    uint(8)*
							 alias:   "Out1{vehFltMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdPVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdLVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapPVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapLVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
							{
							 type:    uint(8)*
							 alias:   "Out1{desSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
							{
							 type:    uint(16)*
							 alias:   "Out1{desTrq_N_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgID
							{
							 type:    uint(8)*
							 alias:   "Out1{msgID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgCnt
							{
							 type:    uint(8)*
							 alias:   "Out1{msgCnt}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_id
							{
							 type:    uint(32)*
							 alias:   "Out1{id}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_secMark_ms
							{
							 type:    uint(16)*
							 alias:   "Out1{secMark_ms}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lon_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lon_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_elev_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{elev_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_minor_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_orientation_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_speed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{speed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_transmission_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{transmission_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_heading_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{heading_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_angle_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{angle_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vertical_acceleration_g}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{long_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_rate_deg_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakes_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakesUnavailable}"
							 desc:    ""
							 range:   < 0 ; 1 >
							 bitmask: 0x01
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{tractionControlState_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{anti_lock_brake_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{stability_control_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{brake_boost_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{auxiliary_brakes_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_height_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_width_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE1
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE1}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE2
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE2}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE3
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE3}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE4
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE4}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE5
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE5}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Data Store\nRead"



					endgroup -- subsystem-group "Veh 2 BSM Data"
  
  
					group "Veh 3 BSM Data" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{caccFlags_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{setSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{throtPos_percent}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{lclPN_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{lclPE_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{lclPD_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{roll_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{pitch_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{yaw_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{hPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{vPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{frwdVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{rightVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{downVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{velAcc_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh 3 BSM Data{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh 3 BSM Data{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh 3 BSM Data{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpID
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{grpID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpSize
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{grpSize}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpMode
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{grpMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManDes
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{grpManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManID
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{grpManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehID
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{vehID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{frntCutIn}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{vehGrpPos}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{vehFltMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManDes
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{vehManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManID
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{vehManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{distToPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{distToLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{desTGapPVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{desTGapLVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{estDisPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{estDisLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{desSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "Veh 3 BSM Data{desTrq_N_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgID
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{msgID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgCnt
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{msgCnt}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_id
						{
						 type:    uint(32)*
						 alias:   "Veh 3 BSM Data{id}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "Veh 3 BSM Data{secMark_ms}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{lat_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{lon_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{elev_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{speed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{transmission_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{heading_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{angle_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{vertical_acceleration_g}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh 3 BSM Data{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{tractionControlState_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{stability_control_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{brake_boost_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "Veh 3 BSM Data{vehicle_height_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "Veh 3 BSM Data{vehicle_width_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE1
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{userDE1}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE2
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{userDE2}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE3
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{userDE3}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE4
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{userDE4}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE5
						{
						 type:    uint(8)*
						 alias:   "Veh 3 BSM Data{userDE5}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						group "Data Store\nRead" -- block-group
						{
						 block: "DataStoreRead"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{caccFlags_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{setSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_throtPos_percent
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{throtPos_percent}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPN_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPN_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPE_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPE_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPD_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPD_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_roll_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{roll_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_pitch_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{pitch_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{hPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{frwdVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{rightVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_downVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{downVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{velAcc_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{frwdAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{rightAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{dwnAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpSize
							{
							 type:    uint(8)*
							 alias:   "Out1{grpSize}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpMode
							{
							 type:    uint(8)*
							 alias:   "Out1{grpMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_frntCutIn
							{
							 type:    uint(8)*
							 alias:   "Out1{frntCutIn}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
							{
							 type:    uint(8)*
							 alias:   "Out1{vehGrpPos}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehFltMode
							{
							 type:    uint(8)*
							 alias:   "Out1{vehFltMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdPVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdLVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapPVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapLVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
							{
							 type:    uint(8)*
							 alias:   "Out1{desSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
							{
							 type:    uint(16)*
							 alias:   "Out1{desTrq_N_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgID
							{
							 type:    uint(8)*
							 alias:   "Out1{msgID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgCnt
							{
							 type:    uint(8)*
							 alias:   "Out1{msgCnt}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_id
							{
							 type:    uint(32)*
							 alias:   "Out1{id}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_secMark_ms
							{
							 type:    uint(16)*
							 alias:   "Out1{secMark_ms}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lon_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lon_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_elev_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{elev_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_minor_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_orientation_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_speed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{speed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_transmission_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{transmission_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_heading_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{heading_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_angle_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{angle_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vertical_acceleration_g}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{long_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_rate_deg_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakes_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakesUnavailable}"
							 desc:    ""
							 range:   < 0 ; 1 >
							 bitmask: 0x01
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{tractionControlState_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{anti_lock_brake_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{stability_control_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{brake_boost_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{auxiliary_brakes_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_height_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_width_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE1
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE1}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE2
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE2}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE3
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE3}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE4
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE4}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE5
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE5}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Data Store\nRead"



					endgroup -- subsystem-group "Veh 3 BSM Data"
  
  
					group "Veh 4 BSM Data" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{caccFlags_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{setSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{throtPos_percent}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{lclPN_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{lclPE_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{lclPD_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{roll_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{pitch_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{yaw_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{hPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{vPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{frwdVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{rightVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{downVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{velAcc_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh4 BSM Data{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh4 BSM Data{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh4 BSM Data{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpID
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{grpID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpSize
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{grpSize}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpMode
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{grpMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManDes
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{grpManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManID
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{grpManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehID
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{vehID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{frntCutIn}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{vehGrpPos}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{vehFltMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManDes
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{vehManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManID
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{vehManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{distToPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{distToLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{desTGapPVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{desTGapLVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{estDisPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{estDisLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{desSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "Veh4 BSM Data{desTrq_N_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgID
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{msgID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgCnt
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{msgCnt}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_id
						{
						 type:    uint(32)*
						 alias:   "Veh4 BSM Data{id}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "Veh4 BSM Data{secMark_ms}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{lat_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{lon_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{elev_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{speed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{transmission_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{heading_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{angle_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{vertical_acceleration_g}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh4 BSM Data{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{tractionControlState_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{stability_control_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{brake_boost_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "Veh4 BSM Data{vehicle_height_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "Veh4 BSM Data{vehicle_width_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE1
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{userDE1}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE2
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{userDE2}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE3
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{userDE3}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE4
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{userDE4}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE5
						{
						 type:    uint(8)*
						 alias:   "Veh4 BSM Data{userDE5}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						group "Data Store\nRead" -- block-group
						{
						 block: "DataStoreRead"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{caccFlags_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{setSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_throtPos_percent
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{throtPos_percent}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPN_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPN_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPE_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPE_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPD_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPD_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_roll_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{roll_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_pitch_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{pitch_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{hPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{frwdVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{rightVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_downVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{downVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{velAcc_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{frwdAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{rightAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{dwnAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpSize
							{
							 type:    uint(8)*
							 alias:   "Out1{grpSize}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpMode
							{
							 type:    uint(8)*
							 alias:   "Out1{grpMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_frntCutIn
							{
							 type:    uint(8)*
							 alias:   "Out1{frntCutIn}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
							{
							 type:    uint(8)*
							 alias:   "Out1{vehGrpPos}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehFltMode
							{
							 type:    uint(8)*
							 alias:   "Out1{vehFltMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdPVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdLVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapPVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapLVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
							{
							 type:    uint(8)*
							 alias:   "Out1{desSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
							{
							 type:    uint(16)*
							 alias:   "Out1{desTrq_N_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgID
							{
							 type:    uint(8)*
							 alias:   "Out1{msgID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgCnt
							{
							 type:    uint(8)*
							 alias:   "Out1{msgCnt}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_id
							{
							 type:    uint(32)*
							 alias:   "Out1{id}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_secMark_ms
							{
							 type:    uint(16)*
							 alias:   "Out1{secMark_ms}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lon_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lon_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_elev_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{elev_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_minor_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_orientation_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_speed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{speed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_transmission_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{transmission_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_heading_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{heading_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_angle_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{angle_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vertical_acceleration_g}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{long_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_rate_deg_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakes_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakesUnavailable}"
							 desc:    ""
							 range:   < 0 ; 1 >
							 bitmask: 0x01
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{tractionControlState_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{anti_lock_brake_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{stability_control_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{brake_boost_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{auxiliary_brakes_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_height_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_width_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE1
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE1}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE2
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE2}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE3
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE3}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE4
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE4}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE5
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE5}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Data Store\nRead"



					endgroup -- subsystem-group "Veh 4 BSM Data"
  
  
					group "Veh 5 BSM Data" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{caccFlags_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{setSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{throtPos_percent}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{lclPN_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{lclPE_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{lclPD_mm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{roll_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{pitch_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{yaw_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{hPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{vPosAcry_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{frwdVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{rightVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{downVel_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{velAcc_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh5 BSM Data{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh5 BSM Data{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "Veh5 BSM Data{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpID
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{grpID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpSize
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{grpSize}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpMode
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{grpMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManDes
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{grpManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_grpManID
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{grpManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehID
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{vehID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{frntCutIn}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{vehGrpPos}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{vehFltMode}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManDes
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{vehManDes}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_vehManID
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{vehManID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{distToPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{distToLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{desTGapPVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{desTGapLVeh_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{estDisPVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{estDisLVeh_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{desSpeed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "Veh5 BSM Data{desTrq_N_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgID
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{msgID}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_msgCnt
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{msgCnt}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_id
						{
						 type:    uint(32)*
						 alias:   "Veh5 BSM Data{id}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_0_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "Veh5 BSM Data{secMark_ms}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{lat_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{lon_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{elev_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{speed_m_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{transmission_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{heading_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{angle_deg}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{vertical_acceleration_g}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "Veh5 BSM Data{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{tractionControlState_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{stability_control_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{brake_boost_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "Veh5 BSM Data{vehicle_height_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "Veh5 BSM Data{vehicle_width_cm}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE1
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{userDE1}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE2
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{userDE2}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE3
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{userDE3}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE4
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{userDE4}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_0_userDE5
						{
						 type:    uint(8)*
						 alias:   "Veh5 BSM Data{userDE5}"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						group "Data Store\nRead" -- block-group
						{
						 block: "DataStoreRead"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_3_0_caccFlags_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{caccFlags_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_setSpeed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{setSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_throtPos_percent
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{throtPos_percent}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPN_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPN_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPE_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPE_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lclPD_mm
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lclPD_mm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_roll_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{roll_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_pitch_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{pitch_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_hPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{hPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vPosAcry_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vPosAcry_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_frwdVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{frwdVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_rightVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{rightVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_downVel_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{downVel_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_velAcc_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{velAcc_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_frwdAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{frwdAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_rightAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{rightAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_int16_T_3_0_dwnAcc_mm_s_s
							{
							 type:    int(16)*
							 alias:   "Out1{dwnAcc_mm_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpSize
							{
							 type:    uint(8)*
							 alias:   "Out1{grpSize}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpMode
							{
							 type:    uint(8)*
							 alias:   "Out1{grpMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_grpManID
							{
							 type:    uint(8)*
							 alias:   "Out1{grpManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_frntCutIn
							{
							 type:    uint(8)*
							 alias:   "Out1{frntCutIn}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehGrpPos
							{
							 type:    uint(8)*
							 alias:   "Out1{vehGrpPos}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehFltMode
							{
							 type:    uint(8)*
							 alias:   "Out1{vehFltMode}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManDes
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManDes}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_vehManID
							{
							 type:    uint(8)*
							 alias:   "Out1{vehManID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdPVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdPVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_distToLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{distToLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_relSpdLVeh_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{relSpdLVeh_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapPVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapPVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_desTGapLVeh_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{desTGapLVeh_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisPVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisPVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_estDisLVeh_m
							{
							 type:    uint(8)*
							 alias:   "Out1{estDisLVeh_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_desSpeed_m_s
							{
							 type:    uint(8)*
							 alias:   "Out1{desSpeed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_desTrq_N_m
							{
							 type:    uint(16)*
							 alias:   "Out1{desTrq_N_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgID
							{
							 type:    uint(8)*
							 alias:   "Out1{msgID}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_msgCnt
							{
							 type:    uint(8)*
							 alias:   "Out1{msgCnt}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_id
							{
							 type:    uint(32)*
							 alias:   "Out1{id}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint16_T_3_0_secMark_ms
							{
							 type:    uint(16)*
							 alias:   "Out1{secMark_ms}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lon_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lon_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_elev_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{elev_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_minor_accuracy_m
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_minor_accuracy_m}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_semi_major_accuracy_orientation_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{semi_major_accuracy_orientation_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_speed_m_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{speed_m_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_transmission_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{transmission_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_heading_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{heading_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_angle_deg
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{angle_deg}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_vertical_acceleration_g
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{vertical_acceleration_g}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_lat_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{lat_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_long_acceleration_m_s_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{long_acceleration_m_s_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_real32_T_3_0_yaw_rate_deg_s
							{
							 type:    flt(32,IEEE)*
							 alias:   "Out1{yaw_rate_deg_s}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_wheelBrakes_bitmask
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakes_bitmask}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_boolean_T_3_0_wheelBrakesUnavailable
							{
							 type:    uint(8)*
							 alias:   "Out1{wheelBrakesUnavailable}"
							 desc:    ""
							 range:   < 0 ; 1 >
							 bitmask: 0x01
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_tractionControlState_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{tractionControlState_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_anti_lock_brake_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{anti_lock_brake_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_stability_control_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{stability_control_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_brake_boost_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{brake_boost_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_auxiliary_brakes_status_enum
							{
							 type:    uint(8)*
							 alias:   "Out1{auxiliary_brakes_status_enum}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_height_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_height_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint32_T_3_0_vehicle_width_cm
							{
							 type:    uint(32)*
							 alias:   "Out1{vehicle_width_cm}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE1
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE1}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE2
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE2}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE3
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE3}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE4
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE4}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}
							p_SpeedHarm_B_uint8_T_3_0_userDE5
							{
							 type:    uint(8)*
							 alias:   "Out1{userDE5}"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Data Store\nRead"



					endgroup -- subsystem-group "Veh 5 BSM Data"


				endgroup -- subsystem-group "Get BSM Data"


			endgroup -- subsystem-group "BSM Data Read"


		endgroup -- subsystem-group "Get BSM Data"
  
  
		group "Get TORC Data" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[94]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[57]
			{
			 type:    uint(8)*
			 alias:   "TORC Data{SubArray2}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[96]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[59]
			{
			 type:    uint(8)*
			 alias:   "TORC Data{SubArray4}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[95]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[58]
			{
			 type:    uint(8)*
			 alias:   "TORC Data{SubArray6}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[92]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray7}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[40]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray8}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[93]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray9}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[41]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray10}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[90]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray11}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[91]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray12}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[88]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[89]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray14}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[86]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[87]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray16}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[85]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray17}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[36]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray18}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[84]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray19}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[35]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray20}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[64]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray21}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[23]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray22}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[66]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray23}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[25]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray24}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[83]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray25}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[34]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray26}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[82]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray27}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[33]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray28}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[81]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray29}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[32]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray30}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[80]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray31}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[31]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray32}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[79]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray33}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[30]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray34}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[60]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray35}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[15]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray36}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[61]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray37}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[16]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray38}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[62]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray39}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[17]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray40}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[65]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray41}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[24]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray42}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[63]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray43}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[19]
			{
			 type:    flt(32,IEEE)*
			 alias:   "TORC Data{SubArray44}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[59]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray45}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[56]
			{
			 type:    uint(8)*
			 alias:   "TORC Data{SubArray46}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[73]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray47}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[74]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray48}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[71]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray49}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[72]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray50}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[69]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray51}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[70]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray52}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[67]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray53}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[68]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TORC Data{SubArray54}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[55]
			{
			 type:    uint(8)*
			 alias:   "TORC Data{SubArray55}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}

			group "Data Store\nRead" -- block-group
			{
			 block: "DataStoreRead"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_6_0_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_6_0_value
				{
				 type:    uint(8)*
				 alias:   "Out1{value}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_6_1_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_6_1_value
				{
				 type:    uint(8)*
				 alias:   "Out2{value}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_6_2_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out3{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_6_2_value
				{
				 type:    uint(8)*
				 alias:   "Out3{value}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_0_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out4{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_0_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out4{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_1_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out5{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_1_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out5{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_0_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out6{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_0_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out6{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_1_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out7{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_1_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out7{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_2_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out8{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_2_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out8{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_2_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out9{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_2_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out9{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_3_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out10{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_3_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out10{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_4_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out11{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_4_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out11{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_5_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out12{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_5_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out12{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_6_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out13{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_6_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out13{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_7_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out14{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_7_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out14{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_8_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out15{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_8_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out15{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_9_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out16{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_9_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out16{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_10_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out17{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_10_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out17{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_11_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out18{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_11_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out18{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_12_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out19{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_12_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out19{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_13_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out20{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_13_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out20{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_14_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out21{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_14_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out21{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_7_15_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out22{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_7_15_value
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out22{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_6_3_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out23{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_6_3_value
				{
				 type:    uint(8)*
				 alias:   "Out23{value}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_3_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out24{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_3_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out24{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_4_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out25{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_4_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out25{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_5_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out26{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_5_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out26{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_6_rx_timestamp_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out27{rx_timestamp_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_8_6_value
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out27{value}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[55]
				{
				 type:    uint(8)*
				 alias:   "Out28"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Store\nRead"



		endgroup -- subsystem-group "Get TORC Data"
  
  
		group "Write TORC Data" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Switch Case" -- block-group
			{
			 block: "SwitchCase"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				-- Skipping output Out2
				-- Skipping output Out3
				-- Skipping output Out4
				-- Skipping output Out5
				-- Skipping output Out6


			endgroup -- block-group "Switch Case"

  
  
			group "Switch Case Action\nSubsystem5" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}




			endgroup -- subsystem-group "Switch Case Action\nSubsystem5"
  
  
			group "Veh 1 Data Update" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Data Store\nWrite" -- block-group
				{
				 block: "DataStoreWrite"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[45]
					{
					 type:    uint(8)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[41]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[40]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[39]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In4"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[38]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In5"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[37]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In6"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[36]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In7"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[35]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In8"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In9"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In10"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[34]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In11"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[33]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In12"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[32]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In13"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[31]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In14"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[30]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In15"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[3]
					{
					 type:    int(16)*
					 alias:   "In16"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[2]
					{
					 type:    int(16)*
					 alias:   "In17"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[1]
					{
					 type:    int(16)*
					 alias:   "In18"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In19


					-- Skipping inport In20

					p_SpeedHarm_B_uint32_T_14[529]
					{
					 type:    uint(32)*
					 alias:   "In21"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_uint16_T_18[5]
					{
					 type:    uint(16)*
					 alias:   "In22"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[28]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In23"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[27]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In24"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[26]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In25"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In26"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In27"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In28

					p_SpeedHarm_B_real32_T_12[24]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In29"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In30

					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In31"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[22]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In32"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[18]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In33"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[16]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In34"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[15]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In35"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In36

					p_SpeedHarm_B_uint8_T_19[29]
					{
					 type:    uint(8)*
					 alias:   "In37"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In38


					-- Skipping inport In39


					-- Skipping inport In40


					-- Skipping inport In41


					-- Skipping inport In42


					-- Skipping inport In43


					-- Skipping inport In44


					-- Skipping inport In45




				endgroup -- block-group "Data Store\nWrite"



			endgroup -- subsystem-group "Veh 1 Data Update"
  
  
			group "Veh 2 Data Update" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Data Store\nWrite1" -- block-group
				{
				 block: "DataStoreWrite"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[45]
					{
					 type:    uint(8)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[41]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[40]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[39]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In4"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[38]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In5"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[37]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In6"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[36]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In7"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[35]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In8"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In9"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In10"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[34]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In11"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[33]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In12"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[32]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In13"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[31]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In14"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[30]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In15"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[3]
					{
					 type:    int(16)*
					 alias:   "In16"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[2]
					{
					 type:    int(16)*
					 alias:   "In17"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[1]
					{
					 type:    int(16)*
					 alias:   "In18"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In19


					-- Skipping inport In20

					p_SpeedHarm_B_uint32_T_14[529]
					{
					 type:    uint(32)*
					 alias:   "In21"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_uint16_T_18[5]
					{
					 type:    uint(16)*
					 alias:   "In22"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[28]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In23"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[27]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In24"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[26]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In25"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In26"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In27"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In28

					p_SpeedHarm_B_real32_T_12[24]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In29"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In30

					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In31"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[22]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In32"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[18]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In33"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[16]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In34"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[15]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In35"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In36

					p_SpeedHarm_B_uint8_T_19[29]
					{
					 type:    uint(8)*
					 alias:   "In37"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In38


					-- Skipping inport In39


					-- Skipping inport In40


					-- Skipping inport In41


					-- Skipping inport In42


					-- Skipping inport In43


					-- Skipping inport In44


					-- Skipping inport In45




				endgroup -- block-group "Data Store\nWrite1"



			endgroup -- subsystem-group "Veh 2 Data Update"
  
  
			group "Veh 3 Data Update" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Data Store\nWrite1" -- block-group
				{
				 block: "DataStoreWrite"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[45]
					{
					 type:    uint(8)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[41]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[40]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[39]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In4"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[38]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In5"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[37]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In6"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[36]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In7"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[35]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In8"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In9"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In10"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[34]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In11"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[33]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In12"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[32]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In13"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[31]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In14"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[30]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In15"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[3]
					{
					 type:    int(16)*
					 alias:   "In16"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[2]
					{
					 type:    int(16)*
					 alias:   "In17"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[1]
					{
					 type:    int(16)*
					 alias:   "In18"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In19


					-- Skipping inport In20

					p_SpeedHarm_B_uint32_T_14[529]
					{
					 type:    uint(32)*
					 alias:   "In21"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_uint16_T_18[5]
					{
					 type:    uint(16)*
					 alias:   "In22"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[28]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In23"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[27]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In24"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[26]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In25"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In26"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In27"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In28

					p_SpeedHarm_B_real32_T_12[24]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In29"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In30

					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In31"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[22]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In32"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[18]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In33"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[16]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In34"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[15]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In35"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In36

					p_SpeedHarm_B_uint8_T_19[29]
					{
					 type:    uint(8)*
					 alias:   "In37"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In38


					-- Skipping inport In39


					-- Skipping inport In40


					-- Skipping inport In41


					-- Skipping inport In42


					-- Skipping inport In43


					-- Skipping inport In44


					-- Skipping inport In45




				endgroup -- block-group "Data Store\nWrite1"



			endgroup -- subsystem-group "Veh 3 Data Update"
  
  
			group "Veh 4 Data Update" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Data Store\nWrite1" -- block-group
				{
				 block: "DataStoreWrite"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[45]
					{
					 type:    uint(8)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[41]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[40]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[39]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In4"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[38]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In5"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[37]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In6"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[36]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In7"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[35]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In8"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In9"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In10"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[34]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In11"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[33]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In12"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[32]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In13"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[31]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In14"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[30]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In15"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[3]
					{
					 type:    int(16)*
					 alias:   "In16"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[2]
					{
					 type:    int(16)*
					 alias:   "In17"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[1]
					{
					 type:    int(16)*
					 alias:   "In18"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In19


					-- Skipping inport In20

					p_SpeedHarm_B_uint32_T_14[529]
					{
					 type:    uint(32)*
					 alias:   "In21"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_uint16_T_18[5]
					{
					 type:    uint(16)*
					 alias:   "In22"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[28]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In23"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[27]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In24"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[26]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In25"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In26"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In27"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In28

					p_SpeedHarm_B_real32_T_12[24]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In29"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In30

					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In31"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[22]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In32"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[18]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In33"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[16]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In34"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[15]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In35"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In36

					p_SpeedHarm_B_uint8_T_19[29]
					{
					 type:    uint(8)*
					 alias:   "In37"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In38


					-- Skipping inport In39


					-- Skipping inport In40


					-- Skipping inport In41


					-- Skipping inport In42


					-- Skipping inport In43


					-- Skipping inport In44


					-- Skipping inport In45




				endgroup -- block-group "Data Store\nWrite1"



			endgroup -- subsystem-group "Veh 4 Data Update"
  
  
			group "Veh 5 Data Update" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Data Store\nWrite1" -- block-group
				{
				 block: "DataStoreWrite"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[45]
					{
					 type:    uint(8)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[41]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[40]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[39]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In4"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[38]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In5"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[37]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In6"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[36]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In7"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[35]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In8"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In9"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In10"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[34]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In11"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[33]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In12"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[32]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In13"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[31]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In14"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[30]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In15"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[3]
					{
					 type:    int(16)*
					 alias:   "In16"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[2]
					{
					 type:    int(16)*
					 alias:   "In17"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_int16_T_17[1]
					{
					 type:    int(16)*
					 alias:   "In18"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In19


					-- Skipping inport In20

					p_SpeedHarm_B_uint32_T_14[529]
					{
					 type:    uint(32)*
					 alias:   "In21"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_uint16_T_18[5]
					{
					 type:    uint(16)*
					 alias:   "In22"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[28]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In23"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[27]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In24"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[26]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In25"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In26"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[25]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In27"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In28

					p_SpeedHarm_B_real32_T_12[24]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In29"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In30

					p_SpeedHarm_B_real32_T_12[23]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In31"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[22]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In32"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[18]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In33"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[16]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In34"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[15]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In35"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In36

					p_SpeedHarm_B_uint8_T_19[29]
					{
					 type:    uint(8)*
					 alias:   "In37"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In38


					-- Skipping inport In39


					-- Skipping inport In40


					-- Skipping inport In41


					-- Skipping inport In42


					-- Skipping inport In43


					-- Skipping inport In44


					-- Skipping inport In45




				endgroup -- block-group "Data Store\nWrite1"



			endgroup -- subsystem-group "Veh 5 Data Update"


		endgroup -- subsystem-group "Write TORC Data"


	endgroup -- subsystem-group "BSM Broadcast"
  
  
	group "Carma_Platform\n" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


		group "Constant1" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_P_real_T_5[938]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "Constant1"

		group "Memory" -- block-group
		{
		 block: "Memory"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[48]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_P_real_T_5[939]
			{
			 type:    flt(64,IEEE)*
			 alias:   "X0"
			 flags:   PARAM
			}


		endgroup -- block-group "Memory"

		group "Sum" -- block-group
		{
		 block: "Sum"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[49]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Sum"

  
  
		group "DSRC Adapter" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "PSID Filter" -- block-group
			{
			 block: "SwitchCase"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				-- Skipping output Out2


			endgroup -- block-group "PSID Filter"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint32_T_14[828]
				{
				 type:    uint(32)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

  
  
			group "32-bit array to 8-bit array" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[6089]
				{
				 type:    SpeedHarm_ArrayDT3_1_1472_Col*
				 alias:   "Byte Array"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Assignment" -- block-group
				{
				 block: "Assignment"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[6089]
					{
					 type:    SpeedHarm_ArrayDT3_1_1472_Col*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Assignment"

				group "Shift\nArithmetic" -- block-group
				{
				 block: "ArithShift"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[835]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Shift\nArithmetic"

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_real_T_5[109]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Constant1" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_int32_T_7[1]
					{
					 type:    int(32)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant1"

				group "Constant2" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_int32_T_7[0]
					{
					 type:    int(32)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant2"

				group "Constant3" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_int32_T_7[2]
					{
					 type:    int(32)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant3"

				group "Convert" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[832]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Convert"

				group "Data Type Conversion" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[6088]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion"

				group "convert" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[543]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "convert"

				group "For Iterator" -- block-group
				{
				 block: "ForIterator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_int32_T_13[23]
					{
					 type:    int(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "For Iterator"

				group "Math\nFunction" -- block-group
				{
				 block: "Math"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_int32_T_13[25]
					{
					 type:    int(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Math\nFunction"

				group "Divide" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[544]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Divide"

				group "Product" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[834]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Product"

				group "Rounding\nFunction" -- block-group
				{
				 block: "Rounding"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[545]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Rounding\nFunction"

				group "Selector" -- block-group
				{
				 block: "Selector"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[833]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Selector"

				group "Bitwise\nOperator" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[836]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					p_SpeedHarm_P_uint32_T_8[0]
					{
					 type:    uint(32)*
					 alias:   "BitMask"
					 flags:   PARAM
					}


				endgroup -- block-group "Bitwise\nOperator"

				group "Sum" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_int32_T_13[24]
					{
					 type:    int(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sum"

  
  
				group "Initialize array output (zeros)" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint8_T_36[0]
					{
					 type:    SpeedHarm_ArrayDT3_1_1472_Col*
					 alias:   "y"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}



				endgroup -- subsystem-group "Initialize array output (zeros)"


			endgroup -- subsystem-group "32-bit array to 8-bit array"
  
  
			group "BSM Received" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Bus\nSelector" -- block-group
				{
				 block: "BusSelector"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[831]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nSelector"

				group "Vehicle ID Switch" -- block-group
				{
				 block: "SwitchCase"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					-- Skipping output Out2
					-- Skipping output Out3
					-- Skipping output Out4
					-- Skipping output Out5
					-- Skipping output Out6


				endgroup -- block-group "Vehicle ID Switch"

				group "Data Type Conversion" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[830]
					{
					 type:    uint(32)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion"

				group "S-Function" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_3_2_caccFlags_bitmask
					{
					 type:    uint(8)*
					 alias:   "Out1{caccFlags_bitmask}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_setSpeed_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{setSpeed_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_throtPos_percent
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{throtPos_percent}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_lclPN_mm
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{lclPN_mm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_lclPE_mm
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{lclPE_mm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_lclPD_mm
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{lclPD_mm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_roll_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{roll_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_pitch_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{pitch_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_yaw_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{yaw_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_hPosAcry_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{hPosAcry_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_vPosAcry_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{vPosAcry_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_frwdVel_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{frwdVel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_rightVel_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{rightVel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_downVel_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{downVel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_velAcc_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{velAcc_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int16_T_3_2_frwdAcc_mm_s_s
					{
					 type:    int(16)*
					 alias:   "Out1{frwdAcc_mm_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int16_T_3_2_rightAcc_mm_s_s
					{
					 type:    int(16)*
					 alias:   "Out1{rightAcc_mm_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int16_T_3_2_dwnAcc_mm_s_s
					{
					 type:    int(16)*
					 alias:   "Out1{dwnAcc_mm_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_grpID
					{
					 type:    uint(8)*
					 alias:   "Out1{grpID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_grpSize
					{
					 type:    uint(8)*
					 alias:   "Out1{grpSize}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_grpMode
					{
					 type:    uint(8)*
					 alias:   "Out1{grpMode}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_grpManDes
					{
					 type:    uint(8)*
					 alias:   "Out1{grpManDes}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_grpManID
					{
					 type:    uint(8)*
					 alias:   "Out1{grpManID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_vehID
					{
					 type:    uint(8)*
					 alias:   "Out1{vehID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_frntCutIn
					{
					 type:    uint(8)*
					 alias:   "Out1{frntCutIn}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_vehGrpPos
					{
					 type:    uint(8)*
					 alias:   "Out1{vehGrpPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_vehFltMode
					{
					 type:    uint(8)*
					 alias:   "Out1{vehFltMode}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_vehManDes
					{
					 type:    uint(8)*
					 alias:   "Out1{vehManDes}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_vehManID
					{
					 type:    uint(8)*
					 alias:   "Out1{vehManID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_distToPVeh_m
					{
					 type:    uint(8)*
					 alias:   "Out1{distToPVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_relSpdPVeh_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{relSpdPVeh_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_distToLVeh_m
					{
					 type:    uint(8)*
					 alias:   "Out1{distToLVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_relSpdLVeh_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{relSpdLVeh_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_desTGapPVeh_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{desTGapPVeh_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_desTGapLVeh_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{desTGapLVeh_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_estDisPVeh_m
					{
					 type:    uint(8)*
					 alias:   "Out1{estDisPVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_estDisLVeh_m
					{
					 type:    uint(8)*
					 alias:   "Out1{estDisLVeh_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_desSpeed_m_s
					{
					 type:    uint(8)*
					 alias:   "Out1{desSpeed_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint16_T_3_2_desTrq_N_m
					{
					 type:    uint(16)*
					 alias:   "Out1{desTrq_N_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_msgID
					{
					 type:    uint(8)*
					 alias:   "Out1{msgID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_msgCnt
					{
					 type:    uint(8)*
					 alias:   "Out1{msgCnt}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint32_T_3_2_id
					{
					 type:    uint(32)*
					 alias:   "Out1{id}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint16_T_3_2_secMark_ms
					{
					 type:    uint(16)*
					 alias:   "Out1{secMark_ms}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_lat_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{lat_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_lon_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{lon_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_elev_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{elev_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{semi_major_accuracy_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_semi_minor_accuracy_m
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{semi_minor_accuracy_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_orientation_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{semi_major_accuracy_orientation_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_speed_m_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{speed_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_transmission_enum
					{
					 type:    uint(8)*
					 alias:   "Out1{transmission_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_heading_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{heading_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_angle_deg
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{angle_deg}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_vertical_acceleration_g
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{vertical_acceleration_g}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_lat_acceleration_m_s_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{lat_acceleration_m_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_long_acceleration_m_s_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{long_acceleration_m_s_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_3_2_yaw_rate_deg_s
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{yaw_rate_deg_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_wheelBrakes_bitmask
					{
					 type:    uint(8)*
					 alias:   "Out1{wheelBrakes_bitmask}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_boolean_T_3_2_wheelBrakesUnavailable
					{
					 type:    uint(8)*
					 alias:   "Out1{wheelBrakesUnavailable}"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_tractionControlState_enum
					{
					 type:    uint(8)*
					 alias:   "Out1{tractionControlState_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_anti_lock_brake_status_enum
					{
					 type:    uint(8)*
					 alias:   "Out1{anti_lock_brake_status_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_stability_control_status_enum
					{
					 type:    uint(8)*
					 alias:   "Out1{stability_control_status_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_brake_boost_enum
					{
					 type:    uint(8)*
					 alias:   "Out1{brake_boost_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_auxiliary_brakes_status_enum
					{
					 type:    uint(8)*
					 alias:   "Out1{auxiliary_brakes_status_enum}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint32_T_3_2_vehicle_height_cm
					{
					 type:    uint(32)*
					 alias:   "Out1{vehicle_height_cm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint32_T_3_2_vehicle_width_cm
					{
					 type:    uint(32)*
					 alias:   "Out1{vehicle_width_cm}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_userDE1
					{
					 type:    uint(8)*
					 alias:   "Out1{userDE1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_userDE2
					{
					 type:    uint(8)*
					 alias:   "Out1{userDE2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_userDE3
					{
					 type:    uint(8)*
					 alias:   "Out1{userDE3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_userDE4
					{
					 type:    uint(8)*
					 alias:   "Out1{userDE4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_3_2_userDE5
					{
					 type:    uint(8)*
					 alias:   "Out1{userDE5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "S-Function"

  
  
				group "Invalid Vehicle ID Received" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "Invalid Vehicle ID Received"
  
  
				group "Vehicle 1 Memory Write" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


					group "Data Store\nWrite" -- block-group
					{
					 block: "DataStoreWrite"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_3_2_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{caccFlags_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{setSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{throtPos_percent}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPN_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPE_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPD_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{roll_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{pitch_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{hPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{frwdVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{rightVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{downVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{velAcc_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpID
						{
						 type:    uint(8)*
						 alias:   "In1{grpID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpSize
						{
						 type:    uint(8)*
						 alias:   "In1{grpSize}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpMode
						{
						 type:    uint(8)*
						 alias:   "In1{grpMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManDes
						{
						 type:    uint(8)*
						 alias:   "In1{grpManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManID
						{
						 type:    uint(8)*
						 alias:   "In1{grpManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehID
						{
						 type:    uint(8)*
						 alias:   "In1{vehID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "In1{frntCutIn}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "In1{vehGrpPos}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "In1{vehFltMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManDes
						{
						 type:    uint(8)*
						 alias:   "In1{vehManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManID
						{
						 type:    uint(8)*
						 alias:   "In1{vehManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapPVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapLVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "In1{desSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "In1{desTrq_N_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgID
						{
						 type:    uint(8)*
						 alias:   "In1{msgID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgCnt
						{
						 type:    uint(8)*
						 alias:   "In1{msgCnt}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_id
						{
						 type:    uint(32)*
						 alias:   "In1{id}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "In1{secMark_ms}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lon_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{elev_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{speed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "In1{transmission_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{heading_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{angle_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vertical_acceleration_g}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_2_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "In1{tractionControlState_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{stability_control_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "In1{brake_boost_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_height_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_width_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE1
						{
						 type:    uint(8)*
						 alias:   "In1{userDE1}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE2
						{
						 type:    uint(8)*
						 alias:   "In1{userDE2}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE3
						{
						 type:    uint(8)*
						 alias:   "In1{userDE3}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE4
						{
						 type:    uint(8)*
						 alias:   "In1{userDE4}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE5
						{
						 type:    uint(8)*
						 alias:   "In1{userDE5}"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Store\nWrite"



				endgroup -- subsystem-group "Vehicle 1 Memory Write"
  
  
				group "Vehicle 2 Memory Write" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


					group "Data Store\nWrite" -- block-group
					{
					 block: "DataStoreWrite"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_3_2_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{caccFlags_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{setSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{throtPos_percent}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPN_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPE_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPD_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{roll_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{pitch_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{hPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{frwdVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{rightVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{downVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{velAcc_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpID
						{
						 type:    uint(8)*
						 alias:   "In1{grpID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpSize
						{
						 type:    uint(8)*
						 alias:   "In1{grpSize}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpMode
						{
						 type:    uint(8)*
						 alias:   "In1{grpMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManDes
						{
						 type:    uint(8)*
						 alias:   "In1{grpManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManID
						{
						 type:    uint(8)*
						 alias:   "In1{grpManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehID
						{
						 type:    uint(8)*
						 alias:   "In1{vehID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "In1{frntCutIn}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "In1{vehGrpPos}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "In1{vehFltMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManDes
						{
						 type:    uint(8)*
						 alias:   "In1{vehManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManID
						{
						 type:    uint(8)*
						 alias:   "In1{vehManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapPVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapLVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "In1{desSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "In1{desTrq_N_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgID
						{
						 type:    uint(8)*
						 alias:   "In1{msgID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgCnt
						{
						 type:    uint(8)*
						 alias:   "In1{msgCnt}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_id
						{
						 type:    uint(32)*
						 alias:   "In1{id}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "In1{secMark_ms}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lon_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{elev_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{speed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "In1{transmission_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{heading_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{angle_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vertical_acceleration_g}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_2_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "In1{tractionControlState_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{stability_control_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "In1{brake_boost_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_height_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_width_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE1
						{
						 type:    uint(8)*
						 alias:   "In1{userDE1}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE2
						{
						 type:    uint(8)*
						 alias:   "In1{userDE2}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE3
						{
						 type:    uint(8)*
						 alias:   "In1{userDE3}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE4
						{
						 type:    uint(8)*
						 alias:   "In1{userDE4}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE5
						{
						 type:    uint(8)*
						 alias:   "In1{userDE5}"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Store\nWrite"



				endgroup -- subsystem-group "Vehicle 2 Memory Write"
  
  
				group "Vehicle 3 Memory Write" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


					group "Data Store\nWrite" -- block-group
					{
					 block: "DataStoreWrite"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_3_2_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{caccFlags_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{setSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{throtPos_percent}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPN_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPE_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPD_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{roll_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{pitch_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{hPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{frwdVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{rightVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{downVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{velAcc_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpID
						{
						 type:    uint(8)*
						 alias:   "In1{grpID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpSize
						{
						 type:    uint(8)*
						 alias:   "In1{grpSize}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpMode
						{
						 type:    uint(8)*
						 alias:   "In1{grpMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManDes
						{
						 type:    uint(8)*
						 alias:   "In1{grpManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManID
						{
						 type:    uint(8)*
						 alias:   "In1{grpManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehID
						{
						 type:    uint(8)*
						 alias:   "In1{vehID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "In1{frntCutIn}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "In1{vehGrpPos}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "In1{vehFltMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManDes
						{
						 type:    uint(8)*
						 alias:   "In1{vehManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManID
						{
						 type:    uint(8)*
						 alias:   "In1{vehManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapPVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapLVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "In1{desSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "In1{desTrq_N_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgID
						{
						 type:    uint(8)*
						 alias:   "In1{msgID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgCnt
						{
						 type:    uint(8)*
						 alias:   "In1{msgCnt}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_id
						{
						 type:    uint(32)*
						 alias:   "In1{id}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "In1{secMark_ms}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lon_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{elev_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{speed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "In1{transmission_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{heading_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{angle_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vertical_acceleration_g}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_2_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "In1{tractionControlState_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{stability_control_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "In1{brake_boost_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_height_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_width_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE1
						{
						 type:    uint(8)*
						 alias:   "In1{userDE1}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE2
						{
						 type:    uint(8)*
						 alias:   "In1{userDE2}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE3
						{
						 type:    uint(8)*
						 alias:   "In1{userDE3}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE4
						{
						 type:    uint(8)*
						 alias:   "In1{userDE4}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE5
						{
						 type:    uint(8)*
						 alias:   "In1{userDE5}"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Store\nWrite"



				endgroup -- subsystem-group "Vehicle 3 Memory Write"
  
  
				group "Vehicle 4 Memory Write" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


					group "Data Store\nWrite" -- block-group
					{
					 block: "DataStoreWrite"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_3_2_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{caccFlags_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{setSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{throtPos_percent}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPN_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPE_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPD_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{roll_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{pitch_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{hPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{frwdVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{rightVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{downVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{velAcc_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpID
						{
						 type:    uint(8)*
						 alias:   "In1{grpID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpSize
						{
						 type:    uint(8)*
						 alias:   "In1{grpSize}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpMode
						{
						 type:    uint(8)*
						 alias:   "In1{grpMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManDes
						{
						 type:    uint(8)*
						 alias:   "In1{grpManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManID
						{
						 type:    uint(8)*
						 alias:   "In1{grpManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehID
						{
						 type:    uint(8)*
						 alias:   "In1{vehID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "In1{frntCutIn}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "In1{vehGrpPos}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "In1{vehFltMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManDes
						{
						 type:    uint(8)*
						 alias:   "In1{vehManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManID
						{
						 type:    uint(8)*
						 alias:   "In1{vehManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapPVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapLVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "In1{desSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "In1{desTrq_N_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgID
						{
						 type:    uint(8)*
						 alias:   "In1{msgID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgCnt
						{
						 type:    uint(8)*
						 alias:   "In1{msgCnt}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_id
						{
						 type:    uint(32)*
						 alias:   "In1{id}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "In1{secMark_ms}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lon_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{elev_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{speed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "In1{transmission_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{heading_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{angle_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vertical_acceleration_g}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_2_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "In1{tractionControlState_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{stability_control_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "In1{brake_boost_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_height_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_width_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE1
						{
						 type:    uint(8)*
						 alias:   "In1{userDE1}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE2
						{
						 type:    uint(8)*
						 alias:   "In1{userDE2}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE3
						{
						 type:    uint(8)*
						 alias:   "In1{userDE3}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE4
						{
						 type:    uint(8)*
						 alias:   "In1{userDE4}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE5
						{
						 type:    uint(8)*
						 alias:   "In1{userDE5}"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Store\nWrite"



				endgroup -- subsystem-group "Vehicle 4 Memory Write"
  
  
				group "Vehicle 5 Memory Write" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


					group "Data Store\nWrite" -- block-group
					{
					 block: "DataStoreWrite"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_3_2_caccFlags_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{caccFlags_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_setSpeed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{setSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_throtPos_percent
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{throtPos_percent}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPN_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPN_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPE_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPE_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lclPD_mm
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lclPD_mm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_roll_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{roll_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_pitch_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{pitch_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_hPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{hPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vPosAcry_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vPosAcry_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_frwdVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{frwdVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_rightVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{rightVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_downVel_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{downVel_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_velAcc_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{velAcc_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_frwdAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{frwdAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_rightAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{rightAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_int16_T_3_2_dwnAcc_mm_s_s
						{
						 type:    int(16)*
						 alias:   "In1{dwnAcc_mm_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpID
						{
						 type:    uint(8)*
						 alias:   "In1{grpID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpSize
						{
						 type:    uint(8)*
						 alias:   "In1{grpSize}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpMode
						{
						 type:    uint(8)*
						 alias:   "In1{grpMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManDes
						{
						 type:    uint(8)*
						 alias:   "In1{grpManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_grpManID
						{
						 type:    uint(8)*
						 alias:   "In1{grpManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehID
						{
						 type:    uint(8)*
						 alias:   "In1{vehID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_frntCutIn
						{
						 type:    uint(8)*
						 alias:   "In1{frntCutIn}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehGrpPos
						{
						 type:    uint(8)*
						 alias:   "In1{vehGrpPos}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehFltMode
						{
						 type:    uint(8)*
						 alias:   "In1{vehFltMode}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManDes
						{
						 type:    uint(8)*
						 alias:   "In1{vehManDes}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_vehManID
						{
						 type:    uint(8)*
						 alias:   "In1{vehManID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdPVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdPVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_distToLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{distToLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_relSpdLVeh_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{relSpdLVeh_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapPVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapPVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_desTGapLVeh_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{desTGapLVeh_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisPVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisPVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_estDisLVeh_m
						{
						 type:    uint(8)*
						 alias:   "In1{estDisLVeh_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_desSpeed_m_s
						{
						 type:    uint(8)*
						 alias:   "In1{desSpeed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_desTrq_N_m
						{
						 type:    uint(16)*
						 alias:   "In1{desTrq_N_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgID
						{
						 type:    uint(8)*
						 alias:   "In1{msgID}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_msgCnt
						{
						 type:    uint(8)*
						 alias:   "In1{msgCnt}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_id
						{
						 type:    uint(32)*
						 alias:   "In1{id}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint16_T_3_2_secMark_ms
						{
						 type:    uint(16)*
						 alias:   "In1{secMark_ms}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lon_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lon_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_elev_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{elev_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_minor_accuracy_m
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_minor_accuracy_m}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_semi_major_accuracy_orientation_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{semi_major_accuracy_orientation_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_speed_m_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{speed_m_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_transmission_enum
						{
						 type:    uint(8)*
						 alias:   "In1{transmission_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_heading_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{heading_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_angle_deg
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{angle_deg}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_vertical_acceleration_g
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{vertical_acceleration_g}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_lat_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{lat_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_long_acceleration_m_s_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{long_acceleration_m_s_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real32_T_3_2_yaw_rate_deg_s
						{
						 type:    flt(32,IEEE)*
						 alias:   "In1{yaw_rate_deg_s}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_wheelBrakes_bitmask
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakes_bitmask}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_boolean_T_3_2_wheelBrakesUnavailable
						{
						 type:    uint(8)*
						 alias:   "In1{wheelBrakesUnavailable}"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_tractionControlState_enum
						{
						 type:    uint(8)*
						 alias:   "In1{tractionControlState_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_anti_lock_brake_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{anti_lock_brake_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_stability_control_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{stability_control_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_brake_boost_enum
						{
						 type:    uint(8)*
						 alias:   "In1{brake_boost_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_auxiliary_brakes_status_enum
						{
						 type:    uint(8)*
						 alias:   "In1{auxiliary_brakes_status_enum}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_height_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_height_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint32_T_3_2_vehicle_width_cm
						{
						 type:    uint(32)*
						 alias:   "In1{vehicle_width_cm}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE1
						{
						 type:    uint(8)*
						 alias:   "In1{userDE1}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE2
						{
						 type:    uint(8)*
						 alias:   "In1{userDE2}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE3
						{
						 type:    uint(8)*
						 alias:   "In1{userDE3}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE4
						{
						 type:    uint(8)*
						 alias:   "In1{userDE4}"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_uint8_T_3_2_userDE5
						{
						 type:    uint(8)*
						 alias:   "In1{userDE5}"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Store\nWrite"



				endgroup -- subsystem-group "Vehicle 5 Memory Write"

				p_SpeedHarm_B_uint32_T_14[831]
				{
				 type:    uint(32)*
				 alias:   "<id>"
				 origin:  "SpeedHarm/Carma_Platform\n/DSRC Adapter/BSM Received/Bus\nSelector/Out1"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "BSM Received"
  
  
			group "WSMP Parser" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[542]
				{
				 type:    flt(64,IEEE)*
				 alias:   "PSID"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[4616]
				{
				 type:    SpeedHarm_ArrayDT3_1472*
				 alias:   "payload"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_14[829]
				{
				 type:    uint(32)*
				 alias:   "length"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}



			endgroup -- subsystem-group "WSMP Parser"


		endgroup -- subsystem-group "DSRC Adapter"
  
  
		group "Pinpoint Adapter" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[450]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[452]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[448]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[92]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[91]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[93]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"

			group "Data Store\nWrite1" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[437]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[435]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[433]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[89]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[88]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[90]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite1"

			group "Data Store\nWrite2" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[431]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[86]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[431]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[87]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[431]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[85]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite2"

			group "Data Store\nWrite3" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[422]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[3]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[422]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[81]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[422]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[8]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite3"

			group "Data Store\nWrite4" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[410]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[77]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[410]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[78]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[410]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[76]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite4"

  
  
			group "Norm" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real32_T_12[3]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Product" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[0]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Product"

				group "Product1" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[1]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Product1"

				group "Add" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[2]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Add"

				group "Sqrt" -- block-group
				{
				 block: "Sqrt"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[3]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sqrt"



			endgroup -- subsystem-group "Norm"
  
  
			group "Norm1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real32_T_12[8]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Product" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[4]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Product"

				group "Product1" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[5]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Product1"

				group "Product2" -- block-group
				{
				 block: "Product"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[6]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Product2"

				group "Add" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[7]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Add"

				group "Sqrt" -- block-group
				{
				 block: "Sqrt"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[8]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sqrt"



			endgroup -- subsystem-group "Norm1"


		endgroup -- subsystem-group "Pinpoint Adapter"
  
  
		group "SRX Command Bus Adapter" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[6]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[1]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[1]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[8]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[4]
				{
				 type:    uint(8)*
				 alias:   "In5"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[8]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"

  
  
			group "convert to double" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[6]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint32_T_8[189]
					{
					 type:    uint(32)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

  
  
				group "32-bit array to 8-bit array" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint8_T_19[3144]
					{
					 type:    SpeedHarm_ArrayDT3_1_1472_Col*
					 alias:   "Byte Array"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Assignment" -- block-group
					{
					 block: "Assignment"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[3144]
						{
						 type:    SpeedHarm_ArrayDT3_1_1472_Col*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Assignment"

					group "Shift\nArithmetic" -- block-group
					{
					 block: "ArithShift"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint32_T_14[826]
						{
						 type:    uint(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Shift\nArithmetic"

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[110]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Constant1" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_int32_T_7[4]
						{
						 type:    int(32)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant1"

					group "Constant2" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_int32_T_7[3]
						{
						 type:    int(32)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant2"

					group "Constant3" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_int32_T_7[5]
						{
						 type:    int(32)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant3"

					group "Convert" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint32_T_14[823]
						{
						 type:    uint(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Convert"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[3143]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "convert" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[539]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "convert"

					group "For Iterator" -- block-group
					{
					 block: "ForIterator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_int32_T_13[20]
						{
						 type:    int(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "For Iterator"

					group "Math\nFunction" -- block-group
					{
					 block: "Math"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_int32_T_13[22]
						{
						 type:    int(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Math\nFunction"

					group "Divide" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[540]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Divide"

					group "Product" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint32_T_14[825]
						{
						 type:    uint(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Product"

					group "Rounding\nFunction" -- block-group
					{
					 block: "Rounding"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[541]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Rounding\nFunction"

					group "Selector" -- block-group
					{
					 block: "Selector"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint32_T_14[824]
						{
						 type:    uint(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Selector"

					group "Bitwise\nOperator" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint32_T_14[827]
						{
						 type:    uint(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						p_SpeedHarm_P_uint32_T_8[1]
						{
						 type:    uint(32)*
						 alias:   "BitMask"
						 flags:   PARAM
						}


					endgroup -- block-group "Bitwise\nOperator"

					group "Sum" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_int32_T_13[21]
						{
						 type:    int(32)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Sum"

  
  
					group "Initialize array output (zeros)" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_35[0]
						{
						 type:    SpeedHarm_ArrayDT3_1_1472_Col*
						 alias:   "y"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}



					endgroup -- subsystem-group "Initialize array output (zeros)"


				endgroup -- subsystem-group "32-bit array to 8-bit array"
  
  
				group "Parse 64 bit int" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[6]
					{
					 type:    flt(64,IEEE)*
					 alias:   "output"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_uint32_T_8[190]
						{
						 type:    SpeedHarm_ArrayDT7_8*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Constant1" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[936]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant1"

					group "Constant2" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_uint32_T_8[198]
						{
						 type:    SpeedHarm_ArrayDT7_4*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant2"

					group "Factor" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[937]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Factor"

					group "Data Type Conversion" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[2]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion"

					group "Data Type Conversion1" -- block-group
					{
					 block: "DataTypeConversion"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[3]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Data Type Conversion1"

					group "Product" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[4]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Product"

					group "multiply" -- block-group
					{
					 block: "Product"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[6]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "multiply"

					group "Selector" -- block-group
					{
					 block: "Selector"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint8_T_19[0]
						{
						 type:    SpeedHarm_ArrayDT3_1_8_Col*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Selector"

					group "Add" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[5]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Add"

					group "Dot Product" -- block-group
					{
					 block: "DotProduct"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1


					endgroup -- block-group "Dot Product"

					group "Dot Product1" -- block-group
					{
					 block: "DotProduct"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1


					endgroup -- block-group "Dot Product1"



				endgroup -- subsystem-group "Parse 64 bit int"


			endgroup -- subsystem-group "convert to double"


		endgroup -- subsystem-group "SRX Command Bus Adapter"
  
  
		group "SRX Command Bus RX Handler" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint32_T_14[157]
			{
			 type:    uint(32)*
			 alias:   "SRX Command Bus Data{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[158]
			{
			 type:    uint(32)*
			 alias:   "SRX Command Bus Data{SubArray2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[0]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[1]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[159]
			{
			 type:    uint(32)*
			 alias:   "SRX Command Bus Data{SubArray5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[1]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray6}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[2]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray7}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[8]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray8}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[3]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray9}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[4]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray10}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[5]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray11}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[6]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray12}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[7]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[8]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray14}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[50]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[37]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray16}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[38]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray17}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[21]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray18}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[39]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray19}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[40]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray20}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[41]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray21}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[42]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray22}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[51]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray23}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[52]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray24}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[43]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray25}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[44]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray26}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[45]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray27}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[46]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray28}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[47]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray29}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[48]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray30}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[53]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray31}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[54]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray32}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[49]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray33}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[50]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray34}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[51]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray35}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[52]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray36}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[53]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray37}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[54]
			{
			 type:    uint(8)*
			 alias:   "SRX Command Bus Data{SubArray38}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[55]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray39}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[56]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray40}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[0]
			{
			 type:    uint(16)*
			 alias:   "SRX Command Bus Data{SubArray41}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[1]
			{
			 type:    uint(16)*
			 alias:   "SRX Command Bus Data{SubArray42}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[2]
			{
			 type:    uint(16)*
			 alias:   "SRX Command Bus Data{SubArray43}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[3]
			{
			 type:    uint(16)*
			 alias:   "SRX Command Bus Data{SubArray44}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[57]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray45}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[58]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX Command Bus Data{SubArray46}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

  
  
			group "AccelModuleFeedback" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint32_T_14[159]
				{
				 type:    uint(32)*
				 alias:   "Torque"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[1]
				{
				 type:    uint(8)*
				 alias:   "AccelCmdInjectionFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[2]
				{
				 type:    uint(8)*
				 alias:   "AccelCmdTimeoutFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[8]
				{
				 type:    uint(8)*
				 alias:   "AccelCmdModeEcho"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[3]
				{
				 type:    uint(8)*
				 alias:   "AccelCanTimeoutFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[4]
				{
				 type:    uint(8)*
				 alias:   "AccelDriverOverride"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[5]
				{
				 type:    uint(8)*
				 alias:   "AccelInjectionMsg"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[6]
				{
				 type:    uint(8)*
				 alias:   "AccelPairTimeoutFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[7]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[8]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "AccelModuleFeedback"
  
  
			group "BrakeModuleFeedback" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[50]
				{
				 type:    flt(64,IEEE)*
				 alias:   "BrakeForce"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[37]
				{
				 type:    uint(8)*
				 alias:   "BrakeCmdInjectionFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[38]
				{
				 type:    uint(8)*
				 alias:   "BrakeCmdTimeoutFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[21]
				{
				 type:    uint(8)*
				 alias:   "BrakeCmdModeEcho"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[39]
				{
				 type:    uint(8)*
				 alias:   "BrakeCanTimoutFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[40]
				{
				 type:    uint(8)*
				 alias:   "BrakeDriverOverride"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[41]
				{
				 type:    uint(8)*
				 alias:   "BrakeInjectionMsg"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[42]
				{
				 type:    uint(8)*
				 alias:   "BrakePairTimeoutFlag"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[51]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[52]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "BrakeModuleFeedback"
  
  
			group "FrontLightStatus" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[43]
				{
				 type:    uint(8)*
				 alias:   "FrontOutput1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[44]
				{
				 type:    uint(8)*
				 alias:   "FrontOutput2"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[45]
				{
				 type:    uint(8)*
				 alias:   "FrontOutput3"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[46]
				{
				 type:    uint(8)*
				 alias:   "FrontOutput4"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[47]
				{
				 type:    uint(8)*
				 alias:   "FrontOutput5"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[48]
				{
				 type:    uint(8)*
				 alias:   "FrontOutput6"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[53]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[54]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "FrontLightStatus"
  
  
			group "RearLightStatus" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[49]
				{
				 type:    uint(8)*
				 alias:   "RearOutput1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[50]
				{
				 type:    uint(8)*
				 alias:   "RearOutput2"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[51]
				{
				 type:    uint(8)*
				 alias:   "RearOutput3"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[52]
				{
				 type:    uint(8)*
				 alias:   "RearOutput4"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[53]
				{
				 type:    uint(8)*
				 alias:   "RearOutput5"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[54]
				{
				 type:    uint(8)*
				 alias:   "RearOutput6"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[55]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[56]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "RearLightStatus"
  
  
			group "SpeedControlEcho" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint16_T_18[0]
				{
				 type:    uint(16)*
				 alias:   "PID_DivisorEcho"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[1]
				{
				 type:    uint(16)*
				 alias:   "D_NumeratorEcho"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[2]
				{
				 type:    uint(16)*
				 alias:   "I_NumeratorEcho"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[3]
				{
				 type:    uint(16)*
				 alias:   "P_NumeratorEcho"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[57]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[58]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "SpeedControlEcho"
  
  
			group "UTC_Time" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint32_T_14[157]
				{
				 type:    uint(32)*
				 alias:   "UTC_Lower"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_14[158]
				{
				 type:    uint(32)*
				 alias:   "UTC_Upper"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[1]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "UTC_Time"

			p_SpeedHarm_B_boolean_T_20[3]
			{
			 type:    uint(8)*
			 alias:   "AccelCanTimeoutFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCanTimeoutFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[1]
			{
			 type:    uint(8)*
			 alias:   "AccelCmdInjectionFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCmdInjectionFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[8]
			{
			 type:    uint(8)*
			 alias:   "AccelCmdModeEcho"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCmdModeEcho"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[2]
			{
			 type:    uint(8)*
			 alias:   "AccelCmdTimeoutFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCmdTimeoutFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[4]
			{
			 type:    uint(8)*
			 alias:   "AccelDriverOverride"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelDriverOverride"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[5]
			{
			 type:    uint(8)*
			 alias:   "AccelInjectionMsg"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelInjectionMsg"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[6]
			{
			 type:    uint(8)*
			 alias:   "AccelPairTimeoutFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelPairTimeoutFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[39]
			{
			 type:    uint(8)*
			 alias:   "BrakeCanTimoutFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCanTimoutFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[37]
			{
			 type:    uint(8)*
			 alias:   "BrakeCmdInjectionFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCmdInjectionFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[21]
			{
			 type:    uint(8)*
			 alias:   "BrakeCmdModeEcho"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCmdModeEcho"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[38]
			{
			 type:    uint(8)*
			 alias:   "BrakeCmdTimeoutFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCmdTimeoutFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[40]
			{
			 type:    uint(8)*
			 alias:   "BrakeDriverOverride"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeDriverOverride"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[50]
			{
			 type:    flt(64,IEEE)*
			 alias:   "BrakeForce"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeForce"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[41]
			{
			 type:    uint(8)*
			 alias:   "BrakeInjectionMsg"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeInjectionMsg"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[42]
			{
			 type:    uint(8)*
			 alias:   "BrakePairTimeoutFlag"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakePairTimeoutFlag"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[1]
			{
			 type:    uint(16)*
			 alias:   "D_NumeratorEcho"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/D_NumeratorEcho"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[43]
			{
			 type:    uint(8)*
			 alias:   "FrontOutput1"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[44]
			{
			 type:    uint(8)*
			 alias:   "FrontOutput2"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput2"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[45]
			{
			 type:    uint(8)*
			 alias:   "FrontOutput3"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput3"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[46]
			{
			 type:    uint(8)*
			 alias:   "FrontOutput4"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput4"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[47]
			{
			 type:    uint(8)*
			 alias:   "FrontOutput5"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput5"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[48]
			{
			 type:    uint(8)*
			 alias:   "FrontOutput6"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput6"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[2]
			{
			 type:    uint(16)*
			 alias:   "I_NumeratorEcho"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/I_NumeratorEcho"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[0]
			{
			 type:    uint(16)*
			 alias:   "PID_DivisorEcho"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/PID_DivisorEcho"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[3]
			{
			 type:    uint(16)*
			 alias:   "P_NumeratorEcho"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/P_NumeratorEcho"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[49]
			{
			 type:    uint(8)*
			 alias:   "RearOutput1"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[50]
			{
			 type:    uint(8)*
			 alias:   "RearOutput2"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput2"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[51]
			{
			 type:    uint(8)*
			 alias:   "RearOutput3"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput3"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[52]
			{
			 type:    uint(8)*
			 alias:   "RearOutput4"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput4"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[53]
			{
			 type:    uint(8)*
			 alias:   "RearOutput5"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput5"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[54]
			{
			 type:    uint(8)*
			 alias:   "RearOutput6"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput6"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[159]
			{
			 type:    uint(32)*
			 alias:   "Torque"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/Torque"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[157]
			{
			 type:    uint(32)*
			 alias:   "UTC_Lower"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/UTC_Lower"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[158]
			{
			 type:    uint(32)*
			 alias:   "UTC_Upper"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/UTC_Upper"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[7]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence1}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[51]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence2}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[53]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence3}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[55]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence4}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[57]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence5}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[0]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence6}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[8]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time{Occurence1}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[52]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time{Occurence2}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[54]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time{Occurence3}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[56]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time{Occurence4}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[58]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time{Occurence5}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[1]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time{Occurence6}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/RX time"
			 flags:   LABEL|READONLY
			}

		endgroup -- subsystem-group "SRX Command Bus RX Handler"
  
  
		group "SRX DSRC RX Handler" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint32_T_14[161]
			{
			 type:    SpeedHarm_ArrayDT7_368*
			 alias:   "DSRC data"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int32_T_13[2]
			{
			 type:    int(32)*
			 alias:   "Message Size"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[36]
			{
			 type:    uint(8)*
			 alias:   "Status"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}

  
  
			group "ETHERNET_UDP_RX_BL1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint32_T_14[161]
				{
				 type:    SpeedHarm_ArrayDT7_368*
				 alias:   "Data"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int32_T_13[2]
				{
				 type:    int(32)*
				 alias:   "Message Size"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[36]
				{
				 type:    uint(8)*
				 alias:   "Status"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "dsethernetudp_rx" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[161]
					{
					 type:    SpeedHarm_ArrayDT7_368*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int32_T_13[2]
					{
					 type:    int(32)*
					 alias:   "Out2"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_boolean_T_20[36]
					{
					 type:    uint(8)*
					 alias:   "Out3"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}

					p_SpeedHarm_P_real_T_5[942]
					{
					 type:    SpeedHarm_ArrayDT0_27*
					 alias:   "P1"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[971]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P2"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[974]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P3"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[977]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P4"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[980]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P5"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[983]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P6"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[986]
					{
					 type:    SpeedHarm_ArrayDT0_18*
					 alias:   "P7"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[1006]
					{
					 type:    SpeedHarm_ArrayDT0_18*
					 alias:   "P8"
					 flags:   PARAM
					}


				endgroup -- block-group "dsethernetudp_rx"



			endgroup -- subsystem-group "ETHERNET_UDP_RX_BL1"


		endgroup -- subsystem-group "SRX DSRC RX Handler"
  
  
		group "SRX High-Speed Adapter" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[96]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[12]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[11]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[29]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[9]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[33]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_34[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_33[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_32[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_31[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[21]
				{
				 type:    uint(8)*
				 alias:   "In11"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[43]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[13]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In13"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[43]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In14"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_30[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In15"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_29[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In16"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[43]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In17"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_int32_T_13[1]
				{
				 type:    int(32)*
				 alias:   "In18"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[10]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Data Type Conversion1" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[11]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion1"

			group "Data Type Conversion2" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[14]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion2"

			group "Data Type Conversion3" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[12]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion3"

			group "Data Type Conversion4" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_int32_T_13[1]
				{
				 type:    int(32)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion4"

			group "Data Type Conversion5" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[9]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion5"

			group "Gain" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[13]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real32_T_6[3]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "Gain"

  
  
			group "Compare\nTo Zero" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[14]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[16]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[14]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Zero"
  
  
			group "Compare\nTo Zero1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[19]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[17]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[19]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Zero1"
  
  
			group "Compare\nTo Zero2" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[29]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[18]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[29]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Zero2"
  
  
			group "Enabled Subsystem" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real32_T_34[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_33[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "In1" -- block-group
				{
				 block: "Inport"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_34[0]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "In1"

				group "In2" -- block-group
				{
				 block: "Inport"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_33[0]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "In2"



			endgroup -- subsystem-group "Enabled Subsystem"
  
  
			group "Enabled Subsystem1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real32_T_32[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_31[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "In1" -- block-group
				{
				 block: "Inport"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_32[0]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "In1"

				group "In2" -- block-group
				{
				 block: "Inport"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_31[0]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "In2"



			endgroup -- subsystem-group "Enabled Subsystem1"
  
  
			group "Enabled Subsystem2" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real32_T_30[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_29[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "In1" -- block-group
				{
				 block: "Inport"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_30[0]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "In1"

				group "In2" -- block-group
				{
				 block: "Inport"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_29[0]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "In2"



			endgroup -- subsystem-group "Enabled Subsystem2"
  
  
			group "MATLAB Function" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real32_T_12[96]
				{
				 type:    flt(32,IEEE)*
				 alias:   "average"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}



			endgroup -- subsystem-group "MATLAB Function"


		endgroup -- subsystem-group "SRX High-Speed Adapter"
  
  
		group "SRX High-Speed Bus Rx Handler" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint8_T_19[9]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[10]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[9]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[7]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray4}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[10]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[8]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray6}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[11]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray7}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[12]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray8}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[11]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray9}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[12]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray10}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[13]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray11}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[9]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray12}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[14]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[10]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray14}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[15]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[16]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray16}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[31]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray17}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[32]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray18}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[33]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray19}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int16_T_17[0]
			{
			 type:    int(16)*
			 alias:   "SRX High-Speed Bus Data{SubArray20}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[15]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray21}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[14]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray22}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[16]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray23}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[38]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray24}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[17]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray25}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[15]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray26}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[16]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray27}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[18]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray28}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[39]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray29}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[40]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray30}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[17]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray31}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[18]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray32}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[20]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray33}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[160]
			{
			 type:    uint(32)*
			 alias:   "SRX High-Speed Bus Data{SubArray34}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[41]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray35}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[19]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray36}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[21]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray37}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[22]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray38}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[23]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray39}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[24]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray40}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[25]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray41}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[26]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray42}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[27]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray43}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[42]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray44}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[43]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray45}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[34]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray46}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[35]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray47}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[12]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray48}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[13]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray49}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[13]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray50}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[36]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray51}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[37]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray52}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[11]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray53}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[28]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray54}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[29]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray55}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[44]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray56}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[28]
			{
			 type:    uint(8)*
			 alias:   "SRX High-Speed Bus Data{SubArray57}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[45]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray58}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[46]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SRX High-Speed Bus Data{SubArray59}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[47]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[47]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Data Type Conversion1" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[11]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion1"

  
  
			group "Adaptive_Cruise_Disp_Stat_HS" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[17]
				{
				 type:    uint(8)*
				 alias:   "FOAI_AlrtWrnIndRq"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[18]
				{
				 type:    uint(8)*
				 alias:   "FOAI_VehAhdIndRq"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[20]
				{
				 type:    uint(8)*
				 alias:   "FOAI_AlrtChmIhbRq"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint32_T_14[160]
				{
				 type:    uint(32)*
				 alias:   "ACCSnsClnRqdIO"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[41]
				{
				 type:    flt(64,IEEE)*
				 alias:   "ACCDrvrSeltdSpd"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[19]
				{
				 type:    uint(8)*
				 alias:   "ACCHdwyStg"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[21]
				{
				 type:    uint(8)*
				 alias:   "ACCAct370"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[22]
				{
				 type:    uint(8)*
				 alias:   "ACCDrvrSeltdSpdIO"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[23]
				{
				 type:    uint(8)*
				 alias:   "ACCUnavlbleDTWthrIO"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[24]
				{
				 type:    uint(8)*
				 alias:   "DrvThrtlOvrdIO"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[25]
				{
				 type:    uint(8)*
				 alias:   "ACCHdwayStngIO"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[26]
				{
				 type:    uint(8)*
				 alias:   "ACCTmpUnavlbleIO"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[27]
				{
				 type:    uint(8)*
				 alias:   "ServAdpCrsCtrlIndOn"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[42]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[43]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "Adaptive_Cruise_Disp_Stat_HS"
  
  
			group "Antilock_Brake_and_TC_Status_HC" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[31]
				{
				 type:    flt(64,IEEE)*
				 alias:   "ActVehAccel"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[32]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[33]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "Antilock_Brake_and_TC_Status_HC"
  
  
			group "Driven_Wheel_Grnd_Velocity_HS" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[9]
				{
				 type:    uint(8)*
				 alias:   "WhlRotDrctnlStRtDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[10]
				{
				 type:    uint(8)*
				 alias:   "WhlRotDrctnlStLftDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[9]
				{
				 type:    flt(64,IEEE)*
				 alias:   "WhlGrndVlctyRtDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[7]
				{
				 type:    uint(8)*
				 alias:   "WhlGrndVlctyRtDrvnV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[10]
				{
				 type:    flt(64,IEEE)*
				 alias:   "WhlGrndVlctyLftDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[8]
				{
				 type:    uint(8)*
				 alias:   "WhlGrndVlctyLftDrvnV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[11]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[12]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "Driven_Wheel_Grnd_Velocity_HS"
  
  
			group "ETEI_Engine_General_Status" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[44]
				{
				 type:    flt(64,IEEE)*
				 alias:   "AccPdlPosPcntFullRng"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[28]
				{
				 type:    uint(8)*
				 alias:   "AccPdlPosPcntFullRngV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[45]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[46]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "ETEI_Engine_General_Status"
  
  
			group "Exterior_Lighting_HS_0x140" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[17]
				{
				 type:    flt(64,IEEE)*
				 alias:   "OtsdAmbtLtLvlStat"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[18]
				{
				 type:    flt(64,IEEE)*
				 alias:   "TrnSwAct"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[19]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RrFogLmpsAct"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[20]
				{
				 type:    flt(64,IEEE)*
				 alias:   "HdlmpBmSelectStat"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[21]
				{
				 type:    flt(64,IEEE)*
				 alias:   "MainLghtSw"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[22]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FrFogLmpsAct"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[23]
				{
				 type:    flt(64,IEEE)*
				 alias:   "LowBmAct"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[24]
				{
				 type:    flt(64,IEEE)*
				 alias:   "AutLghtCtrl"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[25]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FlToPsSwAtv"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[26]
				{
				 type:    flt(64,IEEE)*
				 alias:   "BrkLtsAtv"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[27]
				{
				 type:    flt(64,IEEE)*
				 alias:   "HighBmAct"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[28]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[29]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[30]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX delta time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "Exterior_Lighting_HS_0x140"
  
  
			group "NonDriven_Wheel_Grnd_Velocity_HS" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[11]
				{
				 type:    uint(8)*
				 alias:   "WhlRotDrctnlStRtNDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[12]
				{
				 type:    uint(8)*
				 alias:   "WhlRotDrctnlStLftNDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[13]
				{
				 type:    flt(64,IEEE)*
				 alias:   "WhlGrndVlctyRtNnDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[9]
				{
				 type:    uint(8)*
				 alias:   "WhlGrndVlctyRtNnDrvnV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[14]
				{
				 type:    flt(64,IEEE)*
				 alias:   "WhlGrndVlctyLftNnDrvn"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[10]
				{
				 type:    uint(8)*
				 alias:   "WhlGrndVlctyLftNnDrvnV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[15]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[16]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "NonDriven_Wheel_Grnd_Velocity_HS"
  
  
			group "PPEI_Steering_Wheel_Angle" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_int16_T_17[0]
				{
				 type:    int(16)*
				 alias:   "StrWhAngGrd"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[15]
				{
				 type:    uint(8)*
				 alias:   "StrWhAngGrdMsk"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[14]
				{
				 type:    uint(8)*
				 alias:   "StWhlAngAliveRollCnt"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[16]
				{
				 type:    uint(8)*
				 alias:   "StrWhAngGrdV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[38]
				{
				 type:    flt(64,IEEE)*
				 alias:   "StrWhAng"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[17]
				{
				 type:    uint(8)*
				 alias:   "StrWhAngMask"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[15]
				{
				 type:    uint(8)*
				 alias:   "StrWhlAngSenTyp"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[16]
				{
				 type:    uint(8)*
				 alias:   "StrWhlAngSenCalStat"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[18]
				{
				 type:    uint(8)*
				 alias:   "StrWhAngV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[39]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[40]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "PPEI_Steering_Wheel_Angle"
  
  
			group "PTEI_Brake_Apply_Status" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[34]
				{
				 type:    flt(64,IEEE)*
				 alias:   "AccPos"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[35]
				{
				 type:    flt(64,IEEE)*
				 alias:   "PSBPI_PTSnBrkPdlPs"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[12]
				{
				 type:    uint(8)*
				 alias:   "PSBPI_PTSnBrkPdlPsV"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[13]
				{
				 type:    uint(8)*
				 alias:   "TrnsAuxPmpAct"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[13]
				{
				 type:    uint(8)*
				 alias:   "PTSnsdBrkPdlInfARC"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[36]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[37]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RX time"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

			endgroup -- subsystem-group "PTEI_Brake_Apply_Status"

			p_SpeedHarm_B_boolean_T_20[21]
			{
			 type:    uint(8)*
			 alias:   "ACCAct370"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCAct370"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[41]
			{
			 type:    flt(64,IEEE)*
			 alias:   "ACCDrvrSeltdSpd"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCDrvrSeltdSpd"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[22]
			{
			 type:    uint(8)*
			 alias:   "ACCDrvrSeltdSpdIO"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCDrvrSeltdSpdIO"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[25]
			{
			 type:    uint(8)*
			 alias:   "ACCHdwayStngIO"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCHdwayStngIO"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[19]
			{
			 type:    uint(8)*
			 alias:   "ACCHdwyStg"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCHdwyStg"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint32_T_14[160]
			{
			 type:    uint(32)*
			 alias:   "ACCSnsClnRqdIO"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCSnsClnRqdIO"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[26]
			{
			 type:    uint(8)*
			 alias:   "ACCTmpUnavlbleIO"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCTmpUnavlbleIO"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[23]
			{
			 type:    uint(8)*
			 alias:   "ACCUnavlbleDTWthrIO"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCUnavlbleDTWthrIO"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[44]
			{
			 type:    flt(64,IEEE)*
			 alias:   "AccPdlPosPcntFullRng"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/ETEI_Engine_General_Status/AccPdlPosPcntFullRng"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[28]
			{
			 type:    uint(8)*
			 alias:   "AccPdlPosPcntFullRngV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/ETEI_Engine_General_Status/AccPdlPosPcntFullRngV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[34]
			{
			 type:    flt(64,IEEE)*
			 alias:   "AccPos"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/AccPos"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[31]
			{
			 type:    flt(64,IEEE)*
			 alias:   "ActVehAccel"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Antilock_Brake_and_TC_Status_HC/ActVehAccel"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[24]
			{
			 type:    flt(64,IEEE)*
			 alias:   "AutLghtCtrl"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/AutLghtCtrl"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[11]
			{
			 type:    uint(8)*
			 alias:   "BrkLtsAtv{Occurence1}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Data Type Conversion1/Out1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[26]
			{
			 type:    flt(64,IEEE)*
			 alias:   "BrkLtsAtv{Occurence2}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/BrkLtsAtv"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[24]
			{
			 type:    uint(8)*
			 alias:   "DrvThrtlOvrdIO"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/DrvThrtlOvrdIO"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[20]
			{
			 type:    uint(8)*
			 alias:   "FOAI_AlrtChmIhbRq"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/FOAI_AlrtChmIhbRq"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[17]
			{
			 type:    uint(8)*
			 alias:   "FOAI_AlrtWrnIndRq"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/FOAI_AlrtWrnIndRq"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[18]
			{
			 type:    uint(8)*
			 alias:   "FOAI_VehAhdIndRq"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/FOAI_VehAhdIndRq"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[25]
			{
			 type:    flt(64,IEEE)*
			 alias:   "FlToPsSwAtv"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/FlToPsSwAtv"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[22]
			{
			 type:    flt(64,IEEE)*
			 alias:   "FrFogLmpsAct"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/FrFogLmpsAct"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[20]
			{
			 type:    flt(64,IEEE)*
			 alias:   "HdlmpBmSelectStat"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/HdlmpBmSelectStat"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[27]
			{
			 type:    flt(64,IEEE)*
			 alias:   "HighBmAct"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/HighBmAct"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[23]
			{
			 type:    flt(64,IEEE)*
			 alias:   "LowBmAct"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/LowBmAct"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[21]
			{
			 type:    flt(64,IEEE)*
			 alias:   "MainLghtSw"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/MainLghtSw"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[35]
			{
			 type:    flt(64,IEEE)*
			 alias:   "PSBPI_PTSnBrkPdlPs"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/PSBPI_PTSnBrkPdlPs"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[12]
			{
			 type:    uint(8)*
			 alias:   "PSBPI_PTSnBrkPdlPsV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/PSBPI_PTSnBrkPdlPsV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[13]
			{
			 type:    uint(8)*
			 alias:   "PTSnsdBrkPdlInfARC"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/PTSnsdBrkPdlInfARC"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[19]
			{
			 type:    flt(64,IEEE)*
			 alias:   "RrFogLmpsAct"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/RrFogLmpsAct"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[27]
			{
			 type:    uint(8)*
			 alias:   "ServAdpCrsCtrlIndOn"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ServAdpCrsCtrlIndOn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[14]
			{
			 type:    uint(8)*
			 alias:   "StWhlAngAliveRollCnt"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StWhlAngAliveRollCnt"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[38]
			{
			 type:    flt(64,IEEE)*
			 alias:   "StrWhAng"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAng"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_int16_T_17[0]
			{
			 type:    int(16)*
			 alias:   "StrWhAngGrd"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngGrd"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[15]
			{
			 type:    uint(8)*
			 alias:   "StrWhAngGrdMsk"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngGrdMsk"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[16]
			{
			 type:    uint(8)*
			 alias:   "StrWhAngGrdV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngGrdV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[17]
			{
			 type:    uint(8)*
			 alias:   "StrWhAngMask"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngMask"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[18]
			{
			 type:    uint(8)*
			 alias:   "StrWhAngV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[16]
			{
			 type:    uint(8)*
			 alias:   "StrWhlAngSenCalStat"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhlAngSenCalStat"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[15]
			{
			 type:    uint(8)*
			 alias:   "StrWhlAngSenTyp"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhlAngSenTyp"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[43]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence1}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[33]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence2}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Antilock_Brake_and_TC_Status_HC/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[12]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence3}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[29]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence4}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[16]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence5}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[40]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence6}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[37]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Time{Occurence7}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/RX time"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[18]
			{
			 type:    flt(64,IEEE)*
			 alias:   "TrnSwAct"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/TrnSwAct"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[13]
			{
			 type:    uint(8)*
			 alias:   "TrnsAuxPmpAct"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/TrnsAuxPmpAct"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[10]
			{
			 type:    flt(64,IEEE)*
			 alias:   "WhlGrndVlctyLftDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[8]
			{
			 type:    uint(8)*
			 alias:   "WhlGrndVlctyLftDrvnV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftDrvnV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[14]
			{
			 type:    flt(64,IEEE)*
			 alias:   "WhlGrndVlctyLftNnDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftNnDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[10]
			{
			 type:    uint(8)*
			 alias:   "WhlGrndVlctyLftNnDrvnV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftNnDrvnV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[9]
			{
			 type:    flt(64,IEEE)*
			 alias:   "WhlGrndVlctyRtDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[7]
			{
			 type:    uint(8)*
			 alias:   "WhlGrndVlctyRtDrvnV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtDrvnV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[13]
			{
			 type:    flt(64,IEEE)*
			 alias:   "WhlGrndVlctyRtNnDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtNnDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[9]
			{
			 type:    uint(8)*
			 alias:   "WhlGrndVlctyRtNnDrvnV"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtNnDrvnV"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[10]
			{
			 type:    uint(8)*
			 alias:   "WhlRotDrctnlStLftDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStLftDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[12]
			{
			 type:    uint(8)*
			 alias:   "WhlRotDrctnlStLftNDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStLftNDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[9]
			{
			 type:    uint(8)*
			 alias:   "WhlRotDrctnlStRtDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStRtDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[11]
			{
			 type:    uint(8)*
			 alias:   "WhlRotDrctnlStRtNDrvn"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStRtNDrvn"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[42]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence1}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[32]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence2}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Antilock_Brake_and_TC_Status_HC/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[11]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence3}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[28]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence4}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[15]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence5}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[39]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence6}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[36]
			{
			 type:    flt(64,IEEE)*
			 alias:   "status{Occurence7}"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/RX status"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[46]
			{
			 type:    flt(64,IEEE)*
			 alias:   "time"
			 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/ETEI_Engine_General_Status/RX time"
			 flags:   LABEL|READONLY
			}

		endgroup -- subsystem-group "SRX High-Speed Bus Rx Handler"
  
  
		group "SRX Object Bus Adapter" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Bus\nCreator" -- block-group
			{
			 block: "BusCreator"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_2_0_num_objects
				{
				 type:    uint(8)*
				 alias:   "Out1{num_objects}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nCreator"

			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[30]
				{
				 type:    uint(8)*
				 alias:   "In1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[483]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"

			group "Data Store\nWrite1" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_2_0_num_objects
				{
				 type:    uint(8)*
				 alias:   "In1{num_objects}"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite1"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[20]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Logical\nOperator" -- block-group
			{
			 block: "Logic"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[35]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Logical\nOperator"

			group "Logical\nOperator1" -- block-group
			{
			 block: "Logic"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[30]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Logical\nOperator1"

			group "Relational\nOperator" -- block-group
			{
			 block: "RelationalOperator"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[31]
				{
				 type:    SpeedHarm_ArrayDT8_4*
				 alias:   "Out1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Relational\nOperator"

  
  
			group "For Each\nSubsystem" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output Out1
				p_SpeedHarm_B_real_T_10[534]
				{
				 type:    SpeedHarm_ArrayDT0_4*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Bus\nCreator" -- block-group
				{
				 block: "BusCreator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_9_1_long_dist_m
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{long_dist_m}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_9_1_long_vel_m_s
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{long_vel_m_s}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nCreator"

				group "Bus\nSelector" -- block-group
				{
				 block: "BusSelector"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_28[0]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_28[1]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out2"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[538]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out3"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nSelector"

				group "For Each" -- block-group
				{
				 block: "ForEach"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}



				endgroup -- block-group "For Each"


				p_SpeedHarm_B_real_T_28[0]
				{
				 type:    flt(64,IEEE)*
				 alias:   "<FwdFusTrkALongPos>"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus Adapter/For Each\nSubsystem/Bus\nSelector/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_28[1]
				{
				 type:    flt(64,IEEE)*
				 alias:   "<FwdFusTrkARelLongVel>"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus Adapter/For Each\nSubsystem/Bus\nSelector/Out2"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[538]
				{
				 type:    flt(64,IEEE)*
				 alias:   "<FwdFusTrkARollingCnt>"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus Adapter/For Each\nSubsystem/Bus\nSelector/Out3"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "For Each\nSubsystem"
  
  
			group "Update Objects" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


				group "Bus\nSelector" -- block-group
				{
				 block: "BusSelector"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[532]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[533]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out2"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nSelector"

				group "Data Store\nWrite" -- block-group
				{
				 block: "DataStoreWrite"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[483]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_uint8_T_19[3142]
					{
					 type:    uint(8)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}

					-- Skipping inport In3

					p_SpeedHarm_B_real_T_10[483]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In4"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_boolean_T_20[89]
					{
					 type:    uint(8)*
					 alias:   "In5"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[483]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In6"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[94]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In7"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[483]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In8"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real32_T_12[95]
					{
					 type:    flt(32,IEEE)*
					 alias:   "In9"
					 desc:    ""
					 flags:   SINK|READONLY
					}



				endgroup -- block-group "Data Store\nWrite"

				group "Data Type Conversion" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[3142]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion"

				group "Data Type Conversion1" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[94]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion1"

				group "Data Type Conversion2" -- block-group
				{
				 block: "DataTypeConversion"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[95]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Data Type Conversion2"

  
  
				group "Compare\nTo Zero" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_boolean_T_20[89]
					{
					 type:    uint(8)*
					 alias:   "y"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}

					group "Constant" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_uint8_T_13[0]
						{
						 type:    uint(8)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant"

					group "Compare" -- block-group
					{
					 block: "RelationalOperator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_boolean_T_20[89]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Compare"



				endgroup -- subsystem-group "Compare\nTo Zero"

				p_SpeedHarm_B_real_T_10[532]
				{
				 type:    flt(64,IEEE)*
				 alias:   "<FwdFusTrkALongPos>"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus Adapter/Update Objects/Bus\nSelector/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[533]
				{
				 type:    flt(64,IEEE)*
				 alias:   "<FwdFusTrkARelLongVel>"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus Adapter/Update Objects/Bus\nSelector/Out2"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "Update Objects"


		endgroup -- subsystem-group "SRX Object Bus Adapter"
  
  
		group "SRX Object Bus RX Handler" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[467]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[468]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[469]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[470]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[471]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[472]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray6}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[473]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray7}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[474]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray8}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[475]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray9}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[476]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray10}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[477]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray11}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[478]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray12}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[479]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[480]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray14}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[481]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[482]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray16}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[483]
			{
			 type:    flt(64,IEEE)*
			 alias:   "\nSRX Object Header{SubArray17}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output \nSRX Object List

  
  
			group "SRX Object Bus RX Interrupt" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[467]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[468]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[469]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray3}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[470]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray4}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[471]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray5}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[472]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray6}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[473]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray7}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[474]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray8}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[475]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray9}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[476]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray10}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[477]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray11}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[478]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray12}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[479]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray13}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[480]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray14}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[481]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray15}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[482]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray16}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[483]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Object Header{SubArray17}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				-- Skipping output Object List

				group "Bus\nCreator" -- block-group
				{
				 block: "BusCreator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkAObjType
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjType}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkAMeasStatus
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMeasStatus}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkARelLatVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLatVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkALatPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALatPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkAConfidence
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAConfidence}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkARelLongVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLongVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkALongPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALongPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkAMsgIndex
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMsgIndex}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkAObjectID
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjectID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_FwdFusTrkARollingCnt
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARollingCnt}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_Status
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Status}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_4_Time
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Time}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nCreator"

				group "Bus\nCreator1" -- block-group
				{
				 block: "BusCreator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkAObjType
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjType}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkAMeasStatus
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMeasStatus}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkARelLatVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLatVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkALatPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALatPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkAConfidence
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAConfidence}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkARelLongVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLongVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkALongPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALongPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkAMsgIndex
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMsgIndex}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkAObjectID
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjectID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_FwdFusTrkARollingCnt
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARollingCnt}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_Status
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Status}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_5_Time
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Time}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nCreator1"

				group "Bus\nCreator2" -- block-group
				{
				 block: "BusCreator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkAObjType
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjType}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkAMeasStatus
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMeasStatus}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkARelLatVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLatVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkALatPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALatPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkAConfidence
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAConfidence}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkARelLongVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLongVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkALongPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALongPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkAMsgIndex
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMsgIndex}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkAObjectID
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjectID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_FwdFusTrkARollingCnt
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARollingCnt}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_Status
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Status}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_6_Time
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Time}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nCreator2"

				group "Bus\nCreator3" -- block-group
				{
				 block: "BusCreator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkAObjType
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjType}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkAMeasStatus
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMeasStatus}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkARelLatVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLatVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkALatPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALatPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkAConfidence
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAConfidence}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkARelLongVel
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARelLongVel}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkALongPos
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkALongPos}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkAMsgIndex
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAMsgIndex}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkAObjectID
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkAObjectID}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_FwdFusTrkARollingCnt
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{FwdFusTrkARollingCnt}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_Status
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Status}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_4_7_Time
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{Time}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nCreator3"

				group "Vector\nConcatenate" -- block-group
				{
				 block: "Concatenate"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1


				endgroup -- block-group "Vector\nConcatenate"

  
  
				group "T_Fwd_Fus_Obj_Header" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[467]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RoadTypeInfo"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[468]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHdObjClstTanHdng"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[469]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHed_ObjClstrCurv"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[470]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_RFSRROK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[471]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_RCSRROK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[472]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_LCSRROK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[473]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHeadTimStmp"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[474]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHeadTimStmpV"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[475]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_MapDataOK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[476]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_VIsOK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[477]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_LFSRROK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[478]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHead_LrrOK"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[479]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHedNmValTargts"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[480]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHeadFuncState"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[481]
					{
					 type:    flt(64,IEEE)*
					 alias:   "T_FusHeadRollingCount"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[482]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[483]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "T_Fwd_Fus_Obj_Header"
  
  
				group "T_Fwd_Fus_Obj_TrackA_1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[484]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjType"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[485]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMeasStatus"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[486]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLatVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[487]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALatPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[488]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAConfidence"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[489]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLongVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[490]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALongPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[491]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMsgIndex"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[492]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjectID"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[493]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARollingCnt"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[494]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[495]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "T_Fwd_Fus_Obj_TrackA_1"
  
  
				group "T_Fwd_Fus_Obj_TrackA_2" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[508]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjType"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[509]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMeasStatus"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[510]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLatVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[511]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALatPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[512]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAConfidence"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[513]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLongVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[514]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALongPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[515]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMsgIndex"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[516]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjectID"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[517]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARollingCnt"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[518]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[519]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "T_Fwd_Fus_Obj_TrackA_2"
  
  
				group "T_Fwd_Fus_Obj_TrackA_3" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[496]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjType"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[497]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMeasStatus"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[498]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLatVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[499]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALatPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[500]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAConfidence"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[501]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLongVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[502]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALongPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[503]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMsgIndex"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[504]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjectID"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[505]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARollingCnt"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[506]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[507]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "T_Fwd_Fus_Obj_TrackA_3"
  
  
				group "T_Fwd_Fus_Obj_TrackA_4" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[520]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjType"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[521]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMeasStatus"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[522]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLatVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[523]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALatPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[524]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAConfidence"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[525]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARelLongVel"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[526]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkALongPos"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[527]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAMsgIndex"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[528]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkAObjectID"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[529]
					{
					 type:    flt(64,IEEE)*
					 alias:   "FwdFusTrkARollingCnt"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[530]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[531]
					{
					 type:    flt(64,IEEE)*
					 alias:   "RX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "T_Fwd_Fus_Obj_TrackA_4"

				p_SpeedHarm_B_real_T_10[488]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAConfidence{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAConfidence"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[512]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAConfidence{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAConfidence"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[500]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAConfidence{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAConfidence"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[524]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAConfidence{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAConfidence"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[487]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALatPos{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkALatPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[511]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALatPos{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkALatPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[499]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALatPos{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkALatPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[523]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALatPos{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkALatPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[490]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALongPos{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkALongPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[514]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALongPos{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkALongPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[502]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALongPos{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkALongPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[526]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkALongPos{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkALongPos"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[485]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMeasStatus{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAMeasStatus"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[509]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMeasStatus{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAMeasStatus"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[497]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMeasStatus{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAMeasStatus"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[521]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMeasStatus{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAMeasStatus"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[491]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMsgIndex{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAMsgIndex"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[515]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMsgIndex{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAMsgIndex"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[503]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMsgIndex{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAMsgIndex"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[527]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAMsgIndex{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAMsgIndex"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[484]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjType{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAObjType"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[508]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjType{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAObjType"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[496]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjType{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAObjType"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[520]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjType{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAObjType"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[492]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjectID{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAObjectID"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[516]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjectID{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAObjectID"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[504]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjectID{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAObjectID"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[528]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkAObjectID{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAObjectID"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[486]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLatVel{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkARelLatVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[510]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLatVel{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkARelLatVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[498]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLatVel{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkARelLatVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[522]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLatVel{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkARelLatVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[489]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLongVel{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkARelLongVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[513]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLongVel{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkARelLongVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[501]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLongVel{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkARelLongVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[525]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARelLongVel{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkARelLongVel"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[493]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARollingCnt{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkARollingCnt"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[517]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARollingCnt{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkARollingCnt"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[505]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARollingCnt{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkARollingCnt"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[529]
				{
				 type:    flt(64,IEEE)*
				 alias:   "FwdFusTrkARollingCnt{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkARollingCnt"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[467]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RoadTypeInfo"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/RoadTypeInfo"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[482]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/RX status"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[494]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/RX status"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[518]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/RX status"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[506]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/RX status"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[530]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{Occurence5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/RX status"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[468]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHdObjClstTanHdng"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHdObjClstTanHdng"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[480]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHeadFuncState"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadFuncState"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[481]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHeadRollingCount"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadRollingCount"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[473]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHeadTimStmp"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadTimStmp"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[474]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHeadTimStmpV"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadTimStmpV"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[472]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_LCSRROK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_LCSRROK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[477]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_LFSRROK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_LFSRROK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[478]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_LrrOK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_LrrOK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[475]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_MapDataOK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_MapDataOK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[471]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_RCSRROK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_RCSRROK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[470]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_RFSRROK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_RFSRROK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[476]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHead_VIsOK"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_VIsOK"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[479]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHedNmValTargts"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHedNmValTargts"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[469]
				{
				 type:    flt(64,IEEE)*
				 alias:   "T_FusHed_ObjClstrCurv"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHed_ObjClstrCurv"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[483]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Time{Occurence1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/RX time"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[495]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Time{Occurence2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/RX time"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[519]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Time{Occurence3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/RX time"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[507]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Time{Occurence4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/RX time"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[531]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Time{Occurence5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/RX time"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "SRX Object Bus RX Interrupt"


		endgroup -- subsystem-group "SRX Object Bus RX Handler"
  
  
		group "SRX Pinpoint RX Handler" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[461]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[459]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[450]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[452]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[448]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray5}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[92]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray6}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[91]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray7}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[93]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray8}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[446]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray9}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[444]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray10}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[437]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray11}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[435]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray12}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[433]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[89]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray14}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[88]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[90]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray16}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[431]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray17}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[430]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray18}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[86]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray19}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[87]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray20}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[85]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray21}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[422]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray22}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[418]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray23}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[79]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray24}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[80]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray25}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[81]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray26}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[82]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray27}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[83]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray28}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[84]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray29}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[410]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray30}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[409]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Pinpoint data{SubArray31}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[77]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray32}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[78]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray33}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[76]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Pinpoint data{SubArray34}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

  
  
			group "ETHERNET_UDP_RX_BL1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint32_T_14[0]
				{
				 type:    SpeedHarm_ArrayDT7_157*
				 alias:   "Data"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int32_T_13[0]
				{
				 type:    int(32)*
				 alias:   "Message Size"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[0]
				{
				 type:    uint(8)*
				 alias:   "Status"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "dsethernetudp_rx" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint32_T_14[0]
					{
					 type:    SpeedHarm_ArrayDT7_157*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int32_T_13[0]
					{
					 type:    int(32)*
					 alias:   "Out2"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_boolean_T_20[0]
					{
					 type:    uint(8)*
					 alias:   "Out3"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}

					p_SpeedHarm_P_real_T_5[854]
					{
					 type:    SpeedHarm_ArrayDT0_27*
					 alias:   "P1"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[883]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P2"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[886]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P3"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[889]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P4"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[892]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P5"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[895]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P6"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[898]
					{
					 type:    SpeedHarm_ArrayDT0_18*
					 alias:   "P7"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[918]
					{
					 type:    SpeedHarm_ArrayDT0_18*
					 alias:   "P8"
					 flags:   PARAM
					}


				endgroup -- block-group "dsethernetudp_rx"



			endgroup -- subsystem-group "ETHERNET_UDP_RX_BL1"
  
  
			group "Pinpoint RX Handler" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[459]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[450]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray3}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[452]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray4}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[448]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray5}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[92]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray6}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[91]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray7}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[93]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray8}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray9}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[444]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray10}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[437]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray11}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[435]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray12}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[433]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray13}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[89]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray14}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[88]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray15}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[90]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray16}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[431]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray17}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[430]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray18}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[86]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray19}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[87]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray20}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[85]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray21}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[422]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray22}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[418]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray23}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[79]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray24}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[80]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray25}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[81]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray26}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[82]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray27}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[83]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray28}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[84]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray29}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[410]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray30}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[409]
				{
				 type:    flt(64,IEEE)*
				 alias:   "pinpoint data{SubArray31}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[77]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray32}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[78]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray33}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[76]
				{
				 type:    flt(32,IEEE)*
				 alias:   "pinpoint data{SubArray34}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Switch Case1" -- block-group
				{
				 block: "SwitchCase"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					-- Skipping output Out2
					-- Skipping output Out3
					-- Skipping output Out4
					-- Skipping output Out5
					-- Skipping output Out6
					-- Skipping output Out7


				endgroup -- block-group "Switch Case1"

				group "Clock" -- block-group
				{
				 block: "Clock"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[401]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Clock"

				group "Display" -- block-group
				{
				 block: "Display"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[1668]
					{
					 type:    uint(8)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}



				endgroup -- block-group "Display"

  
  
				group "Acceleration Handler" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[410]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[409]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[77]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[78]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[76]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "timestamp" -- block-group
					{
					 block: "Inport"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[410]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "timestamp"

  
  
					group "Down Accel" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[76]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Down accel"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit int" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[76]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[165]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[167]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[143]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[402]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[4]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[76]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[81]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[9]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit int"


					endgroup -- subsystem-group "Down Accel"
  
  
					group "Fwd Accel" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[77]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Fwd accel"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit int" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[77]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[169]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[171]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[144]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[403]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[5]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[77]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[83]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[10]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit int"


					endgroup -- subsystem-group "Fwd Accel"
  
  
					group "Right Accel" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[78]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Right accel"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit int" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[78]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[173]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[175]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[145]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[404]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[6]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[78]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[85]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[11]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit int"


					endgroup -- subsystem-group "Right Accel"
  
  
					group "UTC Time" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[409]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Time"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 64 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[409]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[177]
								{
								 type:    SpeedHarm_ArrayDT7_8*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[146]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[185]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[147]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[405]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Data Type Conversion1" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[406]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion1"

							group "Product" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[407]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Product"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[409]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[87]
								{
								 type:    SpeedHarm_ArrayDT3_1_8_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Add" -- block-group
							{
							 block: "Sum"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[408]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Add"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product"

							group "Dot Product1" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product1"



						endgroup -- subsystem-group "Parse 64 bit"


					endgroup -- subsystem-group "UTC Time"

					p_SpeedHarm_B_real32_T_12[76]
					{
					 type:    flt(32,IEEE)*
					 alias:   "down"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Down Accel/Down accel"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[77]
					{
					 type:    flt(32,IEEE)*
					 alias:   "fwd"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Fwd Accel/Fwd accel"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[78]
					{
					 type:    flt(32,IEEE)*
					 alias:   "right"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Right Accel/Right accel"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[410]
					{
					 type:    flt(64,IEEE)*
					 alias:   "timestamp"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/timestamp/Out1"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[409]
					{
					 type:    flt(64,IEEE)*
					 alias:   "utc time"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/UTC Time/Time"
					 flags:   LABEL|READONLY
					}

				endgroup -- subsystem-group "Acceleration Handler"
  
  
				group "Accuracy Handler" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[422]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[418]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[79]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[80]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[81]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[82]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray6}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[83]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray7}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[84]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray8}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "timestamp" -- block-group
					{
					 block: "Inport"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[422]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "timestamp"

  
  
					group "Horizontal Pos" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[79]
						{
						 type:    flt(32,IEEE)*
						 alias:   "north acc"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_12[80]
						{
						 type:    flt(32,IEEE)*
						 alias:   "east acc"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_12[81]
						{
						 type:    flt(32,IEEE)*
						 alias:   "down acc"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit single" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[79]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[129]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_boolean_T_14[1]
								{
								 type:    uint(8)*
								 alias:   "Value"
								 range:   < 0 ; 1 >
								 bitmask: 0x01
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[135]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[411]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[79]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[95]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

  
  
							group "Interpret byte array\nas single" -- subsystem-group
							{
							 flags: COLLAPSED
							 desc:  ""
							}

								p_SpeedHarm_B_real32_T_26[0]
								{
								 type:    flt(32,IEEE)*
								 alias:   "y"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}



							endgroup -- subsystem-group "Interpret byte array\nas single"


						endgroup -- subsystem-group "Parse 32 bit single"
  
  
						group "Parse 32 bit single1" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[80]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[133]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_boolean_T_14[2]
								{
								 type:    uint(8)*
								 alias:   "Value"
								 range:   < 0 ; 1 >
								 bitmask: 0x01
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[136]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[412]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[80]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[99]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

  
  
							group "Interpret byte array\nas single" -- subsystem-group
							{
							 flags: COLLAPSED
							 desc:  ""
							}

								p_SpeedHarm_B_real32_T_25[0]
								{
								 type:    flt(32,IEEE)*
								 alias:   "y"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}



							endgroup -- subsystem-group "Interpret byte array\nas single"


						endgroup -- subsystem-group "Parse 32 bit single1"
  
  
						group "Parse 32 bit single2" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[81]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[137]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_boolean_T_14[3]
								{
								 type:    uint(8)*
								 alias:   "Value"
								 range:   < 0 ; 1 >
								 bitmask: 0x01
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[137]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[413]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[81]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[103]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

  
  
							group "Interpret byte array\nas single" -- subsystem-group
							{
							 flags: COLLAPSED
							 desc:  ""
							}

								p_SpeedHarm_B_real32_T_24[0]
								{
								 type:    flt(32,IEEE)*
								 alias:   "y"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}



							endgroup -- subsystem-group "Interpret byte array\nas single"


						endgroup -- subsystem-group "Parse 32 bit single2"


					endgroup -- subsystem-group "Horizontal Pos"
  
  
					group "UTC Time" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[418]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Time"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 64 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[418]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[141]
								{
								 type:    SpeedHarm_ArrayDT7_8*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[138]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[149]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[139]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[414]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Data Type Conversion1" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[415]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion1"

							group "Product" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[416]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Product"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[418]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[107]
								{
								 type:    SpeedHarm_ArrayDT3_1_8_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Add" -- block-group
							{
							 block: "Sum"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[417]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Add"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product"

							group "Dot Product1" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product1"



						endgroup -- subsystem-group "Parse 64 bit"


					endgroup -- subsystem-group "UTC Time"
  
  
					group "Velocity" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[82]
						{
						 type:    flt(32,IEEE)*
						 alias:   "north vel acc"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_12[83]
						{
						 type:    flt(32,IEEE)*
						 alias:   "east vel acc"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_real32_T_12[84]
						{
						 type:    flt(32,IEEE)*
						 alias:   "down vel acc"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit single" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[82]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[153]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_boolean_T_14[4]
								{
								 type:    uint(8)*
								 alias:   "Value"
								 range:   < 0 ; 1 >
								 bitmask: 0x01
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[140]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[419]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[82]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[115]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

  
  
							group "Interpret byte array\nas single" -- subsystem-group
							{
							 flags: COLLAPSED
							 desc:  ""
							}

								p_SpeedHarm_B_real32_T_23[0]
								{
								 type:    flt(32,IEEE)*
								 alias:   "y"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}



							endgroup -- subsystem-group "Interpret byte array\nas single"


						endgroup -- subsystem-group "Parse 32 bit single"
  
  
						group "Parse 32 bit single1" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[83]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[157]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_boolean_T_14[5]
								{
								 type:    uint(8)*
								 alias:   "Value"
								 range:   < 0 ; 1 >
								 bitmask: 0x01
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[141]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[420]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[83]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[119]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

  
  
							group "Interpret byte array\nas single" -- subsystem-group
							{
							 flags: COLLAPSED
							 desc:  ""
							}

								p_SpeedHarm_B_real32_T_22[0]
								{
								 type:    flt(32,IEEE)*
								 alias:   "y"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}



							endgroup -- subsystem-group "Interpret byte array\nas single"


						endgroup -- subsystem-group "Parse 32 bit single1"
  
  
						group "Parse 32 bit single2" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[84]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[161]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_boolean_T_14[6]
								{
								 type:    uint(8)*
								 alias:   "Value"
								 range:   < 0 ; 1 >
								 bitmask: 0x01
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[142]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[421]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[84]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[123]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

  
  
							group "Interpret byte array\nas single" -- subsystem-group
							{
							 flags: COLLAPSED
							 desc:  ""
							}

								p_SpeedHarm_B_real32_T_21[0]
								{
								 type:    flt(32,IEEE)*
								 alias:   "y"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}



							endgroup -- subsystem-group "Interpret byte array\nas single"


						endgroup -- subsystem-group "Parse 32 bit single2"


					endgroup -- subsystem-group "Velocity"

					p_SpeedHarm_B_real32_T_12[81]
					{
					 type:    flt(32,IEEE)*
					 alias:   "down pos"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Horizontal Pos/down acc"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[84]
					{
					 type:    flt(32,IEEE)*
					 alias:   "down vel"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Velocity/down vel acc"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[80]
					{
					 type:    flt(32,IEEE)*
					 alias:   "east pos"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Horizontal Pos/east acc"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[83]
					{
					 type:    flt(32,IEEE)*
					 alias:   "east vel"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Velocity/east vel acc"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[79]
					{
					 type:    flt(32,IEEE)*
					 alias:   "north pos"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Horizontal Pos/north acc"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[82]
					{
					 type:    flt(32,IEEE)*
					 alias:   "north vel"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Velocity/north vel acc"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[422]
					{
					 type:    flt(64,IEEE)*
					 alias:   "timestamp"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/timestamp/Out1"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[418]
					{
					 type:    flt(64,IEEE)*
					 alias:   "utc time"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/UTC Time/Time"
					 flags:   LABEL|READONLY
					}

				endgroup -- subsystem-group "Accuracy Handler"
  
  
				group "Bad message" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "Bad message"
  
  
				group "Bad message2" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "Bad message2"
  
  
				group "Global Pose Handler" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[461]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[459]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[450]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[452]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[448]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[92]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray6}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[91]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray7}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[93]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray8}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "timestamp" -- block-group
					{
					 block: "Inport"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[461]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "timestamp"

  
  
					group "Altitude" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[448]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Altitude"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[448]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[3]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[7]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[114]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[447]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[14]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[448]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[170]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[813]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 32 bit"


					endgroup -- subsystem-group "Altitude"
  
  
					group "Latitude" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[450]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Latitiude"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[450]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[11]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[15]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[115]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[449]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[15]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[450]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[174]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[814]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 32 bit"


					endgroup -- subsystem-group "Latitude"
  
  
					group "Longitude" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[452]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Longitude"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[452]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[19]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[23]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[116]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[451]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[16]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[452]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[178]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[815]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 32 bit"


					endgroup -- subsystem-group "Longitude"
  
  
					group "Pitch" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[91]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Pitch"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[91]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[27]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[29]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[117]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[453]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[10]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[91]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[182]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[15]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit"


					endgroup -- subsystem-group "Pitch"
  
  
					group "Roll" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[92]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Roll"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[92]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[31]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[33]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[118]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[454]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[11]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[92]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[184]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[16]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit"


					endgroup -- subsystem-group "Roll"
  
  
					group "UTC Time" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[459]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Time"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 64 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[459]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[35]
								{
								 type:    SpeedHarm_ArrayDT7_8*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[119]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[43]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[120]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[455]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Data Type Conversion1" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[456]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion1"

							group "Product" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[457]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Product"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[459]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[186]
								{
								 type:    SpeedHarm_ArrayDT3_1_8_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Add" -- block-group
							{
							 block: "Sum"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[458]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Add"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product"

							group "Dot Product1" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product1"



						endgroup -- subsystem-group "Parse 64 bit"


					endgroup -- subsystem-group "UTC Time"
  
  
					group "Yaw" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[93]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Yaw"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[93]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[47]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[49]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[121]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[460]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[12]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[93]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[194]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[17]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit"


					endgroup -- subsystem-group "Yaw"

					p_SpeedHarm_B_real_T_10[448]
					{
					 type:    flt(64,IEEE)*
					 alias:   "altitude"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Altitude/Altitude"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[450]
					{
					 type:    flt(64,IEEE)*
					 alias:   "latitude"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Latitude/Latitiude"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[452]
					{
					 type:    flt(64,IEEE)*
					 alias:   "longitude"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Longitude/Longitude"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[91]
					{
					 type:    flt(32,IEEE)*
					 alias:   "pitch"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Pitch/Pitch"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[92]
					{
					 type:    flt(32,IEEE)*
					 alias:   "roll"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Roll/Roll"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[461]
					{
					 type:    flt(64,IEEE)*
					 alias:   "timestamp"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/timestamp/Out1"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[459]
					{
					 type:    flt(64,IEEE)*
					 alias:   "utc time"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/UTC Time/Time"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[93]
					{
					 type:    flt(32,IEEE)*
					 alias:   "yaw"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Yaw/Yaw"
					 flags:   LABEL|READONLY
					}

				endgroup -- subsystem-group "Global Pose Handler"
  
  
				group "Local Pose Handler" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[446]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[444]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[437]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[435]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[433]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[89]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray6}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[88]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray7}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[90]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray8}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "timestamp" -- block-group
					{
					 block: "Inport"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[446]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "timestamp"

  
  
					group "Down" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[433]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Altitude"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[433]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[51]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[55]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[122]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[432]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[11]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[433]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[144]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[810]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 32 bit"


					endgroup -- subsystem-group "Down"
  
  
					group "East" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[435]
						{
						 type:    flt(64,IEEE)*
						 alias:   "East"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[435]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[59]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[63]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[123]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[434]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[12]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[435]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[148]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[811]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 32 bit"


					endgroup -- subsystem-group "East"
  
  
					group "North" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[437]
						{
						 type:    flt(64,IEEE)*
						 alias:   "North"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 32 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[437]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[67]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[71]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[124]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[436]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[13]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[437]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[152]
								{
								 type:    SpeedHarm_ArrayDT3_1_4_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[812]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 32 bit"


					endgroup -- subsystem-group "North"
  
  
					group "Pitch" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[88]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Pitch"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[88]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[75]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[77]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[125]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[438]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[7]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[88]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[156]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[12]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit"


					endgroup -- subsystem-group "Pitch"
  
  
					group "Roll" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[89]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Roll"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[89]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[79]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[81]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[126]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[439]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[8]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[89]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[158]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[13]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit"


					endgroup -- subsystem-group "Roll"
  
  
					group "UTC Time" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[444]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Time"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 64 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[444]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[83]
								{
								 type:    SpeedHarm_ArrayDT7_8*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[127]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[91]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[128]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[440]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Data Type Conversion1" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[441]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion1"

							group "Product" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[442]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Product"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[444]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[160]
								{
								 type:    SpeedHarm_ArrayDT3_1_8_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Add" -- block-group
							{
							 block: "Sum"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[443]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Add"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product"

							group "Dot Product1" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product1"



						endgroup -- subsystem-group "Parse 64 bit"


					endgroup -- subsystem-group "UTC Time"
  
  
					group "Yaw" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[90]
						{
						 type:    flt(32,IEEE)*
						 alias:   "Yaw"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 16 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[90]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[95]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[97]
								{
								 type:    SpeedHarm_ArrayDT7_2*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[129]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[445]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int16_T_17[9]
								{
								 type:    int(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[90]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[168]
								{
								 type:    SpeedHarm_ArrayDT3_1_2_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint16_T_18[14]
								{
								 type:    uint(16)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 16 bit"


					endgroup -- subsystem-group "Yaw"

					p_SpeedHarm_B_real_T_10[433]
					{
					 type:    flt(64,IEEE)*
					 alias:   "down"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Down/Altitude"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[435]
					{
					 type:    flt(64,IEEE)*
					 alias:   "east"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/East/East"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[437]
					{
					 type:    flt(64,IEEE)*
					 alias:   "north"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/North/North"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[88]
					{
					 type:    flt(32,IEEE)*
					 alias:   "pitch"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Pitch/Pitch"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[89]
					{
					 type:    flt(32,IEEE)*
					 alias:   "roll"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Roll/Roll"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[446]
					{
					 type:    flt(64,IEEE)*
					 alias:   "timestamp"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/timestamp/Out1"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[444]
					{
					 type:    flt(64,IEEE)*
					 alias:   "utc time"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/UTC Time/Time"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[90]
					{
					 type:    flt(32,IEEE)*
					 alias:   "yaw"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Yaw/Yaw"
					 flags:   LABEL|READONLY
					}

				endgroup -- subsystem-group "Local Pose Handler"
  
  
				group "Parse Payload" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint8_T_19[196]
					{
					 type:    SpeedHarm_ArrayDT3_1_1472_Col*
					 alias:   "Payload"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_uint8_T_19[1668]
					{
					 type:    uint(8)*
					 alias:   "Signal ID"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Constant1" -- block-group
					{
					 block: "Constant"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						-- Skipping output Out1
						p_SpeedHarm_P_real_T_5[112]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Value"
						 flags:   PARAM
						}


					endgroup -- block-group "Constant1"

					group "Memory" -- block-group
					{
					 block: "Memory"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[462]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[113]
						{
						 type:    flt(64,IEEE)*
						 alias:   "X0"
						 flags:   PARAM
						}


					endgroup -- block-group "Memory"

					group "Sum" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[463]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Sum"

  
  
					group "32-bit array to 8-bit array" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_19[1670]
						{
						 type:    SpeedHarm_ArrayDT3_1_1472_Col*
						 alias:   "Byte Array"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						group "Assignment" -- block-group
						{
						 block: "Assignment"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_19[1670]
							{
							 type:    SpeedHarm_ArrayDT3_1_1472_Col*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Assignment"

						group "Shift\nArithmetic" -- block-group
						{
						 block: "ArithShift"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint32_T_14[819]
							{
							 type:    uint(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Shift\nArithmetic"

						group "Constant" -- block-group
						{
						 block: "Constant"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							-- Skipping output Out1
							p_SpeedHarm_P_real_T_5[111]
							{
							 type:    flt(64,IEEE)*
							 alias:   "Value"
							 flags:   PARAM
							}


						endgroup -- block-group "Constant"

						group "Constant1" -- block-group
						{
						 block: "Constant"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							-- Skipping output Out1
							p_SpeedHarm_P_int32_T_7[7]
							{
							 type:    int(32)*
							 alias:   "Value"
							 flags:   PARAM
							}


						endgroup -- block-group "Constant1"

						group "Constant2" -- block-group
						{
						 block: "Constant"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							-- Skipping output Out1
							p_SpeedHarm_P_int32_T_7[6]
							{
							 type:    int(32)*
							 alias:   "Value"
							 flags:   PARAM
							}


						endgroup -- block-group "Constant2"

						group "Constant3" -- block-group
						{
						 block: "Constant"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							-- Skipping output Out1
							p_SpeedHarm_P_int32_T_7[8]
							{
							 type:    int(32)*
							 alias:   "Value"
							 flags:   PARAM
							}


						endgroup -- block-group "Constant3"

						group "Convert" -- block-group
						{
						 block: "DataTypeConversion"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint32_T_14[816]
							{
							 type:    uint(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Convert"

						group "Data Type Conversion" -- block-group
						{
						 block: "DataTypeConversion"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint8_T_19[1669]
							{
							 type:    uint(8)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Data Type Conversion"

						group "convert" -- block-group
						{
						 block: "DataTypeConversion"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_real_T_10[464]
							{
							 type:    flt(64,IEEE)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "convert"

						group "For Iterator" -- block-group
						{
						 block: "ForIterator"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_int32_T_13[17]
							{
							 type:    int(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "For Iterator"

						group "Math\nFunction" -- block-group
						{
						 block: "Math"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_int32_T_13[19]
							{
							 type:    int(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Math\nFunction"

						group "Divide" -- block-group
						{
						 block: "Product"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_real_T_10[465]
							{
							 type:    flt(64,IEEE)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Divide"

						group "Product" -- block-group
						{
						 block: "Product"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint32_T_14[818]
							{
							 type:    uint(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Product"

						group "Rounding\nFunction" -- block-group
						{
						 block: "Rounding"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_real_T_10[466]
							{
							 type:    flt(64,IEEE)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Rounding\nFunction"

						group "Selector" -- block-group
						{
						 block: "Selector"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint32_T_14[817]
							{
							 type:    uint(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Selector"

						group "Bitwise\nOperator" -- block-group
						{
						 block: "S-Function"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_uint32_T_14[820]
							{
							 type:    uint(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							p_SpeedHarm_P_uint32_T_8[2]
							{
							 type:    uint(32)*
							 alias:   "BitMask"
							 flags:   PARAM
							}


						endgroup -- block-group "Bitwise\nOperator"

						group "Sum" -- block-group
						{
						 block: "Sum"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}
							p_SpeedHarm_B_int32_T_13[18]
							{
							 type:    int(32)*
							 alias:   "Out1"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}


						endgroup -- block-group "Sum"

  
  
						group "Initialize array output (zeros)" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_uint8_T_27[0]
							{
							 type:    SpeedHarm_ArrayDT3_1_1472_Col*
							 alias:   "y"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}



						endgroup -- subsystem-group "Initialize array output (zeros)"


					endgroup -- subsystem-group "32-bit array to 8-bit array"
  
  
					group "MATLAB Function" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_uint8_T_19[196]
						{
						 type:    SpeedHarm_ArrayDT3_1_1472_Col*
						 alias:   "payload"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_uint8_T_19[1668]
						{
						 type:    uint(8)*
						 alias:   "signal_id"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}



					endgroup -- subsystem-group "MATLAB Function"

					p_SpeedHarm_B_real_T_10[463]
					{
					 type:    flt(64,IEEE)*
					 alias:   "message counter"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Parse Payload/Sum/Out1"
					 flags:   LABEL|READONLY
					}

				endgroup -- subsystem-group "Parse Payload"
  
  
				group "Velocity State Handler" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[431]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray1}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[430]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1{SubArray2}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[86]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray3}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[87]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray4}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real32_T_12[85]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1{SubArray5}"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "timestamp" -- block-group
					{
					 block: "Inport"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[431]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "timestamp"

  
  
					group "Down" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[85]
						{
						 type:    flt(32,IEEE)*
						 alias:   "down"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 24 bit int" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[85]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Shift\nArithmetic" -- block-group
							{
							 block: "ArithShift"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[803]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}
								p_SpeedHarm_P_int16_T_11[0]
								{
								 type:    int(16)*
								 alias:   "Power2Exponent"
								 flags:   PARAM
								}


							endgroup -- block-group "Shift\nArithmetic"

							group "Shift\nArithmetic1" -- block-group
							{
							 block: "ArithShift"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[6]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}
								p_SpeedHarm_P_int16_T_11[1]
								{
								 type:    int(16)*
								 alias:   "Power2Exponent"
								 flags:   PARAM
								}


							endgroup -- block-group "Shift\nArithmetic1"

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[99]
								{
								 type:    SpeedHarm_ArrayDT7_3*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[102]
								{
								 type:    SpeedHarm_ArrayDT7_3*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[130]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[423]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[5]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "Input Type2" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[802]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type2"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[85]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[127]
								{
								 type:    SpeedHarm_ArrayDT3_1_3_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[801]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 24 bit int"


					endgroup -- subsystem-group "Down"
  
  
					group "Fwd" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[86]
						{
						 type:    flt(32,IEEE)*
						 alias:   "fwd"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 24 bit int" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[86]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Shift\nArithmetic" -- block-group
							{
							 block: "ArithShift"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[806]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}
								p_SpeedHarm_P_int16_T_11[2]
								{
								 type:    int(16)*
								 alias:   "Power2Exponent"
								 flags:   PARAM
								}


							endgroup -- block-group "Shift\nArithmetic"

							group "Shift\nArithmetic1" -- block-group
							{
							 block: "ArithShift"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[8]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}
								p_SpeedHarm_P_int16_T_11[3]
								{
								 type:    int(16)*
								 alias:   "Power2Exponent"
								 flags:   PARAM
								}


							endgroup -- block-group "Shift\nArithmetic1"

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[105]
								{
								 type:    SpeedHarm_ArrayDT7_3*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[108]
								{
								 type:    SpeedHarm_ArrayDT7_3*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[131]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[424]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[7]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "Input Type2" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[805]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type2"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[86]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[130]
								{
								 type:    SpeedHarm_ArrayDT3_1_3_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[804]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 24 bit int"


					endgroup -- subsystem-group "Fwd"
  
  
					group "Right" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real32_T_12[87]
						{
						 type:    flt(32,IEEE)*
						 alias:   "right"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 24 bit int" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real32_T_12[87]
							{
							 type:    flt(32,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Shift\nArithmetic" -- block-group
							{
							 block: "ArithShift"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[809]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}
								p_SpeedHarm_P_int16_T_11[4]
								{
								 type:    int(16)*
								 alias:   "Power2Exponent"
								 flags:   PARAM
								}


							endgroup -- block-group "Shift\nArithmetic"

							group "Shift\nArithmetic1" -- block-group
							{
							 block: "ArithShift"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[10]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}
								p_SpeedHarm_P_int16_T_11[5]
								{
								 type:    int(16)*
								 alias:   "Power2Exponent"
								 flags:   PARAM
								}


							endgroup -- block-group "Shift\nArithmetic1"

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[111]
								{
								 type:    SpeedHarm_ArrayDT7_3*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[114]
								{
								 type:    SpeedHarm_ArrayDT7_3*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[132]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[425]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Input Type" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_int32_T_13[9]
								{
								 type:    int(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type"

							group "Input Type2" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[808]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Input Type2"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real32_T_12[87]
								{
								 type:    flt(32,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[133]
								{
								 type:    SpeedHarm_ArrayDT3_1_3_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint32_T_14[807]
								{
								 type:    uint(32)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Dot Product"



						endgroup -- subsystem-group "Parse 24 bit int"


					endgroup -- subsystem-group "Right"
  
  
					group "UTC Time" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						p_SpeedHarm_B_real_T_10[430]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Time"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

  
  
						group "Parse 64 bit" -- subsystem-group
						{
						 flags: COLLAPSED
						 desc:  ""
						}

							p_SpeedHarm_B_real_T_10[430]
							{
							 type:    flt(64,IEEE)*
							 alias:   "output"
							 desc:    ""
							 flags:   OUTPUT|READONLY
							}

							group "Constant" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[117]
								{
								 type:    SpeedHarm_ArrayDT7_8*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant"

							group "Constant1" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[133]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant1"

							group "Constant2" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_uint32_T_8[125]
								{
								 type:    SpeedHarm_ArrayDT7_4*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Constant2"

							group "Factor" -- block-group
							{
							 block: "Constant"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1
								p_SpeedHarm_P_real_T_5[134]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Value"
								 flags:   PARAM
								}


							endgroup -- block-group "Factor"

							group "Data Type Conversion" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[426]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion"

							group "Data Type Conversion1" -- block-group
							{
							 block: "DataTypeConversion"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[427]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Data Type Conversion1"

							group "Product" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[428]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Product"

							group "multiply" -- block-group
							{
							 block: "Product"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[430]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "multiply"

							group "Selector" -- block-group
							{
							 block: "Selector"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_uint8_T_19[136]
								{
								 type:    SpeedHarm_ArrayDT3_1_8_Col*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Selector"

							group "Add" -- block-group
							{
							 block: "Sum"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								p_SpeedHarm_B_real_T_10[429]
								{
								 type:    flt(64,IEEE)*
								 alias:   "Out1"
								 desc:    ""
								 flags:   OUTPUT|READONLY
								}


							endgroup -- block-group "Add"

							group "Dot Product" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product"

							group "Dot Product1" -- block-group
							{
							 block: "DotProduct"
							 desc:  ""
							 flags: BLOCK|COLLAPSED
							}
								-- Skipping output Out1


							endgroup -- block-group "Dot Product1"



						endgroup -- subsystem-group "Parse 64 bit"


					endgroup -- subsystem-group "UTC Time"

					p_SpeedHarm_B_real32_T_12[85]
					{
					 type:    flt(32,IEEE)*
					 alias:   "down"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Down/down"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[86]
					{
					 type:    flt(32,IEEE)*
					 alias:   "forward"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Fwd/fwd"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real32_T_12[87]
					{
					 type:    flt(32,IEEE)*
					 alias:   "right"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Right/right"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[431]
					{
					 type:    flt(64,IEEE)*
					 alias:   "timestamp"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/timestamp/Out1"
					 flags:   LABEL|READONLY
					}
					p_SpeedHarm_B_real_T_10[430]
					{
					 type:    flt(64,IEEE)*
					 alias:   "utc time"
					 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/UTC Time/Time"
					 flags:   LABEL|READONLY
					}

				endgroup -- subsystem-group "Velocity State Handler"

				p_SpeedHarm_B_real_T_10[410]
				{
				 type:    flt(64,IEEE)*
				 alias:   "acceleration{SubArray1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[409]
				{
				 type:    flt(64,IEEE)*
				 alias:   "acceleration{SubArray2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[77]
				{
				 type:    flt(32,IEEE)*
				 alias:   "acceleration{SubArray3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[78]
				{
				 type:    flt(32,IEEE)*
				 alias:   "acceleration{SubArray4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[76]
				{
				 type:    flt(32,IEEE)*
				 alias:   "acceleration{SubArray5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[422]
				{
				 type:    flt(64,IEEE)*
				 alias:   "accuracy{SubArray1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[418]
				{
				 type:    flt(64,IEEE)*
				 alias:   "accuracy{SubArray2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[79]
				{
				 type:    flt(32,IEEE)*
				 alias:   "accuracy{SubArray3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[80]
				{
				 type:    flt(32,IEEE)*
				 alias:   "accuracy{SubArray4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[81]
				{
				 type:    flt(32,IEEE)*
				 alias:   "accuracy{SubArray5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[82]
				{
				 type:    flt(32,IEEE)*
				 alias:   "accuracy{SubArray6}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[83]
				{
				 type:    flt(32,IEEE)*
				 alias:   "accuracy{SubArray7}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[84]
				{
				 type:    flt(32,IEEE)*
				 alias:   "accuracy{SubArray8}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "global pose{SubArray1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[459]
				{
				 type:    flt(64,IEEE)*
				 alias:   "global pose{SubArray2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[450]
				{
				 type:    flt(64,IEEE)*
				 alias:   "global pose{SubArray3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[452]
				{
				 type:    flt(64,IEEE)*
				 alias:   "global pose{SubArray4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[448]
				{
				 type:    flt(64,IEEE)*
				 alias:   "global pose{SubArray5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[92]
				{
				 type:    flt(32,IEEE)*
				 alias:   "global pose{SubArray6}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[91]
				{
				 type:    flt(32,IEEE)*
				 alias:   "global pose{SubArray7}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[93]
				{
				 type:    flt(32,IEEE)*
				 alias:   "global pose{SubArray8}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[446]
				{
				 type:    flt(64,IEEE)*
				 alias:   "local pose{SubArray1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[444]
				{
				 type:    flt(64,IEEE)*
				 alias:   "local pose{SubArray2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[437]
				{
				 type:    flt(64,IEEE)*
				 alias:   "local pose{SubArray3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[435]
				{
				 type:    flt(64,IEEE)*
				 alias:   "local pose{SubArray4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[433]
				{
				 type:    flt(64,IEEE)*
				 alias:   "local pose{SubArray5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[89]
				{
				 type:    flt(32,IEEE)*
				 alias:   "local pose{SubArray6}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[88]
				{
				 type:    flt(32,IEEE)*
				 alias:   "local pose{SubArray7}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[90]
				{
				 type:    flt(32,IEEE)*
				 alias:   "local pose{SubArray8}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[431]
				{
				 type:    flt(64,IEEE)*
				 alias:   "velocity state{SubArray1}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[430]
				{
				 type:    flt(64,IEEE)*
				 alias:   "velocity state{SubArray2}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[86]
				{
				 type:    flt(32,IEEE)*
				 alias:   "velocity state{SubArray3}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[87]
				{
				 type:    flt(32,IEEE)*
				 alias:   "velocity state{SubArray4}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real32_T_12[85]
				{
				 type:    flt(32,IEEE)*
				 alias:   "velocity state{SubArray5}"
				 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "Pinpoint RX Handler"


		endgroup -- subsystem-group "SRX Pinpoint RX Handler"
  
  
		group "SRX Platform Initializer" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


  
  
			group "Can1Init" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "CAN_TYPE1_SETUP_M1_C1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


				endgroup -- subsystem-group "CAN_TYPE1_SETUP_M1_C1"


			endgroup -- subsystem-group "Can1Init"
  
  
			group "Can2Init" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "CAN_TYPE1_SETUP_M1_C2" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


				endgroup -- subsystem-group "CAN_TYPE1_SETUP_M1_C2"


			endgroup -- subsystem-group "Can2Init"
  
  
			group "Can3Init" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "CAN_TYPE1_SETUP_M2_C1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


				endgroup -- subsystem-group "CAN_TYPE1_SETUP_M2_C1"


			endgroup -- subsystem-group "Can3Init"
  
  
			group "SRX UDP Initializer" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "ETHERNET_UDP_SETUP_BL1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


  
  
					group "Background" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}

						-- Skipping output Outputport

					endgroup -- subsystem-group "Background"
  
  
					group "Common Hardware\nInterrupt Interface" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}


					endgroup -- subsystem-group "Common Hardware\nInterrupt Interface"
  
  
					group "Function-Call\nSubsystem" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}


						group "dsethernetudp_setup" -- block-group
						{
						 block: "S-Function"
						 desc:  ""
						 flags: BLOCK|COLLAPSED
						}


							p_SpeedHarm_P_real_T_5[150]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P1"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[153]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P2"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[156]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P3"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[159]
							{
							 type:    SpeedHarm_ArrayDT0_27*
							 alias:   "P4"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[188]
							{
							 type:    SpeedHarm_ArrayDT0_13*
							 alias:   "P5"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[203]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P6"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[206]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P7"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[209]
							{
							 type:    SpeedHarm_ArrayDT0_13*
							 alias:   "P8"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[224]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P9"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[227]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P10"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[230]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P11"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[233]
							{
							 type:    SpeedHarm_ArrayDT0_13*
							 alias:   "P12"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[248]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P13"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[251]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P14"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[254]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P15"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[257]
							{
							 type:    SpeedHarm_ArrayDT0_13*
							 alias:   "P16"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[272]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P17"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[275]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P18"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[278]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P19"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[281]
							{
							 type:    SpeedHarm_ArrayDT0_13*
							 alias:   "P20"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[296]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P21"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[299]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P22"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[302]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P23"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[305]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P24"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[308]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P25"
							 flags:   PARAM
							}
							p_SpeedHarm_P_real_T_5[311]
							{
							 type:    flt(64,IEEE)*
							 alias:   "P26"
							 flags:   PARAM
							}


						endgroup -- block-group "dsethernetudp_setup"



					endgroup -- subsystem-group "Function-Call\nSubsystem"


				endgroup -- subsystem-group "ETHERNET_UDP_SETUP_BL1"


			endgroup -- subsystem-group "SRX UDP Initializer"


		endgroup -- subsystem-group "SRX Platform Initializer"

		p_SpeedHarm_B_real_T_10[49]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Loop counter"
		 origin:  "SpeedHarm/Carma_Platform\n/Sum/Out1"
		 flags:   LABEL|READONLY
		}

	endgroup -- subsystem-group "Carma_Platform\n"
  
  
	group "DocBlock" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


  
  
		group "EmptySubsystem" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}




		endgroup -- subsystem-group "EmptySubsystem"


	endgroup -- subsystem-group "DocBlock"
  
  
	group "RTI Data" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


	endgroup -- subsystem-group "RTI Data"
  
  
	group "Read VehicleID" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		p_SpeedHarm_B_uint8_T_19[22]
		{
		 type:    uint(8)*
		 alias:   "vehicleID"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint16_T_18[4]
		{
		 type:    uint(16)*
		 alias:   "readError"
		 desc:    "No data (unused channel) "
		 flags:   OUTPUT|READONLY
		}

  
  
		group "FLASH_SETUP" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


		endgroup -- subsystem-group "FLASH_SETUP"
  
  
		group "RESTORE_FROM_FLASH_BL1" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint8_T_19[22]
			{
			 type:    uint(8)*
			 alias:   "vehID"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint16_T_18[4]
			{
			 type:    uint(16)*
			 alias:   "Status"
			 desc:    "No data (unused channel) "
			 flags:   OUTPUT|READONLY
			}

		endgroup -- subsystem-group "RESTORE_FROM_FLASH_BL1"


	endgroup -- subsystem-group "Read VehicleID"
  
  
	group "Speed Harm Control Code" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		-- Skipping output Control Data{SubArray1}
		-- Skipping output Control Data{SubArray2}
		-- Skipping output Control Data{SubArray3}
		-- Skipping output Control Data{SubArray4}
		-- Skipping output Control Data{SubArray5}
		p_SpeedHarm_B_uint8_T_19[77]
		{
		 type:    uint(8)*
		 alias:   "Control Data{SubArray6}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		-- Skipping output Control Data{SubArray7}
		-- Skipping output Control Data{SubArray8}
		-- Skipping output Control Data{SubArray9}
		-- Skipping output Control Data{SubArray10}
		p_SpeedHarm_B_uint8_T_19[76]
		{
		 type:    uint(8)*
		 alias:   "Control Data{SubArray11}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[79]
		{
		 type:    uint(8)*
		 alias:   "Control Data{SubArray12}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_12[73]
		{
		 type:    flt(32,IEEE)*
		 alias:   "Control Data{SubArray13}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[80]
		{
		 type:    uint(8)*
		 alias:   "Control Data{SubArray14}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_SpeedHarm_B_real32_T_12[74]
		{
		 type:    flt(32,IEEE)*
		 alias:   "Control Data{SubArray15}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		-- Skipping output Control Data{SubArray16}
		-- Skipping output Control Data{SubArray17}
		-- Skipping output Control Data{SubArray18}
		-- Skipping output Control Data{SubArray19}
		p_SpeedHarm_B_uint8_T_19[78]
		{
		 type:    uint(8)*
		 alias:   "Control Data{SubArray20}"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		-- Skipping output Control Data{SubArray21}
		-- Skipping output Control Data{SubArray22}
		-- Skipping output Control Data{SubArray23}
		-- Skipping output Control Data{SubArray24}
		-- Skipping output Control Data{SubArray25}
		-- Skipping output Control Data{SubArray26}
		-- Skipping output Log Data

		group "Data Store\nMemory" -- block-group
		{
		 block: "DataStoreMemory"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}

			p_SpeedHarm_P_AutoStateEnum_9[11]
			{
			 type:    enum SpeedHarm_AutoStateEnum*
			 alias:   "InitialValue"
			 flags:   PARAM
			}


		endgroup -- block-group "Data Store\nMemory"

		group "Data Store\nMemory1" -- block-group
		{
		 block: "DataStoreMemory"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}

			p_SpeedHarm_P_real_T_5[596]
			{
			 type:    flt(64,IEEE)*
			 alias:   "InitialValue"
			 flags:   PARAM
			}


		endgroup -- block-group "Data Store\nMemory1"

		group "Data Store\nMemory2" -- block-group
		{
		 block: "DataStoreMemory"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}

			p_SpeedHarm_P_real_T_5[597]
			{
			 type:    flt(64,IEEE)*
			 alias:   "InitialValue"
			 flags:   PARAM
			}


		endgroup -- block-group "Data Store\nMemory2"

		group "Bus\nSelector" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_boolean_T_20[66]
			{
			 type:    uint(8)*
			 alias:   "Out1"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[67]
			{
			 type:    uint(8)*
			 alias:   "Out2"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector"

		group "Bus\nSelector1" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real32_T_12[69]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[70]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out2"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[293]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out3"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[294]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out4"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[71]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out5"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector1"

		group "Bus\nSelector10" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1


		endgroup -- block-group "Bus\nSelector10"

		group "Bus\nSelector2" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_boolean_T_20[73]
			{
			 type:    uint(8)*
			 alias:   "Out1"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector2"

		group "Bus\nSelector3" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_uint8_T_19[71]
			{
			 type:    uint(8)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector3"

		group "Bus\nSelector4" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[295]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector4"

		group "Bus\nSelector5" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real32_T_12[72]
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector5"

		group "Bus\nSelector6" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[296]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[297]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out2"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector6"

		group "Bus\nSelector7" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[298]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[299]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out2"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector7"

		group "Bus\nSelector8" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1


		endgroup -- block-group "Bus\nSelector8"

		group "Bus\nSelector9" -- block-group
		{
		 block: "BusSelector"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_B_uint8_T_19[72]
			{
			 type:    uint(8)*
			 alias:   "Out2"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Bus\nSelector9"

		group "Constant" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_P_boolean_T_14[13]
			{
			 type:    uint(8)*
			 alias:   "Value"
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   PARAM
			}


		endgroup -- block-group "Constant"

		group "Cycle Duration" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_P_real_T_5[594]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "Cycle Duration"

		group "Max Accel" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_P_real_T_5[432]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "Max Accel"

		group "Veh Len m" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[394]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_P_real_T_5[595]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "Veh Len m"

		group "headway [s]" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_P_real_T_5[320]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "headway [s]"

		group "static gap [m]" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_SpeedHarm_P_real_T_5[321]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "static gap [m]"

		group "Data Store\nWrite" -- block-group
		{
		 block: "DataStoreWrite"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_AutoStateEnum_15[0]
			{
			 type:    enum SpeedHarm_AutoStateEnum*
			 alias:   "In1"
			 desc:    ""
			 flags:   SINK|READONLY
			}



		endgroup -- block-group "Data Store\nWrite"

		group "Data Store\nWrite2" -- block-group
		{
		 block: "DataStoreWrite"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}

			-- Skipping inport In1




		endgroup -- block-group "Data Store\nWrite2"

		group "Data Type Conversion" -- block-group
		{
		 block: "DataTypeConversion"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_uint8_T_19[76]
			{
			 type:    uint(8)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Data Type Conversion"

		group "Data Type Conversion1" -- block-group
		{
		 block: "DataTypeConversion"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_uint8_T_19[77]
			{
			 type:    uint(8)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Data Type Conversion1"

		group "Data Type Conversion5" -- block-group
		{
		 block: "DataTypeConversion"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_uint8_T_19[78]
			{
			 type:    uint(8)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Data Type Conversion5"

		group "Switch" -- block-group
		{
		 block: "Switch"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[393]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_P_uint8_T_13[4]
			{
			 type:    uint(8)*
			 alias:   "Threshold"
			 flags:   PARAM
			}


		endgroup -- block-group "Switch"

  
  
		group "Calculate Min Gap" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[301]
			{
			 type:    flt(64,IEEE)*
			 alias:   "min gap [m]"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Product" -- block-group
			{
			 block: "Product"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[300]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Product"

			group "Add" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[301]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Add"

  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"


		endgroup -- subsystem-group "Calculate Min Gap"
  
  
		group "Compare\nTo Constant" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint8_T_19[74]
			{
			 type:    uint(8)*
			 alias:   "y"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_AutoStateEnum_9[10]
				{
				 type:    enum SpeedHarm_AutoStateEnum*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Compare" -- block-group
			{
			 block: "RelationalOperator"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[74]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Compare"



		endgroup -- subsystem-group "Compare\nTo Constant"
  
  
		group "Compute Automation Source" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_AutoStateEnum_15[3]
			{
			 type:    enum SpeedHarm_AutoStateEnum*
			 alias:   "Auto Source"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[313]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[312]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

			group "Memory" -- block-group
			{
			 block: "Memory"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_AutoStateEnum_15[2]
				{
				 type:    enum SpeedHarm_AutoStateEnum*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_AutoStateEnum_9[8]
				{
				 type:    enum SpeedHarm_AutoStateEnum*
				 alias:   "X0"
				 flags:   PARAM
				}


			endgroup -- block-group "Memory"

			group "Product" -- block-group
			{
			 block: "Product"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[304]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Product"

			group "Subtract" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[305]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Subtract"

			group "Switch" -- block-group
			{
			 block: "Switch"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_AutoStateEnum_15[3]
				{
				 type:    enum SpeedHarm_AutoStateEnum*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[322]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Threshold"
				 flags:   PARAM
				}


			endgroup -- block-group "Switch"

			group "Switch1" -- block-group
			{
			 block: "Switch"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[303]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Switch1"

  
  
			group "Compare\nTo Constant" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[73]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[9]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[73]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Constant"
  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"
  
  
			group "Enumerated\nConstant" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output Out

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[1]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"



			endgroup -- subsystem-group "Enumerated\nConstant"
  
  
			group "Enumerated\nConstant2" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output Out

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[0]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"



			endgroup -- subsystem-group "Enumerated\nConstant2"


		endgroup -- subsystem-group "Compute Automation Source"
  
  
		group "Compute Automation State" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_AutoStateEnum_15[0]
			{
			 type:    enum SpeedHarm_AutoStateEnum*
			 alias:   "Auto State"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Multiport\nSwitch" -- block-group
			{
			 block: "MultiPortSwitch"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_AutoStateEnum_15[0]
				{
				 type:    enum SpeedHarm_AutoStateEnum*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Multiport\nSwitch"

			group "Add" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[70]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Add"

  
  
			group "Compare\nTo Zero" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[68]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[7]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[68]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Zero"
  
  
			group "Compare\nTo Zero1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint8_T_19[69]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_real_T_5[319]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint8_T_19[69]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Zero1"
  
  
			group "Enumerated\nConstant" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output Out

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[2]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"



			endgroup -- subsystem-group "Enumerated\nConstant"
  
  
			group "Enumerated\nConstant1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output Out

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[4]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"



			endgroup -- subsystem-group "Enumerated\nConstant1"
  
  
			group "Enumerated\nConstant2" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output Out

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[3]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"



			endgroup -- subsystem-group "Enumerated\nConstant2"


		endgroup -- subsystem-group "Compute Automation State"
  
  
		group "Control Input" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[320]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Aceel  Command Status{SubArray1}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[321]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Aceel  Command Status{SubArray2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[322]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Aceel  Command Status{SubArray3}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[323]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Aceel  Command Status{SubArray4}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Bus\nSelector" -- block-group
			{
			 block: "BusSelector"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[315]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[316]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[317]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out3"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[75]
				{
				 type:    uint(8)*
				 alias:   "Out4"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_AccelCommandMode_16[0]
				{
				 type:    enum SpeedHarm_AccelCommandMode*
				 alias:   "Out5"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nSelector"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[75]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Data Type Conversion1" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[76]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion1"

			group "Gain" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[318]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[433]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "Gain"

			group "Gain1" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[319]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[434]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "Gain1"

  
  
			group "SRX Accel Command" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[320]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Periodic Status{SubArray1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[321]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Periodic Status{SubArray2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[322]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Periodic Status{SubArray3}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[323]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Periodic Status{SubArray4}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

  
  
				group "AccelControl1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[320]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[321]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[322]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX delta time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[323]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX delay time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "AccelControl1"


			endgroup -- subsystem-group "SRX Accel Command"

			p_SpeedHarm_B_AccelCommandMode_16[0]
			{
			 type:    enum SpeedHarm_AccelCommandMode*
			 alias:   "<command_mode>"
			 origin:  "SpeedHarm/Speed Harm Control Code/Control Input/Bus\nSelector/Out5"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[315]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<max_accel_m_s2>"
			 origin:  "SpeedHarm/Speed Harm Control Code/Control Input/Bus\nSelector/Out1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[75]
			{
			 type:    uint(8)*
			 alias:   "<override_enabled>"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/Speed Harm Control Code/Control Input/Bus\nSelector/Out4"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[316]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<speed_command_m_s>"
			 origin:  "SpeedHarm/Speed Harm Control Code/Control Input/Bus\nSelector/Out2"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[317]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<wrench_effort_command>"
			 origin:  "SpeedHarm/Speed Harm Control Code/Control Input/Bus\nSelector/Out3"
			 flags:   LABEL|READONLY
			}

		endgroup -- subsystem-group "Control Input"
  
  
		group "DocBlock" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


  
  
			group "EmptySubsystem" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}




			endgroup -- subsystem-group "EmptySubsystem"


		endgroup -- subsystem-group "DocBlock"
  
  
		group "DocBlock1" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


  
  
			group "EmptySubsystem" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}




			endgroup -- subsystem-group "EmptySubsystem"


		endgroup -- subsystem-group "DocBlock1"
  
  
		group "Generate Speed Command" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_boolean_T_5_0_override_enabled
			{
			 type:    uint(8)*
			 alias:   "Speed Command{override_enabled}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_AccelCommandMode_5_0_command_mode
			{
			 type:    enum SpeedHarm_AccelCommandMode*
			 alias:   "Speed Command{command_mode}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_5_0_wrench_effort_command
			{
			 type:    flt(64,IEEE)*
			 alias:   "Speed Command{wrench_effort_command}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_5_0_speed_command_m_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Speed Command{speed_command_m_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_5_0_max_accel_m_s2
			{
			 type:    flt(64,IEEE)*
			 alias:   "Speed Command{max_accel_m_s2}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Bus\nAssignment" -- block-group
			{
			 block: "BusAssignment"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_5_0_override_enabled
				{
				 type:    uint(8)*
				 alias:   "Out1{override_enabled}"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_AccelCommandMode_5_0_command_mode
				{
				 type:    enum SpeedHarm_AccelCommandMode*
				 alias:   "Out1{command_mode}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_5_0_wrench_effort_command
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1{wrench_effort_command}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_5_0_speed_command_m_s
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1{speed_command_m_s}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_5_0_max_accel_m_s2
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1{max_accel_m_s2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nAssignment"

			group "Accel Zero Command" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1


			endgroup -- block-group "Accel Zero Command"

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_AccelCommandMode_10[0]
				{
				 type:    enum SpeedHarm_AccelCommandMode*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[323]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"


		endgroup -- subsystem-group "Generate Speed Command"
  
  
		group "Lightbar Controller" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_boolean_T_14[8]
				{
				 type:    uint(8)*
				 alias:   "Value"
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_boolean_T_14[9]
				{
				 type:    uint(8)*
				 alias:   "Value"
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

			group "Constant2" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_boolean_T_14[10]
				{
				 type:    uint(8)*
				 alias:   "Value"
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   PARAM
				}


			endgroup -- block-group "Constant2"

			group "Constant3" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_boolean_T_14[11]
				{
				 type:    uint(8)*
				 alias:   "Value"
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   PARAM
				}


			endgroup -- block-group "Constant3"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_AutoStateEnum_15[1]
				{
				 type:    enum SpeedHarm_AutoStateEnum*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

  
  
			group "Compare\nTo Constant1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[68]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[5]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[68]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Constant1"
  
  
			group "Compare\nTo Constant2" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[69]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[6]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[69]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Constant2"
  
  
			group "Compare\nTo Constant3" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[70]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_AutoStateEnum_9[7]
					{
					 type:    enum SpeedHarm_AutoStateEnum*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[70]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Constant3"
  
  
			group "Detect\nChange" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[72]
				{
				 type:    uint(8)*
				 alias:   "Y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "FixPt\nRelational\nOperator" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[72]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "FixPt\nRelational\nOperator"

				group "Delay Input1" -- block-group
				{
				 block: "UnitDelay"
				 desc:  "\nStore in Global RAM"
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[71]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_boolean_T_14[12]
					{
					 type:    uint(8)*
					 alias:   "InitialCondition"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Delay Input1"


				p_SpeedHarm_B_boolean_T_20[71]
				{
				 type:    uint(8)*
				 alias:   "U(k-1)"
				 bitmask: 0x01
				 range:   < 0 ; 1 >
				 origin:  "SpeedHarm/Speed Harm Control Code/Lightbar Controller/Detect\nChange/Delay Input1/Out1"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "Detect\nChange"
  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"
  
  
			group "SRX Update Front Lights" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[399]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{SubArray1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[400]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{SubArray2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

  
  
				group "FrontLightControl" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[399]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[400]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "FrontLightControl"


			endgroup -- subsystem-group "SRX Update Front Lights"
  
  
			group "SRX Update Rear Lights" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[397]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{SubArray1}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[398]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Status{SubArray2}"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

  
  
				group "RearLightControl" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[397]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_real_T_10[398]
					{
					 type:    flt(64,IEEE)*
					 alias:   "TX time"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

				endgroup -- subsystem-group "RearLightControl"


			endgroup -- subsystem-group "SRX Update Rear Lights"
  
  
			group "MATLAB Function" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[85]
				{
				 type:    SpeedHarm_ArrayDT8_1_4_Col*
				 alias:   "lightbar"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}



			endgroup -- subsystem-group "MATLAB Function"


		endgroup -- subsystem-group "Lightbar Controller"
  
  
		group "Radar -> DSRC Data Selector" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint8_T_19[79]
			{
			 type:    uint(8)*
			 alias:   "P_Dis"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[73]
			{
			 type:    flt(32,IEEE)*
			 alias:   "P_RelSpd"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[80]
			{
			 type:    uint(8)*
			 alias:   "L_Dis"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[74]
			{
			 type:    flt(32,IEEE)*
			 alias:   "L_RelSpd"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Bus\nSelector3" -- block-group
			{
			 block: "BusSelector"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1


			endgroup -- block-group "Bus\nSelector3"

			group "Bus\nSelector4" -- block-group
			{
			 block: "BusSelector"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[324]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[325]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nSelector4"

			group "Bus\nSelector5" -- block-group
			{
			 block: "BusSelector"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[326]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[327]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out2"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nSelector5"

			group "Data Type Conversion1" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[79]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion1"

			group "Data Type Conversion2" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[73]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion2"

			group "Data Type Conversion3" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[80]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion3"

			group "Data Type Conversion4" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real32_T_12[74]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion4"


			p_SpeedHarm_B_real_T_10[324]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<FwdFusTrkALongPos>{Occurence1}"
			 origin:  "SpeedHarm/Speed Harm Control Code/Radar -> DSRC Data Selector/Bus\nSelector4/Out1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[326]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<FwdFusTrkALongPos>{Occurence2}"
			 origin:  "SpeedHarm/Speed Harm Control Code/Radar -> DSRC Data Selector/Bus\nSelector5/Out1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[325]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<FwdFusTrkARelLongVel>{Occurence1}"
			 origin:  "SpeedHarm/Speed Harm Control Code/Radar -> DSRC Data Selector/Bus\nSelector4/Out2"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[327]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<FwdFusTrkARelLongVel>{Occurence2}"
			 origin:  "SpeedHarm/Speed Harm Control Code/Radar -> DSRC Data Selector/Bus\nSelector5/Out2"
			 flags:   LABEL|READONLY
			}
			-- Skipping label "<object_list>"


		endgroup -- subsystem-group "Radar -> DSRC Data Selector"
  
  
		group "Radar Target Speed" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[349]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Speed"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Bus\nSelector" -- block-group
			{
			 block: "BusSelector"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[328]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nSelector"

			group "If" -- block-group
			{
			 block: "If"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				-- Skipping output Out2


			endgroup -- block-group "If"

			group "Merge" -- block-group
			{
			 block: "Merge"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[349]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Merge"

  
  
			group "Compare\nTo Constant" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_boolean_T_20[77]
				{
				 type:    uint(8)*
				 alias:   "y"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_uint8_T_13[2]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Compare" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[77]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Compare"



			endgroup -- subsystem-group "Compare\nTo Constant"
  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"
  
  
			group "If Action\nSubsystem" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[349]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Lead Vehicle Speed"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Bus\nSelector" -- block-group
				{
				 block: "BusSelector"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real32_T_12[75]
					{
					 type:    flt(32,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Bus\nSelector"

				group "Sum" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[349]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sum"


				p_SpeedHarm_B_real32_T_12[75]
				{
				 type:    flt(32,IEEE)*
				 alias:   "<value>"
				 origin:  "SpeedHarm/Speed Harm Control Code/Radar Target Speed/If Action\nSubsystem/Bus\nSelector/Out1"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "If Action\nSubsystem"
  
  
			group "If Action\nSubsystem1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[349]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[349]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[314]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"



			endgroup -- subsystem-group "If Action\nSubsystem1"

			p_SpeedHarm_B_real_T_10[328]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<FwdFusTrkARelLongVel>"
			 origin:  "SpeedHarm/Speed Harm Control Code/Radar Target Speed/Bus\nSelector/Out1"
			 flags:   LABEL|READONLY
			}

		endgroup -- subsystem-group "Radar Target Speed"
  
  
		group "Radar Validation" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[329]
			{
			 type:    flt(64,IEEE)*
			 alias:   "relative speed [m/s]"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[302]
			{
			 type:    flt(64,IEEE)*
			 alias:   "current gap [m]"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[316]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[315]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

			group "Switch" -- block-group
			{
			 block: "Switch"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[302]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_uint8_T_13[1]
				{
				 type:    uint(8)*
				 alias:   "Threshold"
				 flags:   PARAM
				}


			endgroup -- block-group "Switch"

			group "Switch1" -- block-group
			{
			 block: "Switch"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[329]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_uint8_T_13[3]
				{
				 type:    uint(8)*
				 alias:   "Threshold"
				 flags:   PARAM
				}


			endgroup -- block-group "Switch1"

  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"


		endgroup -- subsystem-group "Radar Validation"
  
  
		group "SRX PC2 UDP Handler" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint16_T_18[8]
			{
			 type:    uint(16)*
			 alias:   "Status"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[307]
			{
			 type:    flt(64,IEEE)*
			 alias:   "msg_type"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[308]
			{
			 type:    flt(64,IEEE)*
			 alias:   "payload_length"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[311]
			{
			 type:    flt(64,IEEE)*
			 alias:   "speed_cmd [m/s]"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[310]
			{
			 type:    flt(64,IEEE)*
			 alias:   "discrete_cmd"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int32_T_13[4]
			{
			 type:    int(32)*
			 alias:   "msg_size"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[74]
			{
			 type:    uint(8)*
			 alias:   "msg_status"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_int32_T_7[9]
				{
				 type:    int(32)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[330]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Data Type Conversion1" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[338]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion1"

			group "FPscaleDn" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[311]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[430]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleDn"

			group "FPscaleUp" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[337]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real32_T_6[2]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp"

			group "FPscaleUp1" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[336]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[438]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp1"

			group "FPscaleUp2" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[335]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[437]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp2"

			group "FPscaleUp3" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[334]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real32_T_6[1]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp3"

			group "FPscaleUp4" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[333]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real32_T_6[0]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp4"

			group "FPscaleUp5" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[332]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[436]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp5"

			group "FPscaleUp6" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[331]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[435]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "FPscaleUp6"

			group "DSDecode32 " -- block-group
			{
			 block: "S-Function"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[307]
				{
				 type:    SpeedHarm_ArrayDT0_4*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				p_SpeedHarm_P_real_T_5[411]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P1"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[414]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P2"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[417]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P3"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[420]
				{
				 type:    SpeedHarm_ArrayDT0_4*
				 alias:   "P4"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[426]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P5"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[429]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P6"
				 flags:   PARAM
				}


			endgroup -- block-group "DSDecode32 "

			group "DSEncode1" -- block-group
			{
			 block: "S-Function"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint32_T_14[796]
				{
				 type:    SpeedHarm_ArrayDT7_5*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				p_SpeedHarm_P_real_T_5[441]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P1"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[444]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P2"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[447]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P3"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[450]
				{
				 type:    SpeedHarm_ArrayDT0_9*
				 alias:   "P4"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[461]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P5"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[464]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P6"
				 flags:   PARAM
				}


			endgroup -- block-group "DSEncode1"

  
  
			group "SRX PC2 UDP RX Handler" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint32_T_14[794]
				{
				 type:    SpeedHarm_ArrayDT7_2*
				 alias:   "UDP RX Data"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int32_T_13[4]
				{
				 type:    int(32)*
				 alias:   "cmd_msg_size"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[74]
				{
				 type:    uint(8)*
				 alias:   "cmd_msg_status"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}

  
  
				group "ETHERNET_UDP_RX_COMMAND" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint32_T_14[794]
					{
					 type:    SpeedHarm_ArrayDT7_2*
					 alias:   "Data"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_int32_T_13[4]
					{
					 type:    int(32)*
					 alias:   "Message Size"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_B_boolean_T_20[74]
					{
					 type:    uint(8)*
					 alias:   "Status"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}

					group "dsethernetudp_rx" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint32_T_14[794]
						{
						 type:    SpeedHarm_ArrayDT7_2*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_int32_T_13[4]
						{
						 type:    int(32)*
						 alias:   "Out2"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_B_boolean_T_20[74]
						{
						 type:    uint(8)*
						 alias:   "Out3"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}

						p_SpeedHarm_P_real_T_5[327]
						{
						 type:    SpeedHarm_ArrayDT0_27*
						 alias:   "P1"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[356]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P2"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[359]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P3"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[362]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P4"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[365]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P5"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[368]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P6"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[371]
						{
						 type:    SpeedHarm_ArrayDT0_18*
						 alias:   "P7"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[391]
						{
						 type:    SpeedHarm_ArrayDT0_18*
						 alias:   "P8"
						 flags:   PARAM
						}


					endgroup -- block-group "dsethernetudp_rx"



				endgroup -- subsystem-group "ETHERNET_UDP_RX_COMMAND"

				p_SpeedHarm_B_uint32_T_14[794]
				{
				 type:    SpeedHarm_ArrayDT7_2*
				 alias:   "Data from PC2"
				 origin:  "SpeedHarm/Speed Harm Control Code/SRX PC2 UDP Handler/SRX PC2 UDP RX Handler/ETHERNET_UDP_RX_COMMAND/Data"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "SRX PC2 UDP RX Handler"
  
  
			group "SRX PC2 UDP TX Handler" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint16_T_18[8]
				{
				 type:    uint(16)*
				 alias:   "Status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant1" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_boolean_T_14[14]
					{
					 type:    uint(8)*
					 alias:   "Value"
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   PARAM
					}


				endgroup -- block-group "Constant1"

  
  
				group "ETHERNET_UDP_TX_BL1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_uint16_T_18[8]
					{
					 type:    uint(16)*
					 alias:   "Status"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "dsethernetudp_tx" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_uint16_T_18[8]
						{
						 type:    uint(16)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}

						p_SpeedHarm_P_real_T_5[467]
						{
						 type:    SpeedHarm_ArrayDT0_27*
						 alias:   "P1"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[496]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P2"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[499]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P3"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[502]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P4"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[505]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P5"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[508]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P6"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[511]
						{
						 type:    flt(64,IEEE)*
						 alias:   "P7"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[514]
						{
						 type:    SpeedHarm_ArrayDT0_18*
						 alias:   "P8"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[534]
						{
						 type:    SpeedHarm_ArrayDT0_18*
						 alias:   "P9"
						 flags:   PARAM
						}


					endgroup -- block-group "dsethernetudp_tx"



				endgroup -- subsystem-group "ETHERNET_UDP_TX_BL1"


			endgroup -- subsystem-group "SRX PC2 UDP TX Handler"


		endgroup -- subsystem-group "SRX PC2 UDP Handler"
  
  
		group "Speed Control" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[355]
			{
			 type:    flt(64,IEEE)*
			 alias:   "RawSpdCmd"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_10[358]
			{
			 type:    flt(64,IEEE)*
			 alias:   "SpdCmd"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[562]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[563]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

			group "Gain" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[350]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[564]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "Gain"

			group "Gain1" -- block-group
			{
			 block: "Gain"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[340]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[552]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Gain"
				 flags:   PARAM
				}


			endgroup -- block-group "Gain1"

			group "Scope" -- block-group
			{
			 block: "Scope"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[340]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1{SubArray1}"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real_T_10[348]
				{
				 type:    flt(64,IEEE)*
				 alias:   "In1{SubArray2}"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Scope"

			group "Sum" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[355]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Sum"

			group "Sum1" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[356]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Sum1"

			group "Sum3" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[339]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Sum3"

  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"
  
  
			group "PID Controller" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[348]
				{
				 type:    flt(64,IEEE)*
				 alias:   "y"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Filter" -- block-group
				{
				 block: "DiscreteIntegrator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[344]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[557]
					{
					 type:    flt(64,IEEE)*
					 alias:   "gainval"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[558]
					{
					 type:    flt(64,IEEE)*
					 alias:   "InitialCondition"
					 flags:   PARAM
					}


				endgroup -- block-group "Filter"

				group "Integrator" -- block-group
				{
				 block: "DiscreteIntegrator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[342]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[554]
					{
					 type:    flt(64,IEEE)*
					 alias:   "gainval"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[555]
					{
					 type:    flt(64,IEEE)*
					 alias:   "InitialCondition"
					 flags:   PARAM
					}


				endgroup -- block-group "Integrator"

				group "Derivative Gain" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[343]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[556]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Derivative Gain"

				group "Filter Coefficient" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[346]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[559]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Filter Coefficient"

				group "Integral Gain" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[351]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[565]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Integral Gain"

				group "Kb" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[353]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[566]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Kb"

				group "Proportional Gain" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[341]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[553]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Proportional Gain"

				group "Saturation" -- block-group
				{
				 block: "Saturate"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[348]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[560]
					{
					 type:    flt(64,IEEE)*
					 alias:   "UpperLimit"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[561]
					{
					 type:    flt(64,IEEE)*
					 alias:   "LowerLimit"
					 flags:   PARAM
					}


				endgroup -- block-group "Saturation"

				group "Sum" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[347]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sum"

				group "SumD" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[345]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "SumD"

				group "SumI1" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[354]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "SumI1"

				group "SumI2" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[352]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "SumI2"



			endgroup -- subsystem-group "PID Controller"
  
  
			group "Saturation\nDynamic" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[358]
				{
				 type:    flt(64,IEEE)*
				 alias:   "y"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "LowerRelop1" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[78]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "LowerRelop1"

				group "UpperRelop" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[79]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "UpperRelop"

				group "Data Type\nPropagation" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[355]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[355]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[357]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}



				endgroup -- block-group "Data Type\nPropagation"

				group "Switch" -- block-group
				{
				 block: "Switch"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[357]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Switch"

				group "Switch2" -- block-group
				{
				 block: "Switch"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[358]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Switch2"

				group "Data Type\nDuplicate" -- block-group
				{
				 block: "DataTypeDuplicate"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[358]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[357]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}



				endgroup -- block-group "Data Type\nDuplicate"



			endgroup -- subsystem-group "Saturation\nDynamic"

			p_SpeedHarm_B_real_T_10[355]
			{
			 type:    flt(64,IEEE)*
			 alias:   "V_selfCmdRaw"
			 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/Sum/Out1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[340]
			{
			 type:    flt(64,IEEE)*
			 alias:   "gap_error"
			 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/Gain1/Out1"
			 flags:   LABEL|READONLY
			}

		endgroup -- subsystem-group "Speed Control"
  
  
		group "Speed Limit" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[384]
			{
			 type:    flt(64,IEEE)*
			 alias:   "speed command [m/s]"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[82]
			{
			 type:    uint(8)*
			 alias:   "speed limited"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[567]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Relational\nOperator" -- block-group
			{
			 block: "RelationalOperator"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_boolean_T_20[82]
				{
				 type:    uint(8)*
				 alias:   "Out1"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Relational\nOperator"

			group "Add" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[359]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Add"

  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"
  
  
			group "Saturation\nDynamic" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[384]
				{
				 type:    flt(64,IEEE)*
				 alias:   "y"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "LowerRelop1" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[83]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "LowerRelop1"

				group "UpperRelop" -- block-group
				{
				 block: "RelationalOperator"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_boolean_T_20[84]
					{
					 type:    uint(8)*
					 alias:   "Out1"
					 desc:    ""
					 range:   < 0 ; 1 >
					 bitmask: 0x01
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "UpperRelop"

				group "Data Type\nPropagation" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[382]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[382]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[383]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In3"
					 desc:    ""
					 flags:   SINK|READONLY
					}



				endgroup -- block-group "Data Type\nPropagation"

				group "Switch" -- block-group
				{
				 block: "Switch"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[383]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Switch"

				group "Switch2" -- block-group
				{
				 block: "Switch"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[384]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Switch2"

				group "Data Type\nDuplicate" -- block-group
				{
				 block: "DataTypeDuplicate"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[384]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In1"
					 desc:    ""
					 flags:   SINK|READONLY
					}
					p_SpeedHarm_B_real_T_10[383]
					{
					 type:    flt(64,IEEE)*
					 alias:   "In2"
					 desc:    ""
					 flags:   SINK|READONLY
					}



				endgroup -- block-group "Data Type\nDuplicate"



			endgroup -- subsystem-group "Saturation\nDynamic"
  
  
			group "Speed Control" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_real_T_10[380]
				{
				 type:    flt(64,IEEE)*
				 alias:   "RawSpdCmd"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[382]
				{
				 type:    flt(64,IEEE)*
				 alias:   "SpdCmd"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "Constant" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_real_T_5[589]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant"

				group "Constant1" -- block-group
				{
				 block: "Constant"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					-- Skipping output Out1
					p_SpeedHarm_P_real_T_5[569]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Value"
					 flags:   PARAM
					}


				endgroup -- block-group "Constant1"

				group "Gain" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[360]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[568]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Gain"

				group "Gain1" -- block-group
				{
				 block: "Gain"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[371]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}
					p_SpeedHarm_P_real_T_5[579]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Gain"
					 flags:   PARAM
					}


				endgroup -- block-group "Gain1"

				group "Sum" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[380]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sum"

				group "Sum1" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[361]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sum1"

				group "Sum3" -- block-group
				{
				 block: "Sum"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_real_T_10[370]
					{
					 type:    flt(64,IEEE)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}


				endgroup -- block-group "Sum3"

  
  
				group "DocBlock" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}


  
  
					group "EmptySubsystem" -- subsystem-group
					{
					 flags: COLLAPSED
					 desc:  ""
					}




					endgroup -- subsystem-group "EmptySubsystem"


				endgroup -- subsystem-group "DocBlock"
  
  
				group "PID Controller" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[379]
					{
					 type:    flt(64,IEEE)*
					 alias:   "y"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Filter" -- block-group
					{
					 block: "DiscreteIntegrator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[375]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[584]
						{
						 type:    flt(64,IEEE)*
						 alias:   "gainval"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[585]
						{
						 type:    flt(64,IEEE)*
						 alias:   "InitialCondition"
						 flags:   PARAM
						}


					endgroup -- block-group "Filter"

					group "Integrator" -- block-group
					{
					 block: "DiscreteIntegrator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[373]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[581]
						{
						 type:    flt(64,IEEE)*
						 alias:   "gainval"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[582]
						{
						 type:    flt(64,IEEE)*
						 alias:   "InitialCondition"
						 flags:   PARAM
						}


					endgroup -- block-group "Integrator"

					group "Derivative Gain" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[374]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[583]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Derivative Gain"

					group "Filter Coefficient" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[377]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[586]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Filter Coefficient"

					group "Integral Gain" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[385]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[590]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Integral Gain"

					group "Kb" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[387]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[591]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Kb"

					group "Proportional Gain" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[372]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[580]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Proportional Gain"

					group "Saturation" -- block-group
					{
					 block: "Saturate"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[379]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[587]
						{
						 type:    flt(64,IEEE)*
						 alias:   "UpperLimit"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[588]
						{
						 type:    flt(64,IEEE)*
						 alias:   "LowerLimit"
						 flags:   PARAM
						}


					endgroup -- block-group "Saturation"

					group "Sum" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[378]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Sum"

					group "SumD" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[376]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "SumD"

					group "SumI1" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[388]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "SumI1"

					group "SumI2" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[386]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "SumI2"



				endgroup -- subsystem-group "PID Controller"
  
  
				group "PID Controller1" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[369]
					{
					 type:    flt(64,IEEE)*
					 alias:   "y"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "Filter" -- block-group
					{
					 block: "DiscreteIntegrator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[365]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[574]
						{
						 type:    flt(64,IEEE)*
						 alias:   "gainval"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[575]
						{
						 type:    flt(64,IEEE)*
						 alias:   "InitialCondition"
						 flags:   PARAM
						}


					endgroup -- block-group "Filter"

					group "Integrator" -- block-group
					{
					 block: "DiscreteIntegrator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[363]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[571]
						{
						 type:    flt(64,IEEE)*
						 alias:   "gainval"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[572]
						{
						 type:    flt(64,IEEE)*
						 alias:   "InitialCondition"
						 flags:   PARAM
						}


					endgroup -- block-group "Integrator"

					group "Derivative Gain" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[364]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[573]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Derivative Gain"

					group "Filter Coefficient" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[367]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[576]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Filter Coefficient"

					group "Integral Gain" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[389]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[592]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Integral Gain"

					group "Kb" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[391]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[593]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Kb"

					group "Proportional Gain" -- block-group
					{
					 block: "Gain"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[362]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[570]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Gain"
						 flags:   PARAM
						}


					endgroup -- block-group "Proportional Gain"

					group "Saturation" -- block-group
					{
					 block: "Saturate"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[369]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}
						p_SpeedHarm_P_real_T_5[577]
						{
						 type:    flt(64,IEEE)*
						 alias:   "UpperLimit"
						 flags:   PARAM
						}
						p_SpeedHarm_P_real_T_5[578]
						{
						 type:    flt(64,IEEE)*
						 alias:   "LowerLimit"
						 flags:   PARAM
						}


					endgroup -- block-group "Saturation"

					group "Sum" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[368]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Sum"

					group "SumD" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[366]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "SumD"

					group "SumI1" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[392]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "SumI1"

					group "SumI2" -- block-group
					{
					 block: "Sum"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[390]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "SumI2"



				endgroup -- subsystem-group "PID Controller1"
  
  
				group "Saturation\nDynamic" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}

					p_SpeedHarm_B_real_T_10[382]
					{
					 type:    flt(64,IEEE)*
					 alias:   "y"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					group "LowerRelop1" -- block-group
					{
					 block: "RelationalOperator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_boolean_T_20[80]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "LowerRelop1"

					group "UpperRelop" -- block-group
					{
					 block: "RelationalOperator"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_boolean_T_20[81]
						{
						 type:    uint(8)*
						 alias:   "Out1"
						 desc:    ""
						 range:   < 0 ; 1 >
						 bitmask: 0x01
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "UpperRelop"

					group "Data Type\nPropagation" -- block-group
					{
					 block: "S-Function"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[380]
						{
						 type:    flt(64,IEEE)*
						 alias:   "In1"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real_T_10[380]
						{
						 type:    flt(64,IEEE)*
						 alias:   "In2"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real_T_10[381]
						{
						 type:    flt(64,IEEE)*
						 alias:   "In3"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Type\nPropagation"

					group "Switch" -- block-group
					{
					 block: "Switch"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[381]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Switch"

					group "Switch2" -- block-group
					{
					 block: "Switch"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[382]
						{
						 type:    flt(64,IEEE)*
						 alias:   "Out1"
						 desc:    ""
						 flags:   OUTPUT|READONLY
						}


					endgroup -- block-group "Switch2"

					group "Data Type\nDuplicate" -- block-group
					{
					 block: "DataTypeDuplicate"
					 desc:  ""
					 flags: BLOCK|COLLAPSED
					}
						p_SpeedHarm_B_real_T_10[382]
						{
						 type:    flt(64,IEEE)*
						 alias:   "In1"
						 desc:    ""
						 flags:   SINK|READONLY
						}
						p_SpeedHarm_B_real_T_10[381]
						{
						 type:    flt(64,IEEE)*
						 alias:   "In2"
						 desc:    ""
						 flags:   SINK|READONLY
						}



					endgroup -- block-group "Data Type\nDuplicate"



				endgroup -- subsystem-group "Saturation\nDynamic"

				p_SpeedHarm_B_real_T_10[380]
				{
				 type:    flt(64,IEEE)*
				 alias:   "V_selfCmdRaw"
				 origin:  "SpeedHarm/Speed Harm Control Code/Speed Limit/Speed Control/Sum/Out1"
				 flags:   LABEL|READONLY
				}
				p_SpeedHarm_B_real_T_10[371]
				{
				 type:    flt(64,IEEE)*
				 alias:   "gap_error"
				 origin:  "SpeedHarm/Speed Harm Control Code/Speed Limit/Speed Control/Gain1/Out1"
				 flags:   LABEL|READONLY
				}

			endgroup -- subsystem-group "Speed Control"


		endgroup -- subsystem-group "Speed Limit"
  
  
		group "Speed Validation" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_real_T_10[314]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Abs" -- block-group
			{
			 block: "Abs"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[313]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Abs"

			group "Memory" -- block-group
			{
			 block: "Memory"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[306]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[324]
				{
				 type:    flt(64,IEEE)*
				 alias:   "X0"
				 flags:   PARAM
				}


			endgroup -- block-group "Memory"

			group "Saturation" -- block-group
			{
			 block: "Saturate"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[395]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[317]
				{
				 type:    flt(64,IEEE)*
				 alias:   "UpperLimit"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[318]
				{
				 type:    flt(64,IEEE)*
				 alias:   "LowerLimit"
				 flags:   PARAM
				}


			endgroup -- block-group "Saturation"

			group "Add" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[396]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Add"

			group "Subtract" -- block-group
			{
			 block: "Sum"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[312]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Subtract"

			group "Switch" -- block-group
			{
			 block: "Switch"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[314]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_P_real_T_5[431]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Threshold"
				 flags:   PARAM
				}


			endgroup -- block-group "Switch"

  
  
			group "DocBlock" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


  
  
				group "EmptySubsystem" -- subsystem-group
				{
				 flags: COLLAPSED
				 desc:  ""
				}




				endgroup -- subsystem-group "EmptySubsystem"


			endgroup -- subsystem-group "DocBlock"


		endgroup -- subsystem-group "Speed Validation"
  
  
		group "Time-Trigger Set" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


		endgroup -- subsystem-group "Time-Trigger Set"
  
  
		group "Update Current BSM Data" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			-- Skipping output CACC Data{SubArray1}
			-- Skipping output CACC Data{SubArray2}
			-- Skipping output CACC Data{SubArray3}
			-- Skipping output CACC Data{SubArray4}
			-- Skipping output CACC Data{SubArray5}
			p_SpeedHarm_B_uint8_T_19[77]
			{
			 type:    uint(8)*
			 alias:   "CACC Data{SubArray6}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output CACC Data{SubArray7}
			-- Skipping output CACC Data{SubArray8}
			-- Skipping output CACC Data{SubArray9}
			-- Skipping output CACC Data{SubArray10}
			p_SpeedHarm_B_uint8_T_19[76]
			{
			 type:    uint(8)*
			 alias:   "CACC Data{SubArray11}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[79]
			{
			 type:    uint(8)*
			 alias:   "CACC Data{SubArray12}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[73]
			{
			 type:    flt(32,IEEE)*
			 alias:   "CACC Data{SubArray13}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_19[80]
			{
			 type:    uint(8)*
			 alias:   "CACC Data{SubArray14}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_12[74]
			{
			 type:    flt(32,IEEE)*
			 alias:   "CACC Data{SubArray15}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output CACC Data{SubArray16}
			-- Skipping output CACC Data{SubArray17}
			-- Skipping output CACC Data{SubArray18}
			-- Skipping output CACC Data{SubArray19}
			p_SpeedHarm_B_uint8_T_19[78]
			{
			 type:    uint(8)*
			 alias:   "CACC Data{SubArray20}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			-- Skipping output CACC Data{SubArray21}
			-- Skipping output CACC Data{SubArray22}
			-- Skipping output CACC Data{SubArray23}
			-- Skipping output CACC Data{SubArray24}
			-- Skipping output CACC Data{SubArray25}
			-- Skipping output CACC Data{SubArray26}



		endgroup -- subsystem-group "Update Current BSM Data"

		p_SpeedHarm_B_real_T_10[295]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<FwdFusTrkALongPos>{Occurence1}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector4/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[297]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<FwdFusTrkALongPos>{Occurence2}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector6/Out2"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[298]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<FwdFusTrkALongPos>{Occurence3}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector7/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[296]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<FwdFusTrkARelLongVel>{Occurence1}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector6/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[299]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<FwdFusTrkARelLongVel>{Occurence2}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector7/Out2"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[71]
		{
		 type:    uint(8)*
		 alias:   "<num_objects>{Occurence1}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector3/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_uint8_T_19[72]
		{
		 type:    uint(8)*
		 alias:   "<num_objects>{Occurence2}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector9/Out2"
		 flags:   LABEL|READONLY
		}
		-- Skipping label "<object_list>{Occurence1}"

		-- Skipping label "<object_list>{Occurence2}"

		-- Skipping label "<object_list>{Occurence3}"

		p_SpeedHarm_B_boolean_T_20[66]
		{
		 type:    uint(8)*
		 alias:   "<value>{Occurence1}"
		 bitmask: 0x01
		 range:   < 0 ; 1 >
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_boolean_T_20[67]
		{
		 type:    uint(8)*
		 alias:   "<value>{Occurence2}"
		 bitmask: 0x01
		 range:   < 0 ; 1 >
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector/Out2"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real32_T_12[69]
		{
		 type:    flt(32,IEEE)*
		 alias:   "<value>{Occurence3}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector1/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real32_T_12[70]
		{
		 type:    flt(32,IEEE)*
		 alias:   "<value>{Occurence4}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector1/Out2"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[293]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<value>{Occurence5}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector1/Out3"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[294]
		{
		 type:    flt(64,IEEE)*
		 alias:   "<value>{Occurence6}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector1/Out4"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real32_T_12[71]
		{
		 type:    flt(32,IEEE)*
		 alias:   "<value>{Occurence7}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector1/Out5"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_boolean_T_20[73]
		{
		 type:    uint(8)*
		 alias:   "<value>{Occurence8}"
		 bitmask: 0x01
		 range:   < 0 ; 1 >
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector2/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real32_T_12[72]
		{
		 type:    flt(32,IEEE)*
		 alias:   "<value>{Occurence9}"
		 origin:  "SpeedHarm/Speed Harm Control Code/Bus\nSelector5/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_AutoStateEnum_15[0]
		{
		 type:    enum SpeedHarm_AutoStateEnum*
		 alias:   "current_merge_state"
		 origin:  "SpeedHarm/Speed Harm Control Code/Compute Automation State/Auto State"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[349]
		{
		 type:    flt(64,IEEE)*
		 alias:   "lead_vehicle_speed"
		 origin:  "SpeedHarm/Speed Harm Control Code/Radar Target Speed/Speed"
		 flags:   LABEL|READONLY
		}
		-- Skipping label "max_accel"

		p_SpeedHarm_B_real_T_10[355]
		{
		 type:    flt(64,IEEE)*
		 alias:   "raw_spd_command"
		 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/RawSpdCmd"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[358]
		{
		 type:    flt(64,IEEE)*
		 alias:   "speed_command"
		 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/SpdCmd"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[314]
		{
		 type:    flt(64,IEEE)*
		 alias:   "speed_command_final"
		 origin:  "SpeedHarm/Speed Harm Control Code/Speed Validation/Out1"
		 flags:   LABEL|READONLY
		}
		p_SpeedHarm_B_real_T_10[394]
		{
		 type:    flt(64,IEEE)*
		 alias:   "vehicle_length"
		 origin:  "SpeedHarm/Speed Harm Control Code/Veh Len m/Out1"
		 flags:   LABEL|READONLY
		}

	endgroup -- subsystem-group "Speed Harm Control Code"
  
  
	group "Time-Triggered Task" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		-- Skipping output  

  
  
		group "Common Timer\nInterrupt Interface" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			-- Skipping output  

		endgroup -- subsystem-group "Common Timer\nInterrupt Interface"


	endgroup -- subsystem-group "Time-Triggered Task"
  
  
	group "UDP Logger // HMI" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		p_SpeedHarm_B_uint16_T_18[7]
		{
		 type:    uint(16)*
		 alias:   "Logging Send Status"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		-- Skipping output HMI Send Status

		group "Rate Transition" -- block-group
		{
		 block: "RateTransition"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_1_2_0_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{requested_cacc_state.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_0_value
			{
			 type:    uint(8)*
			 alias:   "Out1{requested_cacc_state.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_1_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{radar_status.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_1_value
			{
			 type:    uint(8)*
			 alias:   "Out1{radar_status.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_2_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{acc_status.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_2_value
			{
			 type:    uint(8)*
			 alias:   "Out1{acc_status.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_3_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{path_ctrl_status.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_3_value
			{
			 type:    uint(8)*
			 alias:   "Out1{path_ctrl_status.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_4_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{throttle_ovr_flag.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_4_value
			{
			 type:    uint(8)*
			 alias:   "Out1{throttle_ovr_flag.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_5_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{acc_set_speed_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_5_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{acc_set_speed_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_6_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{accel_m_s2.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_6_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{accel_m_s2.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_7_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{speed_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_7_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{speed_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_8_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{steering_wheel_angle_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_8_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{steering_wheel_angle_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_9_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{brk_light_flag.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_9_value
			{
			 type:    uint(8)*
			 alias:   "Out1{brk_light_flag.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_10_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{brk_pedal_deflect_percent.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_10_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{brk_pedal_deflect_percent.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_11_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{throttle_pedal_deflect_percent.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_11_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{throttle_pedal_deflect_percent.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_12_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_utc_time_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_12_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_utc_time_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_13_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_lat_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_13_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_lat_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_14_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_long_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_14_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_long_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_15_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_alt_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_15_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_alt_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_16_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_roll_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_16_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{global_roll_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_17_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_pitch_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_17_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{global_pitch_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_18_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{global_yaw_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_18_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{global_yaw_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_19_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_north_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_19_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_north_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_20_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_east_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_20_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_east_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_21_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_down_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_21_value
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_down_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_22_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_roll_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_22_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{local_roll_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_23_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_pitch_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_23_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{local_pitch_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_24_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{local_yaw_deg.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_24_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{local_yaw_deg.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_25_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{horizontal_pos_accuracy_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_25_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{horizontal_pos_accuracy_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_26_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{vertical_pos_accuracy_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_26_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{vertical_pos_accuracy_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_27_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{velocity_fwd_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_27_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{velocity_fwd_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_28_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{velocity_right_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_28_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{velocity_right_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_29_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{velocity_down_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_29_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{velocity_down_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_30_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{velocity_accuracy_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_30_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{velocity_accuracy_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_31_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{accel_fwd_m_s2.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_31_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{accel_fwd_m_s2.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_32_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{accel_right_m_s2.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_32_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{accel_right_m_s2.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_33_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{accel_down_m_s2.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_33_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{accel_down_m_s2.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_34_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{preceding_veh_flag.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_boolean_T_1_2_34_value
			{
			 type:    uint(8)*
			 alias:   "Out1{preceding_veh_flag.value}"
			 desc:    ""
			 range:   < 0 ; 1 >
			 bitmask: 0x01
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_35_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{dist_to_preceding_veh_m.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_35_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{dist_to_preceding_veh_m.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_36_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{rel_speed_to_preceding_veh_m_s.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real32_T_1_2_36_value
			{
			 type:    flt(32,IEEE)*
			 alias:   "Out1{rel_speed_to_preceding_veh_m_s.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_37_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{object_list.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_uint8_T_1_2_37_1_num_objects
			{
			 type:    uint(8)*
			 alias:   "Out1{object_list.value.num_objects}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_real_T_1_2_38_rx_timestamp_s
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1{desired_headway.rx_timestamp_s}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_B_int32_T_1_2_38_value
			{
			 type:    int(32)*
			 alias:   "Out1{desired_headway.value}"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Rate Transition"

		group "Rate Transition1" -- block-group
		{
		 block: "RateTransition"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_SpeedHarm_B_real_T_10[99]
			{
			 type:    SpeedHarm_ArrayDT0_74*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_SpeedHarm_P_real_T_5[1029]
			{
			 type:    flt(64,IEEE)*
			 alias:   "X0"
			 flags:   PARAM
			}


		endgroup -- block-group "Rate Transition1"

  
  
		group "Subsystem" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			p_SpeedHarm_B_uint16_T_18[7]
			{
			 type:    uint(16)*
			 alias:   "Logging status"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}

			group "Bus\nSelector" -- block-group
			{
			 block: "BusSelector"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[173]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[60]
				{
				 type:    uint(8)*
				 alias:   "Out2"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[174]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out3"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[61]
				{
				 type:    uint(8)*
				 alias:   "Out4"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[175]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out5"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[62]
				{
				 type:    uint(8)*
				 alias:   "Out6"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[176]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out7"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[63]
				{
				 type:    uint(8)*
				 alias:   "Out8"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[177]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out9"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[46]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out10"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[178]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out11"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[47]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out12"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[179]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out13"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[48]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out14"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[180]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out15"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[49]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out16"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[181]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out17"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[64]
				{
				 type:    uint(8)*
				 alias:   "Out18"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[182]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out19"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[50]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out20"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[183]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out21"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[51]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out22"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[184]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out23"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[185]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out24"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[186]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out25"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[187]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out26"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[188]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out27"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[189]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out28"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[190]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out29"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[191]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out30"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[192]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out31"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[52]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out32"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[193]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out33"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[53]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out34"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[194]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out35"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[54]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out36"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[195]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out37"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[196]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out38"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[197]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out39"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[198]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out40"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[199]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out41"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[200]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out42"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[201]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out43"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[55]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out44"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[202]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out45"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[56]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out46"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[203]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out47"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[57]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out48"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[204]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out49"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[58]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out50"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[205]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out51"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[59]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out52"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[206]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out53"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[60]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out54"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[207]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out55"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[61]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out56"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[208]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out57"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[62]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out58"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[209]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out59"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[63]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out60"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[210]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out61"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[64]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out62"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[211]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out63"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[65]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out64"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[212]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out65"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[66]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out66"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[213]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out67"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[67]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out68"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[214]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out69"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real32_T_12[68]
				{
				 type:    flt(32,IEEE)*
				 alias:   "Out70"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[215]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out71"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_int32_T_13[3]
				{
				 type:    int(32)*
				 alias:   "Out72"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_real_T_10[216]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out73"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}
				p_SpeedHarm_B_boolean_T_20[65]
				{
				 type:    uint(8)*
				 alias:   "Out74"
				 desc:    ""
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Bus\nSelector"

			group "Constant" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_int32_T_7[10]
				{
				 type:    int(32)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant"

			group "Constant1" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_boolean_T_14[15]
				{
				 type:    uint(8)*
				 alias:   "Value"
				 range:   < 0 ; 1 >
				 bitmask: 0x01
				 flags:   PARAM
				}


			endgroup -- block-group "Constant1"

			group "Constant2" -- block-group
			{
			 block: "Constant"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				-- Skipping output Out1
				p_SpeedHarm_P_real_T_5[851]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Value"
				 flags:   PARAM
				}


			endgroup -- block-group "Constant2"

			group "Data Type Conversion" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[219]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion"

			group "Data Type Conversion1" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[220]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion1"

			group "Data Type Conversion10" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[229]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion10"

			group "Data Type Conversion11" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[230]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion11"

			group "Data Type Conversion12" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[231]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion12"

			group "Data Type Conversion13" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[232]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion13"

			group "Data Type Conversion14" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[241]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion14"

			group "Data Type Conversion15" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[242]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion15"

			group "Data Type Conversion16" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[233]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion16"

			group "Data Type Conversion17" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[234]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion17"

			group "Data Type Conversion18" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[235]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion18"

			group "Data Type Conversion19" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[236]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion19"

			group "Data Type Conversion2" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[221]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion2"

			group "Data Type Conversion20" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[237]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion20"

			group "Data Type Conversion21" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[238]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion21"

			group "Data Type Conversion22" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[239]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion22"

			group "Data Type Conversion23" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[240]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion23"

			group "Data Type Conversion24" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[243]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion24"

			group "Data Type Conversion25" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[244]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion25"

			group "Data Type Conversion26" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[253]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion26"

			group "Data Type Conversion27" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[254]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion27"

			group "Data Type Conversion28" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[255]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion28"

			group "Data Type Conversion29" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[256]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion29"

			group "Data Type Conversion3" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[222]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion3"

			group "Data Type Conversion30" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[265]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion30"

			group "Data Type Conversion31" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[266]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion31"

			group "Data Type Conversion32" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[257]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion32"

			group "Data Type Conversion33" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[258]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion33"

			group "Data Type Conversion34" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[259]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion34"

			group "Data Type Conversion35" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[260]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion35"

			group "Data Type Conversion36" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[245]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion36"

			group "Data Type Conversion37" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[261]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion37"

			group "Data Type Conversion38" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[262]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion38"

			group "Data Type Conversion39" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[263]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion39"

			group "Data Type Conversion4" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[223]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion4"

			group "Data Type Conversion40" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[264]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion40"

			group "Data Type Conversion41" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[246]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion41"

			group "Data Type Conversion42" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[247]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion42"

			group "Data Type Conversion43" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[248]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion43"

			group "Data Type Conversion44" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[249]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion44"

			group "Data Type Conversion45" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[250]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion45"

			group "Data Type Conversion46" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[251]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion46"

			group "Data Type Conversion47" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[252]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion47"

			group "Data Type Conversion48" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[267]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion48"

			group "Data Type Conversion49" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[268]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion49"

			group "Data Type Conversion5" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[224]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion5"

			group "Data Type Conversion50" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[277]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion50"

			group "Data Type Conversion51" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[278]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion51"

			group "Data Type Conversion52" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[279]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion52"

			group "Data Type Conversion53" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[280]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion53"

			group "Data Type Conversion54" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[289]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion54"

			group "Data Type Conversion55" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[290]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion55"

			group "Data Type Conversion56" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[281]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion56"

			group "Data Type Conversion57" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[282]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion57"

			group "Data Type Conversion58" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[283]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion58"

			group "Data Type Conversion59" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[284]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion59"

			group "Data Type Conversion6" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[225]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion6"

			group "Data Type Conversion60" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[269]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion60"

			group "Data Type Conversion61" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[285]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion61"

			group "Data Type Conversion62" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[286]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion62"

			group "Data Type Conversion63" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[287]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion63"

			group "Data Type Conversion64" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[288]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion64"

			group "Data Type Conversion65" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[270]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion65"

			group "Data Type Conversion66" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[271]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion66"

			group "Data Type Conversion67" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[272]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion67"

			group "Data Type Conversion68" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[273]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion68"

			group "Data Type Conversion69" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[274]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion69"

			group "Data Type Conversion7" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[226]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion7"

			group "Data Type Conversion70" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[275]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion70"

			group "Data Type Conversion71" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[276]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion71"

			group "Data Type Conversion72" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[218]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion72"

			group "Data Type Conversion73" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[291]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion73"

			group "Data Type Conversion74" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[292]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion74"

			group "Data Type Conversion8" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[227]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion8"

			group "Data Type Conversion9" -- block-group
			{
			 block: "DataTypeConversion"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[228]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Data Type Conversion9"

			group "Digital Clock" -- block-group
			{
			 block: "DigitalClock"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_real_T_10[217]
				{
				 type:    flt(64,IEEE)*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}


			endgroup -- block-group "Digital Clock"

			group "DSEncode32" -- block-group
			{
			 block: "S-Function"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint32_T_14[530]
				{
				 type:    SpeedHarm_ArrayDT7_264*
				 alias:   "Out1"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				p_SpeedHarm_P_real_T_5[600]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P1"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[603]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P2"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[606]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P3"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[609]
				{
				 type:    SpeedHarm_ArrayDT0_149*
				 alias:   "P4"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[760]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P5"
				 flags:   PARAM
				}
				p_SpeedHarm_P_real_T_5[763]
				{
				 type:    flt(64,IEEE)*
				 alias:   "P6"
				 flags:   PARAM
				}


			endgroup -- block-group "DSEncode32"

  
  
			group "ETHERNET_UDP_TX_BL1" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				p_SpeedHarm_B_uint16_T_18[7]
				{
				 type:    uint(16)*
				 alias:   "Status"
				 desc:    ""
				 flags:   OUTPUT|READONLY
				}

				group "dsethernetudp_tx" -- block-group
				{
				 block: "S-Function"
				 desc:  ""
				 flags: BLOCK|COLLAPSED
				}
					p_SpeedHarm_B_uint16_T_18[7]
					{
					 type:    uint(16)*
					 alias:   "Out1"
					 desc:    ""
					 flags:   OUTPUT|READONLY
					}

					p_SpeedHarm_P_real_T_5[766]
					{
					 type:    SpeedHarm_ArrayDT0_27*
					 alias:   "P1"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[795]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P2"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[798]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P3"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[801]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P4"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[804]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P5"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[807]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P6"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[810]
					{
					 type:    flt(64,IEEE)*
					 alias:   "P7"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[813]
					{
					 type:    SpeedHarm_ArrayDT0_18*
					 alias:   "P8"
					 flags:   PARAM
					}
					p_SpeedHarm_P_real_T_5[833]
					{
					 type:    SpeedHarm_ArrayDT0_18*
					 alias:   "P9"
					 flags:   PARAM
					}


				endgroup -- block-group "dsethernetudp_tx"



			endgroup -- subsystem-group "ETHERNET_UDP_TX_BL1"
  
  
			group "test trigger set" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}


			endgroup -- subsystem-group "test trigger set"

			p_SpeedHarm_B_real_T_10[173]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence1}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out1"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[174]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence2}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out3"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[175]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence3}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out5"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[176]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence4}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out7"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[177]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence5}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out9"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[178]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence6}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out11"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[179]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence7}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out13"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[180]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence8}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out15"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[181]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence9}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out17"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[182]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence10}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out19"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[183]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence11}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out21"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[184]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence12}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out23"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[186]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence13}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out25"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[188]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence14}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out27"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[190]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence15}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out29"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[192]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence16}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out31"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[193]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence17}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out33"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[194]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence18}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out35"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[195]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence19}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out37"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[197]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence20}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out39"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[199]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence21}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out41"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[201]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence22}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out43"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[202]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence23}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out45"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[203]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence24}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out47"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[204]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence25}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out49"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[205]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence26}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out51"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[206]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence27}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out53"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[207]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence28}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out55"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[208]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence29}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out57"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[209]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence30}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out59"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[210]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence31}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out61"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[211]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence32}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out63"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[212]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence33}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out65"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[213]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence34}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out67"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[214]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence35}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out69"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[215]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence36}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out71"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[216]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<rx_timestamp_s>{Occurence37}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out73"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[60]
			{
			 type:    uint(8)*
			 alias:   "<value>{Occurence1}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out2"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[61]
			{
			 type:    uint(8)*
			 alias:   "<value>{Occurence2}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out4"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[62]
			{
			 type:    uint(8)*
			 alias:   "<value>{Occurence3}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out6"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[63]
			{
			 type:    uint(8)*
			 alias:   "<value>{Occurence4}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out8"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[46]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence5}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out10"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[47]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence6}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out12"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[48]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence7}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out14"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[49]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence8}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out16"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[64]
			{
			 type:    uint(8)*
			 alias:   "<value>{Occurence9}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out18"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[50]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence10}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out20"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[51]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence11}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out22"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[185]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence12}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out24"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[187]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence13}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out26"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[189]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence14}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out28"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[191]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence15}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out30"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[52]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence16}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out32"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[53]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence17}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out34"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[54]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence18}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out36"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[196]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence19}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out38"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[198]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence20}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out40"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real_T_10[200]
			{
			 type:    flt(64,IEEE)*
			 alias:   "<value>{Occurence21}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out42"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[55]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence22}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out44"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[56]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence23}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out46"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[57]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence24}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out48"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[58]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence25}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out50"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[59]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence26}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out52"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[60]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence27}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out54"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[61]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence28}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out56"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[62]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence29}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out58"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[63]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence30}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out60"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[64]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence31}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out62"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[65]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence32}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out64"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[66]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence33}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out66"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[67]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence34}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out68"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_real32_T_12[68]
			{
			 type:    flt(32,IEEE)*
			 alias:   "<value>{Occurence35}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out70"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_int32_T_13[3]
			{
			 type:    int(32)*
			 alias:   "<value>{Occurence36}"
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out72"
			 flags:   LABEL|READONLY
			}
			p_SpeedHarm_B_boolean_T_20[65]
			{
			 type:    uint(8)*
			 alias:   "<value>{Occurence37}"
			 bitmask: 0x01
			 range:   < 0 ; 1 >
			 origin:  "SpeedHarm/UDP Logger // HMI/Subsystem/Bus\nSelector/Out74"
			 flags:   LABEL|READONLY
			}

		endgroup -- subsystem-group "Subsystem"
  
  
		group "test trigger" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}

			-- Skipping output  

  
  
			group "Common Timer\nInterrupt Interface" -- subsystem-group
			{
			 flags: COLLAPSED
			 desc:  ""
			}

				-- Skipping output  

			endgroup -- subsystem-group "Common Timer\nInterrupt Interface"


		endgroup -- subsystem-group "test trigger"


	endgroup -- subsystem-group "UDP Logger // HMI"
  
  
	group "Write CACC Data" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


		group "Switch Case" -- block-group
		{
		 block: "SwitchCase"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			-- Skipping output Out2
			-- Skipping output Out3
			-- Skipping output Out4
			-- Skipping output Out5
			-- Skipping output Out6
			-- Skipping output Out7


		endgroup -- block-group "Switch Case"

  
  
		group "Veh 1 Data Write" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[67]
				{
				 type:    uint(8)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[66]
				{
				 type:    uint(8)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[65]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[64]
				{
				 type:    uint(8)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[63]
				{
				 type:    uint(8)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[62]
				{
				 type:    uint(8)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[61]
				{
				 type:    uint(8)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[60]
				{
				 type:    uint(8)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[59]
				{
				 type:    uint(8)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[58]
				{
				 type:    uint(8)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[57]
				{
				 type:    uint(8)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[56]
				{
				 type:    uint(8)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[45]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In13"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[55]
				{
				 type:    uint(8)*
				 alias:   "In14"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[44]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In15"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[43]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In16"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[42]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In17"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[54]
				{
				 type:    uint(8)*
				 alias:   "In18"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[53]
				{
				 type:    uint(8)*
				 alias:   "In19"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[52]
				{
				 type:    uint(8)*
				 alias:   "In20"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[6]
				{
				 type:    uint(16)*
				 alias:   "In21"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[51]
				{
				 type:    uint(8)*
				 alias:   "In22"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[50]
				{
				 type:    uint(8)*
				 alias:   "In23"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[49]
				{
				 type:    uint(8)*
				 alias:   "In24"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[48]
				{
				 type:    uint(8)*
				 alias:   "In25"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[47]
				{
				 type:    uint(8)*
				 alias:   "In26"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"



		endgroup -- subsystem-group "Veh 1 Data Write"
  
  
		group "Veh 2 Data Write" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[67]
				{
				 type:    uint(8)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[66]
				{
				 type:    uint(8)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[65]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[64]
				{
				 type:    uint(8)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[63]
				{
				 type:    uint(8)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[62]
				{
				 type:    uint(8)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[61]
				{
				 type:    uint(8)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[60]
				{
				 type:    uint(8)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[59]
				{
				 type:    uint(8)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[58]
				{
				 type:    uint(8)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[57]
				{
				 type:    uint(8)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[56]
				{
				 type:    uint(8)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[45]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In13"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[55]
				{
				 type:    uint(8)*
				 alias:   "In14"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[44]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In15"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[43]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In16"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[42]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In17"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[54]
				{
				 type:    uint(8)*
				 alias:   "In18"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[53]
				{
				 type:    uint(8)*
				 alias:   "In19"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[52]
				{
				 type:    uint(8)*
				 alias:   "In20"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[6]
				{
				 type:    uint(16)*
				 alias:   "In21"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[51]
				{
				 type:    uint(8)*
				 alias:   "In22"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[50]
				{
				 type:    uint(8)*
				 alias:   "In23"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[49]
				{
				 type:    uint(8)*
				 alias:   "In24"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[48]
				{
				 type:    uint(8)*
				 alias:   "In25"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[47]
				{
				 type:    uint(8)*
				 alias:   "In26"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"



		endgroup -- subsystem-group "Veh 2 Data Write"
  
  
		group "Veh 3 Data Write" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[67]
				{
				 type:    uint(8)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[66]
				{
				 type:    uint(8)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[65]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[64]
				{
				 type:    uint(8)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[63]
				{
				 type:    uint(8)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[62]
				{
				 type:    uint(8)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[61]
				{
				 type:    uint(8)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[60]
				{
				 type:    uint(8)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[59]
				{
				 type:    uint(8)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[58]
				{
				 type:    uint(8)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[57]
				{
				 type:    uint(8)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[56]
				{
				 type:    uint(8)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[45]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In13"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[55]
				{
				 type:    uint(8)*
				 alias:   "In14"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[44]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In15"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[43]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In16"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[42]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In17"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[54]
				{
				 type:    uint(8)*
				 alias:   "In18"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[53]
				{
				 type:    uint(8)*
				 alias:   "In19"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[52]
				{
				 type:    uint(8)*
				 alias:   "In20"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[6]
				{
				 type:    uint(16)*
				 alias:   "In21"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[51]
				{
				 type:    uint(8)*
				 alias:   "In22"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[50]
				{
				 type:    uint(8)*
				 alias:   "In23"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[49]
				{
				 type:    uint(8)*
				 alias:   "In24"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[48]
				{
				 type:    uint(8)*
				 alias:   "In25"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[47]
				{
				 type:    uint(8)*
				 alias:   "In26"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"



		endgroup -- subsystem-group "Veh 3 Data Write"
  
  
		group "Veh 4 Data Write" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[67]
				{
				 type:    uint(8)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[66]
				{
				 type:    uint(8)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[65]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[64]
				{
				 type:    uint(8)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[63]
				{
				 type:    uint(8)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[62]
				{
				 type:    uint(8)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[61]
				{
				 type:    uint(8)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[60]
				{
				 type:    uint(8)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[59]
				{
				 type:    uint(8)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[58]
				{
				 type:    uint(8)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[57]
				{
				 type:    uint(8)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[56]
				{
				 type:    uint(8)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[45]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In13"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[55]
				{
				 type:    uint(8)*
				 alias:   "In14"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[44]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In15"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[43]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In16"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[42]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In17"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[54]
				{
				 type:    uint(8)*
				 alias:   "In18"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[53]
				{
				 type:    uint(8)*
				 alias:   "In19"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[52]
				{
				 type:    uint(8)*
				 alias:   "In20"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[6]
				{
				 type:    uint(16)*
				 alias:   "In21"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[51]
				{
				 type:    uint(8)*
				 alias:   "In22"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[50]
				{
				 type:    uint(8)*
				 alias:   "In23"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[49]
				{
				 type:    uint(8)*
				 alias:   "In24"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[48]
				{
				 type:    uint(8)*
				 alias:   "In25"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[47]
				{
				 type:    uint(8)*
				 alias:   "In26"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"



		endgroup -- subsystem-group "Veh 4 Data Write"
  
  
		group "Veh 5 Data Write" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}


			group "Data Store\nWrite" -- block-group
			{
			 block: "DataStoreWrite"
			 desc:  ""
			 flags: BLOCK|COLLAPSED
			}
				p_SpeedHarm_B_uint8_T_19[67]
				{
				 type:    uint(8)*
				 alias:   "In1"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[66]
				{
				 type:    uint(8)*
				 alias:   "In2"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[65]
				{
				 type:    uint(8)*
				 alias:   "In3"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[64]
				{
				 type:    uint(8)*
				 alias:   "In4"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[63]
				{
				 type:    uint(8)*
				 alias:   "In5"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[62]
				{
				 type:    uint(8)*
				 alias:   "In6"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[61]
				{
				 type:    uint(8)*
				 alias:   "In7"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[60]
				{
				 type:    uint(8)*
				 alias:   "In8"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[59]
				{
				 type:    uint(8)*
				 alias:   "In9"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[58]
				{
				 type:    uint(8)*
				 alias:   "In10"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[57]
				{
				 type:    uint(8)*
				 alias:   "In11"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[56]
				{
				 type:    uint(8)*
				 alias:   "In12"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[45]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In13"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[55]
				{
				 type:    uint(8)*
				 alias:   "In14"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[44]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In15"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[43]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In16"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_real32_T_12[42]
				{
				 type:    flt(32,IEEE)*
				 alias:   "In17"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[54]
				{
				 type:    uint(8)*
				 alias:   "In18"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[53]
				{
				 type:    uint(8)*
				 alias:   "In19"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[52]
				{
				 type:    uint(8)*
				 alias:   "In20"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint16_T_18[6]
				{
				 type:    uint(16)*
				 alias:   "In21"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[51]
				{
				 type:    uint(8)*
				 alias:   "In22"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[50]
				{
				 type:    uint(8)*
				 alias:   "In23"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[49]
				{
				 type:    uint(8)*
				 alias:   "In24"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[48]
				{
				 type:    uint(8)*
				 alias:   "In25"
				 desc:    ""
				 flags:   SINK|READONLY
				}
				p_SpeedHarm_B_uint8_T_19[47]
				{
				 type:    uint(8)*
				 alias:   "In26"
				 desc:    ""
				 flags:   SINK|READONLY
				}



			endgroup -- block-group "Data Store\nWrite"



		endgroup -- subsystem-group "Veh 5 Data Write"
  
  
		group "Vehicle Identification Error" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}




		endgroup -- subsystem-group "Vehicle Identification Error"
  
  
		group "Vehicle Identification Error1" -- subsystem-group
		{
		 flags: COLLAPSED
		 desc:  ""
		}




		endgroup -- subsystem-group "Vehicle Identification Error1"


	endgroup -- subsystem-group "Write CACC Data"




endgroup -- "Model Root"
-- ******** Tunable Parameters ************************************************

-- InlineParameters is off: no separate group for Tunable Parameters


-- ******** State Machine Data ************************************************

group "State Machine Data"
{
 flags: COLLAPSED
}


endgroup


-- ******** Data Store Memories ***********************************************

group "Data Stores"
{
 flags: COLLAPSED
}
	p_SpeedHarm_DW_AutoStateEnum_9[1]
	{
	 type:   enum SpeedHarm_AutoStateEnum*
	 alias:  "automation_state"
	 origin: "SpeedHarm/Speed Harm Control Code/Data Store\nMemory"
	 flags:  DSM
	}
	p_SpeedHarm_DW_real_T_4[159]
	{
	 type:   flt(64,IEEE)*
	 alias:  "operating_speed"
	 origin: "SpeedHarm/Speed Harm Control Code/Data Store\nMemory1"
	 flags:  DSM
	}
	p_SpeedHarm_DW_real_T_4[160]
	{
	 type:   flt(64,IEEE)*
	 alias:  "ACC_set_speed"
	 origin: "SpeedHarm/Speed Harm Control Code/Data Store\nMemory2"
	 flags:  DSM
	}
endgroup


-- ******** Labels ************************************************************

group "Labels"
{
 flags: COLLAPSED
}
	p_SpeedHarm_B_boolean_T_20[21]
	{
	 type:    uint(8)*
	 alias:   "ACCAct370"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCAct370"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[41]
	{
	 type:    flt(64,IEEE)*
	 alias:   "ACCDrvrSeltdSpd"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCDrvrSeltdSpd"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[22]
	{
	 type:    uint(8)*
	 alias:   "ACCDrvrSeltdSpdIO"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCDrvrSeltdSpdIO"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[25]
	{
	 type:    uint(8)*
	 alias:   "ACCHdwayStngIO"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCHdwayStngIO"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[19]
	{
	 type:    uint(8)*
	 alias:   "ACCHdwyStg"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCHdwyStg"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint32_T_14[160]
	{
	 type:    uint(32)*
	 alias:   "ACCSnsClnRqdIO"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCSnsClnRqdIO"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[26]
	{
	 type:    uint(8)*
	 alias:   "ACCTmpUnavlbleIO"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCTmpUnavlbleIO"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[23]
	{
	 type:    uint(8)*
	 alias:   "ACCUnavlbleDTWthrIO"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ACCUnavlbleDTWthrIO"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[44]
	{
	 type:    flt(64,IEEE)*
	 alias:   "AccPdlPosPcntFullRng"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/ETEI_Engine_General_Status/AccPdlPosPcntFullRng"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[28]
	{
	 type:    uint(8)*
	 alias:   "AccPdlPosPcntFullRngV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/ETEI_Engine_General_Status/AccPdlPosPcntFullRngV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[34]
	{
	 type:    flt(64,IEEE)*
	 alias:   "AccPos"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/AccPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[3]
	{
	 type:    uint(8)*
	 alias:   "AccelCanTimeoutFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCanTimeoutFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[1]
	{
	 type:    uint(8)*
	 alias:   "AccelCmdInjectionFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCmdInjectionFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[8]
	{
	 type:    uint(8)*
	 alias:   "AccelCmdModeEcho"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCmdModeEcho"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[2]
	{
	 type:    uint(8)*
	 alias:   "AccelCmdTimeoutFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelCmdTimeoutFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[4]
	{
	 type:    uint(8)*
	 alias:   "AccelDriverOverride"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelDriverOverride"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[5]
	{
	 type:    uint(8)*
	 alias:   "AccelInjectionMsg"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelInjectionMsg"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[6]
	{
	 type:    uint(8)*
	 alias:   "AccelPairTimeoutFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/AccelPairTimeoutFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[31]
	{
	 type:    flt(64,IEEE)*
	 alias:   "ActVehAccel"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Antilock_Brake_and_TC_Status_HC/ActVehAccel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[24]
	{
	 type:    flt(64,IEEE)*
	 alias:   "AutLghtCtrl"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/AutLghtCtrl"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[39]
	{
	 type:    uint(8)*
	 alias:   "BrakeCanTimoutFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCanTimoutFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[37]
	{
	 type:    uint(8)*
	 alias:   "BrakeCmdInjectionFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCmdInjectionFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[21]
	{
	 type:    uint(8)*
	 alias:   "BrakeCmdModeEcho"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCmdModeEcho"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[38]
	{
	 type:    uint(8)*
	 alias:   "BrakeCmdTimeoutFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeCmdTimeoutFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[40]
	{
	 type:    uint(8)*
	 alias:   "BrakeDriverOverride"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeDriverOverride"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[50]
	{
	 type:    flt(64,IEEE)*
	 alias:   "BrakeForce"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeForce"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[41]
	{
	 type:    uint(8)*
	 alias:   "BrakeInjectionMsg"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakeInjectionMsg"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[42]
	{
	 type:    uint(8)*
	 alias:   "BrakePairTimeoutFlag"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/BrakePairTimeoutFlag"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[11]
	{
	 type:    uint(8)*
	 alias:   "BrkLtsAtv{Occurence1}"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Data Type Conversion1/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[26]
	{
	 type:    flt(64,IEEE)*
	 alias:   "BrkLtsAtv{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/BrkLtsAtv"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint16_T_18[1]
	{
	 type:    uint(16)*
	 alias:   "D_NumeratorEcho"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/D_NumeratorEcho"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint32_T_14[794]
	{
	 type:    SpeedHarm_ArrayDT7_2*
	 alias:   "Data from PC2"
	 origin:  "SpeedHarm/Speed Harm Control Code/SRX PC2 UDP Handler/SRX PC2 UDP RX Handler/ETHERNET_UDP_RX_COMMAND/Data"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[24]
	{
	 type:    uint(8)*
	 alias:   "DrvThrtlOvrdIO"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/DrvThrtlOvrdIO"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[20]
	{
	 type:    uint(8)*
	 alias:   "FOAI_AlrtChmIhbRq"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/FOAI_AlrtChmIhbRq"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[17]
	{
	 type:    uint(8)*
	 alias:   "FOAI_AlrtWrnIndRq"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/FOAI_AlrtWrnIndRq"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[18]
	{
	 type:    uint(8)*
	 alias:   "FOAI_VehAhdIndRq"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/FOAI_VehAhdIndRq"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[25]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FlToPsSwAtv"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/FlToPsSwAtv"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[22]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FrFogLmpsAct"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/FrFogLmpsAct"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[43]
	{
	 type:    uint(8)*
	 alias:   "FrontOutput1"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[44]
	{
	 type:    uint(8)*
	 alias:   "FrontOutput2"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput2"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[45]
	{
	 type:    uint(8)*
	 alias:   "FrontOutput3"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput3"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[46]
	{
	 type:    uint(8)*
	 alias:   "FrontOutput4"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput4"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[47]
	{
	 type:    uint(8)*
	 alias:   "FrontOutput5"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput5"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[48]
	{
	 type:    uint(8)*
	 alias:   "FrontOutput6"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/FrontOutput6"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[488]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAConfidence{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAConfidence"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[512]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAConfidence{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAConfidence"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[500]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAConfidence{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAConfidence"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[524]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAConfidence{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAConfidence"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[487]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALatPos{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkALatPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[511]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALatPos{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkALatPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[499]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALatPos{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkALatPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[523]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALatPos{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkALatPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[490]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALongPos{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkALongPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[514]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALongPos{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkALongPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[502]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALongPos{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkALongPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[526]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkALongPos{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkALongPos"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[485]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMeasStatus{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAMeasStatus"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[509]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMeasStatus{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAMeasStatus"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[497]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMeasStatus{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAMeasStatus"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[521]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMeasStatus{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAMeasStatus"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[491]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMsgIndex{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAMsgIndex"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[515]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMsgIndex{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAMsgIndex"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[503]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMsgIndex{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAMsgIndex"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[527]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAMsgIndex{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAMsgIndex"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[484]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjType{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAObjType"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[508]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjType{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAObjType"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[496]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjType{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAObjType"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[520]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjType{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAObjType"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[492]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjectID{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkAObjectID"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[516]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjectID{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkAObjectID"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[504]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjectID{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkAObjectID"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[528]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkAObjectID{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkAObjectID"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[486]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLatVel{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkARelLatVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[510]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLatVel{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkARelLatVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[498]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLatVel{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkARelLatVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[522]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLatVel{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkARelLatVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[489]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLongVel{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkARelLongVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[513]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLongVel{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkARelLongVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[501]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLongVel{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkARelLongVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[525]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARelLongVel{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkARelLongVel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[493]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARollingCnt{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/FwdFusTrkARollingCnt"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[517]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARollingCnt{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/FwdFusTrkARollingCnt"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[505]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARollingCnt{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/FwdFusTrkARollingCnt"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[529]
	{
	 type:    flt(64,IEEE)*
	 alias:   "FwdFusTrkARollingCnt{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/FwdFusTrkARollingCnt"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[20]
	{
	 type:    flt(64,IEEE)*
	 alias:   "HdlmpBmSelectStat"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/HdlmpBmSelectStat"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[27]
	{
	 type:    flt(64,IEEE)*
	 alias:   "HighBmAct"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/HighBmAct"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint16_T_18[2]
	{
	 type:    uint(16)*
	 alias:   "I_NumeratorEcho"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/I_NumeratorEcho"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[49]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Loop counter"
	 origin:  "SpeedHarm/Carma_Platform\n/Sum/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[23]
	{
	 type:    flt(64,IEEE)*
	 alias:   "LowBmAct"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/LowBmAct"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[21]
	{
	 type:    flt(64,IEEE)*
	 alias:   "MainLghtSw"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/MainLghtSw"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint16_T_18[0]
	{
	 type:    uint(16)*
	 alias:   "PID_DivisorEcho"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/PID_DivisorEcho"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[35]
	{
	 type:    flt(64,IEEE)*
	 alias:   "PSBPI_PTSnBrkPdlPs"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/PSBPI_PTSnBrkPdlPs"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[12]
	{
	 type:    uint(8)*
	 alias:   "PSBPI_PTSnBrkPdlPsV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/PSBPI_PTSnBrkPdlPsV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[13]
	{
	 type:    uint(8)*
	 alias:   "PTSnsdBrkPdlInfARC"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/PTSnsdBrkPdlInfARC"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint16_T_18[3]
	{
	 type:    uint(16)*
	 alias:   "P_NumeratorEcho"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/P_NumeratorEcho"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[49]
	{
	 type:    uint(8)*
	 alias:   "RearOutput1"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[50]
	{
	 type:    uint(8)*
	 alias:   "RearOutput2"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput2"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[51]
	{
	 type:    uint(8)*
	 alias:   "RearOutput3"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput3"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[52]
	{
	 type:    uint(8)*
	 alias:   "RearOutput4"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput4"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[53]
	{
	 type:    uint(8)*
	 alias:   "RearOutput5"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput5"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[54]
	{
	 type:    uint(8)*
	 alias:   "RearOutput6"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RearOutput6"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[467]
	{
	 type:    flt(64,IEEE)*
	 alias:   "RoadTypeInfo"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/RoadTypeInfo"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[19]
	{
	 type:    flt(64,IEEE)*
	 alias:   "RrFogLmpsAct"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/RrFogLmpsAct"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[27]
	{
	 type:    uint(8)*
	 alias:   "ServAdpCrsCtrlIndOn"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/ServAdpCrsCtrlIndOn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[14]
	{
	 type:    uint(8)*
	 alias:   "StWhlAngAliveRollCnt"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StWhlAngAliveRollCnt"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[482]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Status{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[494]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Status{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[518]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Status{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[506]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Status{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[530]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Status{Occurence5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[38]
	{
	 type:    flt(64,IEEE)*
	 alias:   "StrWhAng"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAng"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_int16_T_17[0]
	{
	 type:    int(16)*
	 alias:   "StrWhAngGrd"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngGrd"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[15]
	{
	 type:    uint(8)*
	 alias:   "StrWhAngGrdMsk"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngGrdMsk"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[16]
	{
	 type:    uint(8)*
	 alias:   "StrWhAngGrdV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngGrdV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[17]
	{
	 type:    uint(8)*
	 alias:   "StrWhAngMask"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngMask"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[18]
	{
	 type:    uint(8)*
	 alias:   "StrWhAngV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhAngV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[16]
	{
	 type:    uint(8)*
	 alias:   "StrWhlAngSenCalStat"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhlAngSenCalStat"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[15]
	{
	 type:    uint(8)*
	 alias:   "StrWhlAngSenTyp"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/StrWhlAngSenTyp"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[468]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHdObjClstTanHdng"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHdObjClstTanHdng"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[480]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHeadFuncState"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadFuncState"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[481]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHeadRollingCount"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadRollingCount"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[473]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHeadTimStmp"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadTimStmp"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[474]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHeadTimStmpV"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHeadTimStmpV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[472]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_LCSRROK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_LCSRROK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[477]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_LFSRROK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_LFSRROK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[478]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_LrrOK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_LrrOK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[475]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_MapDataOK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_MapDataOK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[471]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_RCSRROK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_RCSRROK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[470]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_RFSRROK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_RFSRROK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[476]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHead_VIsOK"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHead_VIsOK"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[479]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHedNmValTargts"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHedNmValTargts"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[469]
	{
	 type:    flt(64,IEEE)*
	 alias:   "T_FusHed_ObjClstrCurv"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/T_FusHed_ObjClstrCurv"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[43]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[33]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Antilock_Brake_and_TC_Status_HC/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[12]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[29]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[16]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[40]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence6}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[37]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence7}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[483]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence8}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_Header/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[495]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence9}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_1/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[519]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence10}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_2/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[507]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence11}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_3/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[531]
	{
	 type:    flt(64,IEEE)*
	 alias:   "Time{Occurence12}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Object Bus RX Handler/SRX Object Bus RX Interrupt/T_Fwd_Fus_Obj_TrackA_4/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint32_T_14[159]
	{
	 type:    uint(32)*
	 alias:   "Torque"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/Torque"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[18]
	{
	 type:    flt(64,IEEE)*
	 alias:   "TrnSwAct"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/TrnSwAct"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[13]
	{
	 type:    uint(8)*
	 alias:   "TrnsAuxPmpAct"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/TrnsAuxPmpAct"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint32_T_14[157]
	{
	 type:    uint(32)*
	 alias:   "UTC_Lower"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/UTC_Lower"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint32_T_14[158]
	{
	 type:    uint(32)*
	 alias:   "UTC_Upper"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/UTC_Upper"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[71]
	{
	 type:    uint(8)*
	 alias:   "U(k-1)"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Speed Harm Control Code/Lightbar Controller/Detect\nChange/Delay Input1/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[355]
	{
	 type:    flt(64,IEEE)*
	 alias:   "V_selfCmdRaw{Occurence1}"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/Sum/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[380]
	{
	 type:    flt(64,IEEE)*
	 alias:   "V_selfCmdRaw{Occurence2}"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Limit/Speed Control/Sum/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[10]
	{
	 type:    flt(64,IEEE)*
	 alias:   "WhlGrndVlctyLftDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[8]
	{
	 type:    uint(8)*
	 alias:   "WhlGrndVlctyLftDrvnV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftDrvnV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[14]
	{
	 type:    flt(64,IEEE)*
	 alias:   "WhlGrndVlctyLftNnDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftNnDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[10]
	{
	 type:    uint(8)*
	 alias:   "WhlGrndVlctyLftNnDrvnV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyLftNnDrvnV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[9]
	{
	 type:    flt(64,IEEE)*
	 alias:   "WhlGrndVlctyRtDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[7]
	{
	 type:    uint(8)*
	 alias:   "WhlGrndVlctyRtDrvnV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtDrvnV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[13]
	{
	 type:    flt(64,IEEE)*
	 alias:   "WhlGrndVlctyRtNnDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtNnDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_boolean_T_20[9]
	{
	 type:    uint(8)*
	 alias:   "WhlGrndVlctyRtNnDrvnV"
	 bitmask: 0x01
	 range:   < 0 ; 1 >
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlGrndVlctyRtNnDrvnV"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[10]
	{
	 type:    uint(8)*
	 alias:   "WhlRotDrctnlStLftDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStLftDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[12]
	{
	 type:    uint(8)*
	 alias:   "WhlRotDrctnlStLftNDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStLftNDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[9]
	{
	 type:    uint(8)*
	 alias:   "WhlRotDrctnlStRtDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStRtDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_uint8_T_19[11]
	{
	 type:    uint(8)*
	 alias:   "WhlRotDrctnlStRtNDrvn"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/WhlRotDrctnlStRtNDrvn"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[410]
	{
	 type:    flt(64,IEEE)*
	 alias:   "acceleration{SubArray1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[409]
	{
	 type:    flt(64,IEEE)*
	 alias:   "acceleration{SubArray2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[77]
	{
	 type:    flt(32,IEEE)*
	 alias:   "acceleration{SubArray3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[78]
	{
	 type:    flt(32,IEEE)*
	 alias:   "acceleration{SubArray4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[76]
	{
	 type:    flt(32,IEEE)*
	 alias:   "acceleration{SubArray5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[422]
	{
	 type:    flt(64,IEEE)*
	 alias:   "accuracy{SubArray1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[418]
	{
	 type:    flt(64,IEEE)*
	 alias:   "accuracy{SubArray2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[79]
	{
	 type:    flt(32,IEEE)*
	 alias:   "accuracy{SubArray3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[80]
	{
	 type:    flt(32,IEEE)*
	 alias:   "accuracy{SubArray4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[81]
	{
	 type:    flt(32,IEEE)*
	 alias:   "accuracy{SubArray5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[82]
	{
	 type:    flt(32,IEEE)*
	 alias:   "accuracy{SubArray6}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[83]
	{
	 type:    flt(32,IEEE)*
	 alias:   "accuracy{SubArray7}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[84]
	{
	 type:    flt(32,IEEE)*
	 alias:   "accuracy{SubArray8}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[448]
	{
	 type:    flt(64,IEEE)*
	 alias:   "altitude"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Altitude/Altitude"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_AutoStateEnum_15[0]
	{
	 type:    enum SpeedHarm_AutoStateEnum*
	 alias:   "current_merge_state"
	 origin:  "SpeedHarm/Speed Harm Control Code/Compute Automation State/Auto State"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[76]
	{
	 type:    flt(32,IEEE)*
	 alias:   "down{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Down Accel/Down accel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[433]
	{
	 type:    flt(64,IEEE)*
	 alias:   "down{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Down/Altitude"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[85]
	{
	 type:    flt(32,IEEE)*
	 alias:   "down{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Down/down"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[81]
	{
	 type:    flt(32,IEEE)*
	 alias:   "down pos"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Horizontal Pos/down acc"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[84]
	{
	 type:    flt(32,IEEE)*
	 alias:   "down vel"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Velocity/down vel acc"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[435]
	{
	 type:    flt(64,IEEE)*
	 alias:   "east"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/East/East"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[80]
	{
	 type:    flt(32,IEEE)*
	 alias:   "east pos"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Horizontal Pos/east acc"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[83]
	{
	 type:    flt(32,IEEE)*
	 alias:   "east vel"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Velocity/east vel acc"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[86]
	{
	 type:    flt(32,IEEE)*
	 alias:   "forward"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Fwd/fwd"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[77]
	{
	 type:    flt(32,IEEE)*
	 alias:   "fwd"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Fwd Accel/Fwd accel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[340]
	{
	 type:    flt(64,IEEE)*
	 alias:   "gap_error{Occurence1}"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/Gain1/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[371]
	{
	 type:    flt(64,IEEE)*
	 alias:   "gap_error{Occurence2}"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Limit/Speed Control/Gain1/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[461]
	{
	 type:    flt(64,IEEE)*
	 alias:   "global pose{SubArray1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[459]
	{
	 type:    flt(64,IEEE)*
	 alias:   "global pose{SubArray2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[450]
	{
	 type:    flt(64,IEEE)*
	 alias:   "global pose{SubArray3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[452]
	{
	 type:    flt(64,IEEE)*
	 alias:   "global pose{SubArray4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[448]
	{
	 type:    flt(64,IEEE)*
	 alias:   "global pose{SubArray5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[92]
	{
	 type:    flt(32,IEEE)*
	 alias:   "global pose{SubArray6}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[91]
	{
	 type:    flt(32,IEEE)*
	 alias:   "global pose{SubArray7}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[93]
	{
	 type:    flt(32,IEEE)*
	 alias:   "global pose{SubArray8}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[450]
	{
	 type:    flt(64,IEEE)*
	 alias:   "latitude"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Latitude/Latitiude"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[349]
	{
	 type:    flt(64,IEEE)*
	 alias:   "lead_vehicle_speed"
	 origin:  "SpeedHarm/Speed Harm Control Code/Radar Target Speed/Speed"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[446]
	{
	 type:    flt(64,IEEE)*
	 alias:   "local pose{SubArray1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[444]
	{
	 type:    flt(64,IEEE)*
	 alias:   "local pose{SubArray2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[437]
	{
	 type:    flt(64,IEEE)*
	 alias:   "local pose{SubArray3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[435]
	{
	 type:    flt(64,IEEE)*
	 alias:   "local pose{SubArray4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[433]
	{
	 type:    flt(64,IEEE)*
	 alias:   "local pose{SubArray5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[89]
	{
	 type:    flt(32,IEEE)*
	 alias:   "local pose{SubArray6}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[88]
	{
	 type:    flt(32,IEEE)*
	 alias:   "local pose{SubArray7}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[90]
	{
	 type:    flt(32,IEEE)*
	 alias:   "local pose{SubArray8}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[452]
	{
	 type:    flt(64,IEEE)*
	 alias:   "longitude"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Longitude/Longitude"
	 flags:   LABEL|READONLY
	}
	-- Skipping label "max_accel"

	p_SpeedHarm_B_real_T_10[463]
	{
	 type:    flt(64,IEEE)*
	 alias:   "message counter"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Parse Payload/Sum/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[437]
	{
	 type:    flt(64,IEEE)*
	 alias:   "north"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/North/North"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[79]
	{
	 type:    flt(32,IEEE)*
	 alias:   "north pos"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Horizontal Pos/north acc"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[82]
	{
	 type:    flt(32,IEEE)*
	 alias:   "north vel"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/Velocity/north vel acc"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[91]
	{
	 type:    flt(32,IEEE)*
	 alias:   "pitch{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Pitch/Pitch"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[88]
	{
	 type:    flt(32,IEEE)*
	 alias:   "pitch{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Pitch/Pitch"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[355]
	{
	 type:    flt(64,IEEE)*
	 alias:   "raw_spd_command"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/RawSpdCmd"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[78]
	{
	 type:    flt(32,IEEE)*
	 alias:   "right{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/Right Accel/Right accel"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[87]
	{
	 type:    flt(32,IEEE)*
	 alias:   "right{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Right/right"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[92]
	{
	 type:    flt(32,IEEE)*
	 alias:   "roll{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Roll/Roll"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[89]
	{
	 type:    flt(32,IEEE)*
	 alias:   "roll{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Roll/Roll"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[358]
	{
	 type:    flt(64,IEEE)*
	 alias:   "speed_command"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Control/SpdCmd"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[314]
	{
	 type:    flt(64,IEEE)*
	 alias:   "speed_command_final"
	 origin:  "SpeedHarm/Speed Harm Control Code/Speed Validation/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[7]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[51]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[53]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[55]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[57]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[0]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence6}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[42]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence7}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Adaptive_Cruise_Disp_Stat_HS/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[32]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence8}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Antilock_Brake_and_TC_Status_HC/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[11]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence9}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Driven_Wheel_Grnd_Velocity_HS/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[28]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence10}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/Exterior_Lighting_HS_0x140/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[15]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence11}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/NonDriven_Wheel_Grnd_Velocity_HS/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[39]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence12}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PPEI_Steering_Wheel_Angle/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[36]
	{
	 type:    flt(64,IEEE)*
	 alias:   "status{Occurence13}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/PTEI_Brake_Apply_Status/RX status"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[8]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/AccelModuleFeedback/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[52]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/BrakeModuleFeedback/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[54]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/FrontLightStatus/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[56]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/RearLightStatus/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[58]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/SpeedControlEcho/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[1]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence6}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Command Bus RX Handler/UTC_Time/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[46]
	{
	 type:    flt(64,IEEE)*
	 alias:   "time{Occurence7}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX High-Speed Bus Rx Handler/ETEI_Engine_General_Status/RX time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[410]
	{
	 type:    flt(64,IEEE)*
	 alias:   "timestamp{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/timestamp/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[422]
	{
	 type:    flt(64,IEEE)*
	 alias:   "timestamp{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/timestamp/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[461]
	{
	 type:    flt(64,IEEE)*
	 alias:   "timestamp{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/timestamp/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[446]
	{
	 type:    flt(64,IEEE)*
	 alias:   "timestamp{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/timestamp/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[431]
	{
	 type:    flt(64,IEEE)*
	 alias:   "timestamp{Occurence5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/timestamp/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[409]
	{
	 type:    flt(64,IEEE)*
	 alias:   "utc time{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Acceleration Handler/UTC Time/Time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[418]
	{
	 type:    flt(64,IEEE)*
	 alias:   "utc time{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Accuracy Handler/UTC Time/Time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[459]
	{
	 type:    flt(64,IEEE)*
	 alias:   "utc time{Occurence3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/UTC Time/Time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[444]
	{
	 type:    flt(64,IEEE)*
	 alias:   "utc time{Occurence4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/UTC Time/Time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[430]
	{
	 type:    flt(64,IEEE)*
	 alias:   "utc time{Occurence5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/UTC Time/Time"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[394]
	{
	 type:    flt(64,IEEE)*
	 alias:   "vehicle_length"
	 origin:  "SpeedHarm/Speed Harm Control Code/Veh Len m/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[431]
	{
	 type:    flt(64,IEEE)*
	 alias:   "velocity state{SubArray1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real_T_10[430]
	{
	 type:    flt(64,IEEE)*
	 alias:   "velocity state{SubArray2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[86]
	{
	 type:    flt(32,IEEE)*
	 alias:   "velocity state{SubArray3}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[87]
	{
	 type:    flt(32,IEEE)*
	 alias:   "velocity state{SubArray4}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[85]
	{
	 type:    flt(32,IEEE)*
	 alias:   "velocity state{SubArray5}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Velocity State Handler/Out1"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[93]
	{
	 type:    flt(32,IEEE)*
	 alias:   "yaw{Occurence1}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Global Pose Handler/Yaw/Yaw"
	 flags:   LABEL|READONLY
	}
	p_SpeedHarm_B_real32_T_12[90]
	{
	 type:    flt(32,IEEE)*
	 alias:   "yaw{Occurence2}"
	 origin:  "SpeedHarm/Carma_Platform\n/SRX Pinpoint RX Handler/Pinpoint RX Handler/Local Pose Handler/Yaw/Yaw"
	 flags:   LABEL|READONLY
	}

endgroup

-- ******** RTT Dynamic Variables *********************************************

group "RTT Dynamic Variables"
{
 flags: COLLAPSED
}

endgroup

-- ******** User variables from model_usr.trc *********************************

-- RTI_USR_TRC_BEGIN

-- No user file SpeedHarm_usr.trc found.

-- RTI_USR_TRC_END
-- ******** Task Information variables ****************************************

group "Task Info"
{
 flags: COLLAPSED
}
  group "Timer Task 1"
  {
   flags: COLLAPSED
  }

  pRti_TIMERA_STime
  {
   type:  flt(64,IEEE)*
   alias: "sampleTime"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_TTime
  {
   type:  flt(64,IEEE)*
   alias: "turnaroundTime"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_TState
  {
   type:  int(32)*
   alias: "state"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_OType
  {
   type:  int(32)*
   alias: "overrunCheckType"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_OMax
  {
   type:  int(32)*
   alias: "overrunQueueMax"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_ORpt
  {
   type:  int(32)*
   alias: "overrunQueueCount"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_OCnt
  {
   type:  int(32)*
   alias: "overrunCount"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_TCnt
  {
   type:  flt(64,IEEE)*
   alias: "taskCallCount"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_Prio
  {
   type:  int(32)*
   alias: "priority"
   flags: SYSTEM|READONLY
  }
  endgroup

  group "BSM Broadcast Task"
  {
   flags: COLLAPSED
  }

  pRti_INTERVALA1_STime
  {
   type:  flt(64,IEEE)*
   alias: "sampleTime"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_TTime
  {
   type:  flt(64,IEEE)*
   alias: "turnaroundTime"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_TState
  {
   type:  int(32)*
   alias: "state"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_OType
  {
   type:  int(32)*
   alias: "overrunCheckType"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_OMax
  {
   type:  int(32)*
   alias: "overrunQueueMax"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_ORpt
  {
   type:  int(32)*
   alias: "overrunQueueCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_OCnt
  {
   type:  int(32)*
   alias: "overrunCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_TCnt
  {
   type:  flt(64,IEEE)*
   alias: "taskCallCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA1_Prio
  {
   type:  int(32)*
   alias: "priority"
   flags: SYSTEM|READONLY
  }
  endgroup

  group "Time-Triggered Task"
  {
   flags: COLLAPSED
  }

  pRti_INTERVALA2_STime
  {
   type:  flt(64,IEEE)*
   alias: "sampleTime"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_TTime
  {
   type:  flt(64,IEEE)*
   alias: "turnaroundTime"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_TState
  {
   type:  int(32)*
   alias: "state"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_OType
  {
   type:  int(32)*
   alias: "overrunCheckType"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_OMax
  {
   type:  int(32)*
   alias: "overrunQueueMax"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_ORpt
  {
   type:  int(32)*
   alias: "overrunQueueCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_OCnt
  {
   type:  int(32)*
   alias: "overrunCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_TCnt
  {
   type:  flt(64,IEEE)*
   alias: "taskCallCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA2_Prio
  {
   type:  int(32)*
   alias: "priority"
   flags: SYSTEM|READONLY
  }
  endgroup

  group "test trigger"
  {
   flags: COLLAPSED
  }

  pRti_INTERVALA3_STime
  {
   type:  flt(64,IEEE)*
   alias: "sampleTime"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_TTime
  {
   type:  flt(64,IEEE)*
   alias: "turnaroundTime"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_TState
  {
   type:  int(32)*
   alias: "state"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_OType
  {
   type:  int(32)*
   alias: "overrunCheckType"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_OMax
  {
   type:  int(32)*
   alias: "overrunQueueMax"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_ORpt
  {
   type:  int(32)*
   alias: "overrunQueueCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_OCnt
  {
   type:  int(32)*
   alias: "overrunCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_TCnt
  {
   type:  flt(64,IEEE)*
   alias: "taskCallCount"
   flags: SYSTEM|READONLY
  }
  pRti_INTERVALA3_Prio
  {
   type:  int(32)*
   alias: "priority"
   flags: SYSTEM|READONLY
  }
  endgroup

  group "rti_ethernet_interface_name Interrupt [RX//TX]"
  {
   flags: COLLAPSED
  }

  pRti_BB_BYP_ETHT1M0I0S0_TTime
  {
   type:  flt(64,IEEE)*
   alias: "turnaroundTime"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_TState
  {
   type:  int(32)*
   alias: "state"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_OType
  {
   type:  int(32)*
   alias: "overrunCheckType"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_OMax
  {
   type:  int(32)*
   alias: "overrunQueueMax"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_ORpt
  {
   type:  int(32)*
   alias: "overrunQueueCount"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_OCnt
  {
   type:  int(32)*
   alias: "overrunCount"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_TCnt
  {
   type:  flt(64,IEEE)*
   alias: "taskCallCount"
   flags: SYSTEM|READONLY
  }
  pRti_BB_BYP_ETHT1M0I0S0_Prio
  {
   type:  int(32)*
   alias: "priority"
   flags: SYSTEM|READONLY
  }
  endgroup


endgroup

-- ******** [EOF] *************************************************************



